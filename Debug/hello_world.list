
hello_world.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000043a0  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000080  0800455c  0800455c  0000555c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080045dc  080045dc  00006068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080045dc  080045dc  000055dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080045e4  080045e4  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080045e4  080045e4  000055e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080045e8  080045e8  000055e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20040000  080045ec  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000204  20040068  08004654  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2004026c  08004654  0000626c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000cf5c  00000000  00000000  00006098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001d42  00000000  00000000  00012ff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000aa8  00000000  00000000  00014d38  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000824  00000000  00000000  000157e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00029fa6  00000000  00000000  00016004  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c9f6  00000000  00000000  0003ffaa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fedda  00000000  00000000  0004c9a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014b77a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000311c  00000000  00000000  0014b7c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000096  00000000  00000000  0014e8dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	20040068 	.word	0x20040068
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08004544 	.word	0x08004544

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	2004006c 	.word	0x2004006c
 80001f8:	08004544 	.word	0x08004544

080001fc <__aeabi_uldivmod>:
 80001fc:	b953      	cbnz	r3, 8000214 <__aeabi_uldivmod+0x18>
 80001fe:	b94a      	cbnz	r2, 8000214 <__aeabi_uldivmod+0x18>
 8000200:	2900      	cmp	r1, #0
 8000202:	bf08      	it	eq
 8000204:	2800      	cmpeq	r0, #0
 8000206:	bf1c      	itt	ne
 8000208:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800020c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000210:	f000 b988 	b.w	8000524 <__aeabi_idiv0>
 8000214:	f1ad 0c08 	sub.w	ip, sp, #8
 8000218:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800021c:	f000 f806 	bl	800022c <__udivmoddi4>
 8000220:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000224:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000228:	b004      	add	sp, #16
 800022a:	4770      	bx	lr

0800022c <__udivmoddi4>:
 800022c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000230:	9d08      	ldr	r5, [sp, #32]
 8000232:	468e      	mov	lr, r1
 8000234:	4604      	mov	r4, r0
 8000236:	4688      	mov	r8, r1
 8000238:	2b00      	cmp	r3, #0
 800023a:	d14a      	bne.n	80002d2 <__udivmoddi4+0xa6>
 800023c:	428a      	cmp	r2, r1
 800023e:	4617      	mov	r7, r2
 8000240:	d962      	bls.n	8000308 <__udivmoddi4+0xdc>
 8000242:	fab2 f682 	clz	r6, r2
 8000246:	b14e      	cbz	r6, 800025c <__udivmoddi4+0x30>
 8000248:	f1c6 0320 	rsb	r3, r6, #32
 800024c:	fa01 f806 	lsl.w	r8, r1, r6
 8000250:	fa20 f303 	lsr.w	r3, r0, r3
 8000254:	40b7      	lsls	r7, r6
 8000256:	ea43 0808 	orr.w	r8, r3, r8
 800025a:	40b4      	lsls	r4, r6
 800025c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000260:	fa1f fc87 	uxth.w	ip, r7
 8000264:	fbb8 f1fe 	udiv	r1, r8, lr
 8000268:	0c23      	lsrs	r3, r4, #16
 800026a:	fb0e 8811 	mls	r8, lr, r1, r8
 800026e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000272:	fb01 f20c 	mul.w	r2, r1, ip
 8000276:	429a      	cmp	r2, r3
 8000278:	d909      	bls.n	800028e <__udivmoddi4+0x62>
 800027a:	18fb      	adds	r3, r7, r3
 800027c:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000280:	f080 80ea 	bcs.w	8000458 <__udivmoddi4+0x22c>
 8000284:	429a      	cmp	r2, r3
 8000286:	f240 80e7 	bls.w	8000458 <__udivmoddi4+0x22c>
 800028a:	3902      	subs	r1, #2
 800028c:	443b      	add	r3, r7
 800028e:	1a9a      	subs	r2, r3, r2
 8000290:	b2a3      	uxth	r3, r4
 8000292:	fbb2 f0fe 	udiv	r0, r2, lr
 8000296:	fb0e 2210 	mls	r2, lr, r0, r2
 800029a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800029e:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a2:	459c      	cmp	ip, r3
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0x8e>
 80002a6:	18fb      	adds	r3, r7, r3
 80002a8:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 80002ac:	f080 80d6 	bcs.w	800045c <__udivmoddi4+0x230>
 80002b0:	459c      	cmp	ip, r3
 80002b2:	f240 80d3 	bls.w	800045c <__udivmoddi4+0x230>
 80002b6:	443b      	add	r3, r7
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002be:	eba3 030c 	sub.w	r3, r3, ip
 80002c2:	2100      	movs	r1, #0
 80002c4:	b11d      	cbz	r5, 80002ce <__udivmoddi4+0xa2>
 80002c6:	40f3      	lsrs	r3, r6
 80002c8:	2200      	movs	r2, #0
 80002ca:	e9c5 3200 	strd	r3, r2, [r5]
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d905      	bls.n	80002e2 <__udivmoddi4+0xb6>
 80002d6:	b10d      	cbz	r5, 80002dc <__udivmoddi4+0xb0>
 80002d8:	e9c5 0100 	strd	r0, r1, [r5]
 80002dc:	2100      	movs	r1, #0
 80002de:	4608      	mov	r0, r1
 80002e0:	e7f5      	b.n	80002ce <__udivmoddi4+0xa2>
 80002e2:	fab3 f183 	clz	r1, r3
 80002e6:	2900      	cmp	r1, #0
 80002e8:	d146      	bne.n	8000378 <__udivmoddi4+0x14c>
 80002ea:	4573      	cmp	r3, lr
 80002ec:	d302      	bcc.n	80002f4 <__udivmoddi4+0xc8>
 80002ee:	4282      	cmp	r2, r0
 80002f0:	f200 8105 	bhi.w	80004fe <__udivmoddi4+0x2d2>
 80002f4:	1a84      	subs	r4, r0, r2
 80002f6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002fa:	2001      	movs	r0, #1
 80002fc:	4690      	mov	r8, r2
 80002fe:	2d00      	cmp	r5, #0
 8000300:	d0e5      	beq.n	80002ce <__udivmoddi4+0xa2>
 8000302:	e9c5 4800 	strd	r4, r8, [r5]
 8000306:	e7e2      	b.n	80002ce <__udivmoddi4+0xa2>
 8000308:	2a00      	cmp	r2, #0
 800030a:	f000 8090 	beq.w	800042e <__udivmoddi4+0x202>
 800030e:	fab2 f682 	clz	r6, r2
 8000312:	2e00      	cmp	r6, #0
 8000314:	f040 80a4 	bne.w	8000460 <__udivmoddi4+0x234>
 8000318:	1a8a      	subs	r2, r1, r2
 800031a:	0c03      	lsrs	r3, r0, #16
 800031c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000320:	b280      	uxth	r0, r0
 8000322:	b2bc      	uxth	r4, r7
 8000324:	2101      	movs	r1, #1
 8000326:	fbb2 fcfe 	udiv	ip, r2, lr
 800032a:	fb0e 221c 	mls	r2, lr, ip, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb04 f20c 	mul.w	r2, r4, ip
 8000336:	429a      	cmp	r2, r3
 8000338:	d907      	bls.n	800034a <__udivmoddi4+0x11e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8000340:	d202      	bcs.n	8000348 <__udivmoddi4+0x11c>
 8000342:	429a      	cmp	r2, r3
 8000344:	f200 80e0 	bhi.w	8000508 <__udivmoddi4+0x2dc>
 8000348:	46c4      	mov	ip, r8
 800034a:	1a9b      	subs	r3, r3, r2
 800034c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000350:	fb0e 3312 	mls	r3, lr, r2, r3
 8000354:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000358:	fb02 f404 	mul.w	r4, r2, r4
 800035c:	429c      	cmp	r4, r3
 800035e:	d907      	bls.n	8000370 <__udivmoddi4+0x144>
 8000360:	18fb      	adds	r3, r7, r3
 8000362:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 8000366:	d202      	bcs.n	800036e <__udivmoddi4+0x142>
 8000368:	429c      	cmp	r4, r3
 800036a:	f200 80ca 	bhi.w	8000502 <__udivmoddi4+0x2d6>
 800036e:	4602      	mov	r2, r0
 8000370:	1b1b      	subs	r3, r3, r4
 8000372:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000376:	e7a5      	b.n	80002c4 <__udivmoddi4+0x98>
 8000378:	f1c1 0620 	rsb	r6, r1, #32
 800037c:	408b      	lsls	r3, r1
 800037e:	fa22 f706 	lsr.w	r7, r2, r6
 8000382:	431f      	orrs	r7, r3
 8000384:	fa0e f401 	lsl.w	r4, lr, r1
 8000388:	fa20 f306 	lsr.w	r3, r0, r6
 800038c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000390:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000394:	4323      	orrs	r3, r4
 8000396:	fa00 f801 	lsl.w	r8, r0, r1
 800039a:	fa1f fc87 	uxth.w	ip, r7
 800039e:	fbbe f0f9 	udiv	r0, lr, r9
 80003a2:	0c1c      	lsrs	r4, r3, #16
 80003a4:	fb09 ee10 	mls	lr, r9, r0, lr
 80003a8:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003ac:	fb00 fe0c 	mul.w	lr, r0, ip
 80003b0:	45a6      	cmp	lr, r4
 80003b2:	fa02 f201 	lsl.w	r2, r2, r1
 80003b6:	d909      	bls.n	80003cc <__udivmoddi4+0x1a0>
 80003b8:	193c      	adds	r4, r7, r4
 80003ba:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 80003be:	f080 809c 	bcs.w	80004fa <__udivmoddi4+0x2ce>
 80003c2:	45a6      	cmp	lr, r4
 80003c4:	f240 8099 	bls.w	80004fa <__udivmoddi4+0x2ce>
 80003c8:	3802      	subs	r0, #2
 80003ca:	443c      	add	r4, r7
 80003cc:	eba4 040e 	sub.w	r4, r4, lr
 80003d0:	fa1f fe83 	uxth.w	lr, r3
 80003d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d8:	fb09 4413 	mls	r4, r9, r3, r4
 80003dc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003e0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003e4:	45a4      	cmp	ip, r4
 80003e6:	d908      	bls.n	80003fa <__udivmoddi4+0x1ce>
 80003e8:	193c      	adds	r4, r7, r4
 80003ea:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 80003ee:	f080 8082 	bcs.w	80004f6 <__udivmoddi4+0x2ca>
 80003f2:	45a4      	cmp	ip, r4
 80003f4:	d97f      	bls.n	80004f6 <__udivmoddi4+0x2ca>
 80003f6:	3b02      	subs	r3, #2
 80003f8:	443c      	add	r4, r7
 80003fa:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003fe:	eba4 040c 	sub.w	r4, r4, ip
 8000402:	fba0 ec02 	umull	lr, ip, r0, r2
 8000406:	4564      	cmp	r4, ip
 8000408:	4673      	mov	r3, lr
 800040a:	46e1      	mov	r9, ip
 800040c:	d362      	bcc.n	80004d4 <__udivmoddi4+0x2a8>
 800040e:	d05f      	beq.n	80004d0 <__udivmoddi4+0x2a4>
 8000410:	b15d      	cbz	r5, 800042a <__udivmoddi4+0x1fe>
 8000412:	ebb8 0203 	subs.w	r2, r8, r3
 8000416:	eb64 0409 	sbc.w	r4, r4, r9
 800041a:	fa04 f606 	lsl.w	r6, r4, r6
 800041e:	fa22 f301 	lsr.w	r3, r2, r1
 8000422:	431e      	orrs	r6, r3
 8000424:	40cc      	lsrs	r4, r1
 8000426:	e9c5 6400 	strd	r6, r4, [r5]
 800042a:	2100      	movs	r1, #0
 800042c:	e74f      	b.n	80002ce <__udivmoddi4+0xa2>
 800042e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000432:	0c01      	lsrs	r1, r0, #16
 8000434:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000438:	b280      	uxth	r0, r0
 800043a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800043e:	463b      	mov	r3, r7
 8000440:	4638      	mov	r0, r7
 8000442:	463c      	mov	r4, r7
 8000444:	46b8      	mov	r8, r7
 8000446:	46be      	mov	lr, r7
 8000448:	2620      	movs	r6, #32
 800044a:	fbb1 f1f7 	udiv	r1, r1, r7
 800044e:	eba2 0208 	sub.w	r2, r2, r8
 8000452:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000456:	e766      	b.n	8000326 <__udivmoddi4+0xfa>
 8000458:	4601      	mov	r1, r0
 800045a:	e718      	b.n	800028e <__udivmoddi4+0x62>
 800045c:	4610      	mov	r0, r2
 800045e:	e72c      	b.n	80002ba <__udivmoddi4+0x8e>
 8000460:	f1c6 0220 	rsb	r2, r6, #32
 8000464:	fa2e f302 	lsr.w	r3, lr, r2
 8000468:	40b7      	lsls	r7, r6
 800046a:	40b1      	lsls	r1, r6
 800046c:	fa20 f202 	lsr.w	r2, r0, r2
 8000470:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000474:	430a      	orrs	r2, r1
 8000476:	fbb3 f8fe 	udiv	r8, r3, lr
 800047a:	b2bc      	uxth	r4, r7
 800047c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000480:	0c11      	lsrs	r1, r2, #16
 8000482:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000486:	fb08 f904 	mul.w	r9, r8, r4
 800048a:	40b0      	lsls	r0, r6
 800048c:	4589      	cmp	r9, r1
 800048e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000492:	b280      	uxth	r0, r0
 8000494:	d93e      	bls.n	8000514 <__udivmoddi4+0x2e8>
 8000496:	1879      	adds	r1, r7, r1
 8000498:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 800049c:	d201      	bcs.n	80004a2 <__udivmoddi4+0x276>
 800049e:	4589      	cmp	r9, r1
 80004a0:	d81f      	bhi.n	80004e2 <__udivmoddi4+0x2b6>
 80004a2:	eba1 0109 	sub.w	r1, r1, r9
 80004a6:	fbb1 f9fe 	udiv	r9, r1, lr
 80004aa:	fb09 f804 	mul.w	r8, r9, r4
 80004ae:	fb0e 1119 	mls	r1, lr, r9, r1
 80004b2:	b292      	uxth	r2, r2
 80004b4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004b8:	4542      	cmp	r2, r8
 80004ba:	d229      	bcs.n	8000510 <__udivmoddi4+0x2e4>
 80004bc:	18ba      	adds	r2, r7, r2
 80004be:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 80004c2:	d2c4      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c4:	4542      	cmp	r2, r8
 80004c6:	d2c2      	bcs.n	800044e <__udivmoddi4+0x222>
 80004c8:	f1a9 0102 	sub.w	r1, r9, #2
 80004cc:	443a      	add	r2, r7
 80004ce:	e7be      	b.n	800044e <__udivmoddi4+0x222>
 80004d0:	45f0      	cmp	r8, lr
 80004d2:	d29d      	bcs.n	8000410 <__udivmoddi4+0x1e4>
 80004d4:	ebbe 0302 	subs.w	r3, lr, r2
 80004d8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004dc:	3801      	subs	r0, #1
 80004de:	46e1      	mov	r9, ip
 80004e0:	e796      	b.n	8000410 <__udivmoddi4+0x1e4>
 80004e2:	eba7 0909 	sub.w	r9, r7, r9
 80004e6:	4449      	add	r1, r9
 80004e8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004ec:	fbb1 f9fe 	udiv	r9, r1, lr
 80004f0:	fb09 f804 	mul.w	r8, r9, r4
 80004f4:	e7db      	b.n	80004ae <__udivmoddi4+0x282>
 80004f6:	4673      	mov	r3, lr
 80004f8:	e77f      	b.n	80003fa <__udivmoddi4+0x1ce>
 80004fa:	4650      	mov	r0, sl
 80004fc:	e766      	b.n	80003cc <__udivmoddi4+0x1a0>
 80004fe:	4608      	mov	r0, r1
 8000500:	e6fd      	b.n	80002fe <__udivmoddi4+0xd2>
 8000502:	443b      	add	r3, r7
 8000504:	3a02      	subs	r2, #2
 8000506:	e733      	b.n	8000370 <__udivmoddi4+0x144>
 8000508:	f1ac 0c02 	sub.w	ip, ip, #2
 800050c:	443b      	add	r3, r7
 800050e:	e71c      	b.n	800034a <__udivmoddi4+0x11e>
 8000510:	4649      	mov	r1, r9
 8000512:	e79c      	b.n	800044e <__udivmoddi4+0x222>
 8000514:	eba1 0109 	sub.w	r1, r1, r9
 8000518:	46c4      	mov	ip, r8
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	e7c4      	b.n	80004ae <__udivmoddi4+0x282>

08000524 <__aeabi_idiv0>:
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop

08000528 <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
 800052e:	6078      	str	r0, [r7, #4]
HAL_UART_Transmit(&hlpuart1, (uint8_t *)&ch, 1, 10);
 8000530:	1d39      	adds	r1, r7, #4
 8000532:	230a      	movs	r3, #10
 8000534:	2201      	movs	r2, #1
 8000536:	4805      	ldr	r0, [pc, #20]	@ (800054c <__io_putchar+0x24>)
 8000538:	f002 fcac 	bl	8002e94 <HAL_UART_Transmit>
HAL_Delay(10);		// Slow Printing
 800053c:	200a      	movs	r0, #10
 800053e:	f000 fcf9 	bl	8000f34 <HAL_Delay>
return ch;
 8000542:	687b      	ldr	r3, [r7, #4]
}
 8000544:	4618      	mov	r0, r3
 8000546:	3708      	adds	r7, #8
 8000548:	46bd      	mov	sp, r7
 800054a:	bd80      	pop	{r7, pc}
 800054c:	20040084 	.word	0x20040084

08000550 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000554:	f000 fc79 	bl	8000e4a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000558:	f000 f80a 	bl	8000570 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800055c:	f000 f89a 	bl	8000694 <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000560:	f000 f84c 	bl	80005fc <MX_LPUART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  printf("Hello World!\r\n");
 8000564:	4801      	ldr	r0, [pc, #4]	@ (800056c <main+0x1c>)
 8000566:	f003 fc59 	bl	8003e1c <puts>
 800056a:	e7fb      	b.n	8000564 <main+0x14>
 800056c:	0800455c 	.word	0x0800455c

08000570 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b096      	sub	sp, #88	@ 0x58
 8000574:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000576:	f107 0314 	add.w	r3, r7, #20
 800057a:	2244      	movs	r2, #68	@ 0x44
 800057c:	2100      	movs	r1, #0
 800057e:	4618      	mov	r0, r3
 8000580:	f003 fc54 	bl	8003e2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000584:	463b      	mov	r3, r7
 8000586:	2200      	movs	r2, #0
 8000588:	601a      	str	r2, [r3, #0]
 800058a:	605a      	str	r2, [r3, #4]
 800058c:	609a      	str	r2, [r3, #8]
 800058e:	60da      	str	r2, [r3, #12]
 8000590:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000592:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000596:	f000 ff89 	bl	80014ac <HAL_PWREx_ControlVoltageScaling>
 800059a:	4603      	mov	r3, r0
 800059c:	2b00      	cmp	r3, #0
 800059e:	d001      	beq.n	80005a4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005a0:	f000 fabc 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80005a4:	2310      	movs	r3, #16
 80005a6:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005a8:	2301      	movs	r3, #1
 80005aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005ac:	2300      	movs	r3, #0
 80005ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80005b0:	2360      	movs	r3, #96	@ 0x60
 80005b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005b4:	2300      	movs	r3, #0
 80005b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005b8:	f107 0314 	add.w	r3, r7, #20
 80005bc:	4618      	mov	r0, r3
 80005be:	f001 f829 	bl	8001614 <HAL_RCC_OscConfig>
 80005c2:	4603      	mov	r3, r0
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d001      	beq.n	80005cc <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80005c8:	f000 faa8 	bl	8000b1c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005cc:	230f      	movs	r3, #15
 80005ce:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005d4:	2300      	movs	r3, #0
 80005d6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005d8:	2300      	movs	r3, #0
 80005da:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005dc:	2300      	movs	r3, #0
 80005de:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80005e0:	463b      	mov	r3, r7
 80005e2:	2100      	movs	r1, #0
 80005e4:	4618      	mov	r0, r3
 80005e6:	f001 fc2f 	bl	8001e48 <HAL_RCC_ClockConfig>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x84>
  {
    Error_Handler();
 80005f0:	f000 fa94 	bl	8000b1c <Error_Handler>
  }
}
 80005f4:	bf00      	nop
 80005f6:	3758      	adds	r7, #88	@ 0x58
 80005f8:	46bd      	mov	sp, r7
 80005fa:	bd80      	pop	{r7, pc}

080005fc <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8000600:	4b22      	ldr	r3, [pc, #136]	@ (800068c <MX_LPUART1_UART_Init+0x90>)
 8000602:	4a23      	ldr	r2, [pc, #140]	@ (8000690 <MX_LPUART1_UART_Init+0x94>)
 8000604:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8000606:	4b21      	ldr	r3, [pc, #132]	@ (800068c <MX_LPUART1_UART_Init+0x90>)
 8000608:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800060c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800060e:	4b1f      	ldr	r3, [pc, #124]	@ (800068c <MX_LPUART1_UART_Init+0x90>)
 8000610:	2200      	movs	r2, #0
 8000612:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8000614:	4b1d      	ldr	r3, [pc, #116]	@ (800068c <MX_LPUART1_UART_Init+0x90>)
 8000616:	2200      	movs	r2, #0
 8000618:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800061a:	4b1c      	ldr	r3, [pc, #112]	@ (800068c <MX_LPUART1_UART_Init+0x90>)
 800061c:	2200      	movs	r2, #0
 800061e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8000620:	4b1a      	ldr	r3, [pc, #104]	@ (800068c <MX_LPUART1_UART_Init+0x90>)
 8000622:	220c      	movs	r2, #12
 8000624:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000626:	4b19      	ldr	r3, [pc, #100]	@ (800068c <MX_LPUART1_UART_Init+0x90>)
 8000628:	2200      	movs	r2, #0
 800062a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800062c:	4b17      	ldr	r3, [pc, #92]	@ (800068c <MX_LPUART1_UART_Init+0x90>)
 800062e:	2200      	movs	r2, #0
 8000630:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000632:	4b16      	ldr	r3, [pc, #88]	@ (800068c <MX_LPUART1_UART_Init+0x90>)
 8000634:	2200      	movs	r2, #0
 8000636:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000638:	4b14      	ldr	r3, [pc, #80]	@ (800068c <MX_LPUART1_UART_Init+0x90>)
 800063a:	2200      	movs	r2, #0
 800063c:	629a      	str	r2, [r3, #40]	@ 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 800063e:	4b13      	ldr	r3, [pc, #76]	@ (800068c <MX_LPUART1_UART_Init+0x90>)
 8000640:	2200      	movs	r2, #0
 8000642:	665a      	str	r2, [r3, #100]	@ 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8000644:	4811      	ldr	r0, [pc, #68]	@ (800068c <MX_LPUART1_UART_Init+0x90>)
 8000646:	f002 fbd5 	bl	8002df4 <HAL_UART_Init>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 8000650:	f000 fa64 	bl	8000b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000654:	2100      	movs	r1, #0
 8000656:	480d      	ldr	r0, [pc, #52]	@ (800068c <MX_LPUART1_UART_Init+0x90>)
 8000658:	f003 f9fe 	bl	8003a58 <HAL_UARTEx_SetTxFifoThreshold>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000662:	f000 fa5b 	bl	8000b1c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000666:	2100      	movs	r1, #0
 8000668:	4808      	ldr	r0, [pc, #32]	@ (800068c <MX_LPUART1_UART_Init+0x90>)
 800066a:	f003 fa33 	bl	8003ad4 <HAL_UARTEx_SetRxFifoThreshold>
 800066e:	4603      	mov	r3, r0
 8000670:	2b00      	cmp	r3, #0
 8000672:	d001      	beq.n	8000678 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000674:	f000 fa52 	bl	8000b1c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8000678:	4804      	ldr	r0, [pc, #16]	@ (800068c <MX_LPUART1_UART_Init+0x90>)
 800067a:	f003 f9b4 	bl	80039e6 <HAL_UARTEx_DisableFifoMode>
 800067e:	4603      	mov	r3, r0
 8000680:	2b00      	cmp	r3, #0
 8000682:	d001      	beq.n	8000688 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000684:	f000 fa4a 	bl	8000b1c <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000688:	bf00      	nop
 800068a:	bd80      	pop	{r7, pc}
 800068c:	20040084 	.word	0x20040084
 8000690:	40008000 	.word	0x40008000

08000694 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000694:	b580      	push	{r7, lr}
 8000696:	b08e      	sub	sp, #56	@ 0x38
 8000698:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800069a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800069e:	2200      	movs	r2, #0
 80006a0:	601a      	str	r2, [r3, #0]
 80006a2:	605a      	str	r2, [r3, #4]
 80006a4:	609a      	str	r2, [r3, #8]
 80006a6:	60da      	str	r2, [r3, #12]
 80006a8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80006aa:	4bb2      	ldr	r3, [pc, #712]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 80006ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ae:	4ab1      	ldr	r2, [pc, #708]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 80006b0:	f043 0310 	orr.w	r3, r3, #16
 80006b4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006b6:	4baf      	ldr	r3, [pc, #700]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 80006b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ba:	f003 0310 	and.w	r3, r3, #16
 80006be:	623b      	str	r3, [r7, #32]
 80006c0:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006c2:	4bac      	ldr	r3, [pc, #688]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 80006c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c6:	4aab      	ldr	r2, [pc, #684]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 80006c8:	f043 0304 	orr.w	r3, r3, #4
 80006cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006ce:	4ba9      	ldr	r3, [pc, #676]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 80006d0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d2:	f003 0304 	and.w	r3, r3, #4
 80006d6:	61fb      	str	r3, [r7, #28]
 80006d8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006da:	4ba6      	ldr	r3, [pc, #664]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 80006dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006de:	4aa5      	ldr	r2, [pc, #660]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 80006e0:	f043 0320 	orr.w	r3, r3, #32
 80006e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e6:	4ba3      	ldr	r3, [pc, #652]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 80006e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006ea:	f003 0320 	and.w	r3, r3, #32
 80006ee:	61bb      	str	r3, [r7, #24]
 80006f0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80006f2:	4ba0      	ldr	r3, [pc, #640]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 80006f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006f6:	4a9f      	ldr	r2, [pc, #636]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 80006f8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006fe:	4b9d      	ldr	r3, [pc, #628]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 8000700:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000702:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000706:	617b      	str	r3, [r7, #20]
 8000708:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800070a:	4b9a      	ldr	r3, [pc, #616]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 800070c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800070e:	4a99      	ldr	r2, [pc, #612]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 8000710:	f043 0301 	orr.w	r3, r3, #1
 8000714:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000716:	4b97      	ldr	r3, [pc, #604]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 8000718:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800071a:	f003 0301 	and.w	r3, r3, #1
 800071e:	613b      	str	r3, [r7, #16]
 8000720:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000722:	4b94      	ldr	r3, [pc, #592]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 8000724:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000726:	4a93      	ldr	r2, [pc, #588]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 8000728:	f043 0302 	orr.w	r3, r3, #2
 800072c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800072e:	4b91      	ldr	r3, [pc, #580]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 8000730:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000732:	f003 0302 	and.w	r3, r3, #2
 8000736:	60fb      	str	r3, [r7, #12]
 8000738:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800073a:	4b8e      	ldr	r3, [pc, #568]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 800073c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800073e:	4a8d      	ldr	r2, [pc, #564]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 8000740:	f043 0308 	orr.w	r3, r3, #8
 8000744:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000746:	4b8b      	ldr	r3, [pc, #556]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 8000748:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800074a:	f003 0308 	and.w	r3, r3, #8
 800074e:	60bb      	str	r3, [r7, #8]
 8000750:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000752:	4b88      	ldr	r3, [pc, #544]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 8000754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000756:	4a87      	ldr	r2, [pc, #540]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 8000758:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800075c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800075e:	4b85      	ldr	r3, [pc, #532]	@ (8000974 <MX_GPIO_Init+0x2e0>)
 8000760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000762:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000766:	607b      	str	r3, [r7, #4]
 8000768:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 800076a:	f000 ff43 	bl	80015f4 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800076e:	230c      	movs	r3, #12
 8000770:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000772:	2302      	movs	r3, #2
 8000774:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000776:	2300      	movs	r3, #0
 8000778:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077a:	2300      	movs	r3, #0
 800077c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800077e:	230d      	movs	r3, #13
 8000780:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000782:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000786:	4619      	mov	r1, r3
 8000788:	487b      	ldr	r0, [pc, #492]	@ (8000978 <MX_GPIO_Init+0x2e4>)
 800078a:	f000 fcdd 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800078e:	2307      	movs	r3, #7
 8000790:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000792:	2312      	movs	r3, #18
 8000794:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000796:	2300      	movs	r3, #0
 8000798:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800079a:	2303      	movs	r3, #3
 800079c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800079e:	2304      	movs	r3, #4
 80007a0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007a6:	4619      	mov	r1, r3
 80007a8:	4874      	ldr	r0, [pc, #464]	@ (800097c <MX_GPIO_Init+0x2e8>)
 80007aa:	f000 fccd 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80007ae:	2380      	movs	r3, #128	@ 0x80
 80007b0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b2:	2302      	movs	r3, #2
 80007b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007b6:	2300      	movs	r3, #0
 80007b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007ba:	2300      	movs	r3, #0
 80007bc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80007be:	230d      	movs	r3, #13
 80007c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007c6:	4619      	mov	r1, r3
 80007c8:	486c      	ldr	r0, [pc, #432]	@ (800097c <MX_GPIO_Init+0x2e8>)
 80007ca:	f000 fcbd 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80007ce:	233f      	movs	r3, #63	@ 0x3f
 80007d0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80007d2:	230b      	movs	r3, #11
 80007d4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007d6:	2300      	movs	r3, #0
 80007d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80007da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007de:	4619      	mov	r1, r3
 80007e0:	4867      	ldr	r0, [pc, #412]	@ (8000980 <MX_GPIO_Init+0x2ec>)
 80007e2:	f000 fcb1 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007e6:	2301      	movs	r3, #1
 80007e8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007ea:	2302      	movs	r3, #2
 80007ec:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ee:	2300      	movs	r3, #0
 80007f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007f2:	2300      	movs	r3, #0
 80007f4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80007f6:	2301      	movs	r3, #1
 80007f8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007fa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007fe:	4619      	mov	r1, r3
 8000800:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000804:	f000 fca0 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 8000808:	230a      	movs	r3, #10
 800080a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 800080c:	230b      	movs	r3, #11
 800080e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000810:	2300      	movs	r3, #0
 8000812:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000814:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000818:	4619      	mov	r1, r3
 800081a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800081e:	f000 fc93 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000822:	23f0      	movs	r3, #240	@ 0xf0
 8000824:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000826:	2302      	movs	r3, #2
 8000828:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800082e:	2303      	movs	r3, #3
 8000830:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8000832:	2305      	movs	r3, #5
 8000834:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000836:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083a:	4619      	mov	r1, r3
 800083c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000840:	f000 fc82 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000844:	2301      	movs	r3, #1
 8000846:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000848:	2302      	movs	r3, #2
 800084a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800084c:	2300      	movs	r3, #0
 800084e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000850:	2300      	movs	r3, #0
 8000852:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000854:	2302      	movs	r3, #2
 8000856:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000858:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800085c:	4619      	mov	r1, r3
 800085e:	4849      	ldr	r0, [pc, #292]	@ (8000984 <MX_GPIO_Init+0x2f0>)
 8000860:	f000 fc72 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8000864:	2302      	movs	r3, #2
 8000866:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8000868:	230b      	movs	r3, #11
 800086a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800086c:	2300      	movs	r3, #0
 800086e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000870:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000874:	4619      	mov	r1, r3
 8000876:	4843      	ldr	r0, [pc, #268]	@ (8000984 <MX_GPIO_Init+0x2f0>)
 8000878:	f000 fc66 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800087c:	2344      	movs	r3, #68	@ 0x44
 800087e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000880:	2303      	movs	r3, #3
 8000882:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800088c:	4619      	mov	r1, r3
 800088e:	483d      	ldr	r0, [pc, #244]	@ (8000984 <MX_GPIO_Init+0x2f0>)
 8000890:	f000 fc5a 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8000894:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8000898:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80008a6:	2301      	movs	r3, #1
 80008a8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ae:	4619      	mov	r1, r3
 80008b0:	4831      	ldr	r0, [pc, #196]	@ (8000978 <MX_GPIO_Init+0x2e4>)
 80008b2:	f000 fc49 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80008b6:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80008ba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008bc:	2302      	movs	r3, #2
 80008be:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c4:	2300      	movs	r3, #0
 80008c6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80008c8:	2303      	movs	r3, #3
 80008ca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80008cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008d0:	4619      	mov	r1, r3
 80008d2:	4829      	ldr	r0, [pc, #164]	@ (8000978 <MX_GPIO_Init+0x2e4>)
 80008d4:	f000 fc38 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80008d8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80008dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008de:	2302      	movs	r3, #2
 80008e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e2:	2300      	movs	r3, #0
 80008e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008e6:	2300      	movs	r3, #0
 80008e8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80008ea:	2301      	movs	r3, #1
 80008ec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008ee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f2:	4619      	mov	r1, r3
 80008f4:	4823      	ldr	r0, [pc, #140]	@ (8000984 <MX_GPIO_Init+0x2f0>)
 80008f6:	f000 fc27 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80008fa:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80008fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000900:	2302      	movs	r3, #2
 8000902:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000904:	2300      	movs	r3, #0
 8000906:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000908:	2300      	movs	r3, #0
 800090a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 800090c:	230d      	movs	r3, #13
 800090e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000910:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000914:	4619      	mov	r1, r3
 8000916:	481b      	ldr	r0, [pc, #108]	@ (8000984 <MX_GPIO_Init+0x2f0>)
 8000918:	f000 fc16 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 800091c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8000920:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000922:	2302      	movs	r3, #2
 8000924:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000926:	2300      	movs	r3, #0
 8000928:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800092a:	2300      	movs	r3, #0
 800092c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800092e:	230e      	movs	r3, #14
 8000930:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000932:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000936:	4619      	mov	r1, r3
 8000938:	4812      	ldr	r0, [pc, #72]	@ (8000984 <MX_GPIO_Init+0x2f0>)
 800093a:	f000 fc05 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800093e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000942:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000944:	2302      	movs	r3, #2
 8000946:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000948:	2300      	movs	r3, #0
 800094a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800094c:	2303      	movs	r3, #3
 800094e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000950:	2307      	movs	r3, #7
 8000952:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000954:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	480b      	ldr	r0, [pc, #44]	@ (8000988 <MX_GPIO_Init+0x2f4>)
 800095c:	f000 fbf4 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8000960:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	e00c      	b.n	800098c <MX_GPIO_Init+0x2f8>
 8000972:	bf00      	nop
 8000974:	40021000 	.word	0x40021000
 8000978:	48001000 	.word	0x48001000
 800097c:	48001400 	.word	0x48001400
 8000980:	48000800 	.word	0x48000800
 8000984:	48000400 	.word	0x48000400
 8000988:	48000c00 	.word	0x48000c00
 800098c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800098e:	2302      	movs	r3, #2
 8000990:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000992:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000996:	4619      	mov	r1, r3
 8000998:	485c      	ldr	r0, [pc, #368]	@ (8000b0c <MX_GPIO_Init+0x478>)
 800099a:	f000 fbd5 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800099e:	2340      	movs	r3, #64	@ 0x40
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009aa:	2300      	movs	r3, #0
 80009ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80009ae:	230d      	movs	r3, #13
 80009b0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	4855      	ldr	r0, [pc, #340]	@ (8000b10 <MX_GPIO_Init+0x47c>)
 80009ba:	f000 fbc5 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80009be:	2380      	movs	r3, #128	@ 0x80
 80009c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009c2:	2302      	movs	r3, #2
 80009c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c6:	2300      	movs	r3, #0
 80009c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ca:	2300      	movs	r3, #0
 80009cc:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80009ce:	2302      	movs	r3, #2
 80009d0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d6:	4619      	mov	r1, r3
 80009d8:	484d      	ldr	r0, [pc, #308]	@ (8000b10 <MX_GPIO_Init+0x47c>)
 80009da:	f000 fbb5 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80009de:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80009e2:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009e4:	2302      	movs	r3, #2
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009ec:	2303      	movs	r3, #3
 80009ee:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80009f0:	230c      	movs	r3, #12
 80009f2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009f4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f8:	4619      	mov	r1, r3
 80009fa:	4845      	ldr	r0, [pc, #276]	@ (8000b10 <MX_GPIO_Init+0x47c>)
 80009fc:	f000 fba4 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 8000a00:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 8000a04:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a06:	2302      	movs	r3, #2
 8000a08:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a0e:	2303      	movs	r3, #3
 8000a10:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a12:	230a      	movs	r3, #10
 8000a14:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a16:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a1a:	4619      	mov	r1, r3
 8000a1c:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a20:	f000 fb92 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000a24:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a28:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a32:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a36:	4619      	mov	r1, r3
 8000a38:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000a3c:	f000 fb84 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000a40:	2301      	movs	r3, #1
 8000a42:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a44:	2302      	movs	r3, #2
 8000a46:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a4c:	2303      	movs	r3, #3
 8000a4e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a50:	2309      	movs	r3, #9
 8000a52:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a54:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a58:	4619      	mov	r1, r3
 8000a5a:	482c      	ldr	r0, [pc, #176]	@ (8000b0c <MX_GPIO_Init+0x478>)
 8000a5c:	f000 fb74 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000a60:	2304      	movs	r3, #4
 8000a62:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a64:	2302      	movs	r3, #2
 8000a66:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a6c:	2303      	movs	r3, #3
 8000a6e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 8000a70:	230c      	movs	r3, #12
 8000a72:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a74:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a78:	4619      	mov	r1, r3
 8000a7a:	4824      	ldr	r0, [pc, #144]	@ (8000b0c <MX_GPIO_Init+0x478>)
 8000a7c:	f000 fb64 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8000a80:	2378      	movs	r3, #120	@ 0x78
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a90:	2307      	movs	r3, #7
 8000a92:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	481c      	ldr	r0, [pc, #112]	@ (8000b0c <MX_GPIO_Init+0x478>)
 8000a9c:	f000 fb54 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000aa0:	2338      	movs	r3, #56	@ 0x38
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000aac:	2303      	movs	r3, #3
 8000aae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8000ab0:	2306      	movs	r3, #6
 8000ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4816      	ldr	r0, [pc, #88]	@ (8000b14 <MX_GPIO_Init+0x480>)
 8000abc:	f000 fb44 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000ac0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000ac6:	2312      	movs	r3, #18
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ace:	2303      	movs	r3, #3
 8000ad0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000ad2:	2304      	movs	r3, #4
 8000ad4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ada:	4619      	mov	r1, r3
 8000adc:	480d      	ldr	r0, [pc, #52]	@ (8000b14 <MX_GPIO_Init+0x480>)
 8000ade:	f000 fb33 	bl	8001148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000ae2:	2301      	movs	r3, #1
 8000ae4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ae6:	2302      	movs	r3, #2
 8000ae8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aea:	2300      	movs	r3, #0
 8000aec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aee:	2300      	movs	r3, #0
 8000af0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000af2:	2302      	movs	r3, #2
 8000af4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000af6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000afa:	4619      	mov	r1, r3
 8000afc:	4806      	ldr	r0, [pc, #24]	@ (8000b18 <MX_GPIO_Init+0x484>)
 8000afe:	f000 fb23 	bl	8001148 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b02:	bf00      	nop
 8000b04:	3738      	adds	r7, #56	@ 0x38
 8000b06:	46bd      	mov	sp, r7
 8000b08:	bd80      	pop	{r7, pc}
 8000b0a:	bf00      	nop
 8000b0c:	48000c00 	.word	0x48000c00
 8000b10:	48000800 	.word	0x48000800
 8000b14:	48000400 	.word	0x48000400
 8000b18:	48001000 	.word	0x48001000

08000b1c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b1c:	b480      	push	{r7}
 8000b1e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b20:	b672      	cpsid	i
}
 8000b22:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b24:	bf00      	nop
 8000b26:	e7fd      	b.n	8000b24 <Error_Handler+0x8>

08000b28 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b2e:	4b0f      	ldr	r3, [pc, #60]	@ (8000b6c <HAL_MspInit+0x44>)
 8000b30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b32:	4a0e      	ldr	r2, [pc, #56]	@ (8000b6c <HAL_MspInit+0x44>)
 8000b34:	f043 0301 	orr.w	r3, r3, #1
 8000b38:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b3a:	4b0c      	ldr	r3, [pc, #48]	@ (8000b6c <HAL_MspInit+0x44>)
 8000b3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b3e:	f003 0301 	and.w	r3, r3, #1
 8000b42:	607b      	str	r3, [r7, #4]
 8000b44:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b46:	4b09      	ldr	r3, [pc, #36]	@ (8000b6c <HAL_MspInit+0x44>)
 8000b48:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b4a:	4a08      	ldr	r2, [pc, #32]	@ (8000b6c <HAL_MspInit+0x44>)
 8000b4c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b50:	6593      	str	r3, [r2, #88]	@ 0x58
 8000b52:	4b06      	ldr	r3, [pc, #24]	@ (8000b6c <HAL_MspInit+0x44>)
 8000b54:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b5a:	603b      	str	r3, [r7, #0]
 8000b5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000b5e:	bf00      	nop
 8000b60:	370c      	adds	r7, #12
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr
 8000b6a:	bf00      	nop
 8000b6c:	40021000 	.word	0x40021000

08000b70 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000b70:	b580      	push	{r7, lr}
 8000b72:	b0ae      	sub	sp, #184	@ 0xb8
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b78:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	601a      	str	r2, [r3, #0]
 8000b80:	605a      	str	r2, [r3, #4]
 8000b82:	609a      	str	r2, [r3, #8]
 8000b84:	60da      	str	r2, [r3, #12]
 8000b86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b88:	f107 0310 	add.w	r3, r7, #16
 8000b8c:	2294      	movs	r2, #148	@ 0x94
 8000b8e:	2100      	movs	r1, #0
 8000b90:	4618      	mov	r0, r3
 8000b92:	f003 f94b 	bl	8003e2c <memset>
  if(huart->Instance==LPUART1)
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	681b      	ldr	r3, [r3, #0]
 8000b9a:	4a22      	ldr	r2, [pc, #136]	@ (8000c24 <HAL_UART_MspInit+0xb4>)
 8000b9c:	4293      	cmp	r3, r2
 8000b9e:	d13d      	bne.n	8000c1c <HAL_UART_MspInit+0xac>

    /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8000ba0:	2320      	movs	r3, #32
 8000ba2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8000ba4:	2300      	movs	r3, #0
 8000ba6:	663b      	str	r3, [r7, #96]	@ 0x60
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ba8:	f107 0310 	add.w	r3, r7, #16
 8000bac:	4618      	mov	r0, r3
 8000bae:	f001 fc09 	bl	80023c4 <HAL_RCCEx_PeriphCLKConfig>
 8000bb2:	4603      	mov	r3, r0
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d001      	beq.n	8000bbc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000bb8:	f7ff ffb0 	bl	8000b1c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000bbc:	4b1a      	ldr	r3, [pc, #104]	@ (8000c28 <HAL_UART_MspInit+0xb8>)
 8000bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bc0:	4a19      	ldr	r2, [pc, #100]	@ (8000c28 <HAL_UART_MspInit+0xb8>)
 8000bc2:	f043 0301 	orr.w	r3, r3, #1
 8000bc6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8000bc8:	4b17      	ldr	r3, [pc, #92]	@ (8000c28 <HAL_UART_MspInit+0xb8>)
 8000bca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000bcc:	f003 0301 	and.w	r3, r3, #1
 8000bd0:	60fb      	str	r3, [r7, #12]
 8000bd2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000bd4:	4b14      	ldr	r3, [pc, #80]	@ (8000c28 <HAL_UART_MspInit+0xb8>)
 8000bd6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000bd8:	4a13      	ldr	r2, [pc, #76]	@ (8000c28 <HAL_UART_MspInit+0xb8>)
 8000bda:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000bde:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000be0:	4b11      	ldr	r3, [pc, #68]	@ (8000c28 <HAL_UART_MspInit+0xb8>)
 8000be2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000be8:	60bb      	str	r3, [r7, #8]
 8000bea:	68bb      	ldr	r3, [r7, #8]
    HAL_PWREx_EnableVddIO2();
 8000bec:	f000 fd02 	bl	80015f4 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8000bf0:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8000bf4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf8:	2302      	movs	r3, #2
 8000bfa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c04:	2303      	movs	r3, #3
 8000c06:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000c0a:	2308      	movs	r3, #8
 8000c0c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c10:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000c14:	4619      	mov	r1, r3
 8000c16:	4805      	ldr	r0, [pc, #20]	@ (8000c2c <HAL_UART_MspInit+0xbc>)
 8000c18:	f000 fa96 	bl	8001148 <HAL_GPIO_Init>

    /* USER CODE END LPUART1_MspInit 1 */

  }

}
 8000c1c:	bf00      	nop
 8000c1e:	37b8      	adds	r7, #184	@ 0xb8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	40008000 	.word	0x40008000
 8000c28:	40021000 	.word	0x40021000
 8000c2c:	48001800 	.word	0x48001800

08000c30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c30:	b480      	push	{r7}
 8000c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000c34:	bf00      	nop
 8000c36:	e7fd      	b.n	8000c34 <NMI_Handler+0x4>

08000c38 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c3c:	bf00      	nop
 8000c3e:	e7fd      	b.n	8000c3c <HardFault_Handler+0x4>

08000c40 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c44:	bf00      	nop
 8000c46:	e7fd      	b.n	8000c44 <MemManage_Handler+0x4>

08000c48 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c48:	b480      	push	{r7}
 8000c4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c4c:	bf00      	nop
 8000c4e:	e7fd      	b.n	8000c4c <BusFault_Handler+0x4>

08000c50 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c54:	bf00      	nop
 8000c56:	e7fd      	b.n	8000c54 <UsageFault_Handler+0x4>

08000c58 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr

08000c66 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c66:	b480      	push	{r7}
 8000c68:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c6a:	bf00      	nop
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c72:	4770      	bx	lr

08000c74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c78:	bf00      	nop
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c80:	4770      	bx	lr

08000c82 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c82:	b580      	push	{r7, lr}
 8000c84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c86:	f000 f935 	bl	8000ef4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b086      	sub	sp, #24
 8000c92:	af00      	add	r7, sp, #0
 8000c94:	60f8      	str	r0, [r7, #12]
 8000c96:	60b9      	str	r1, [r7, #8]
 8000c98:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	617b      	str	r3, [r7, #20]
 8000c9e:	e00a      	b.n	8000cb6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ca0:	f3af 8000 	nop.w
 8000ca4:	4601      	mov	r1, r0
 8000ca6:	68bb      	ldr	r3, [r7, #8]
 8000ca8:	1c5a      	adds	r2, r3, #1
 8000caa:	60ba      	str	r2, [r7, #8]
 8000cac:	b2ca      	uxtb	r2, r1
 8000cae:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb0:	697b      	ldr	r3, [r7, #20]
 8000cb2:	3301      	adds	r3, #1
 8000cb4:	617b      	str	r3, [r7, #20]
 8000cb6:	697a      	ldr	r2, [r7, #20]
 8000cb8:	687b      	ldr	r3, [r7, #4]
 8000cba:	429a      	cmp	r2, r3
 8000cbc:	dbf0      	blt.n	8000ca0 <_read+0x12>
  }

  return len;
 8000cbe:	687b      	ldr	r3, [r7, #4]
}
 8000cc0:	4618      	mov	r0, r3
 8000cc2:	3718      	adds	r7, #24
 8000cc4:	46bd      	mov	sp, r7
 8000cc6:	bd80      	pop	{r7, pc}

08000cc8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	b086      	sub	sp, #24
 8000ccc:	af00      	add	r7, sp, #0
 8000cce:	60f8      	str	r0, [r7, #12]
 8000cd0:	60b9      	str	r1, [r7, #8]
 8000cd2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cd4:	2300      	movs	r3, #0
 8000cd6:	617b      	str	r3, [r7, #20]
 8000cd8:	e009      	b.n	8000cee <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000cda:	68bb      	ldr	r3, [r7, #8]
 8000cdc:	1c5a      	adds	r2, r3, #1
 8000cde:	60ba      	str	r2, [r7, #8]
 8000ce0:	781b      	ldrb	r3, [r3, #0]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f7ff fc20 	bl	8000528 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	3301      	adds	r3, #1
 8000cec:	617b      	str	r3, [r7, #20]
 8000cee:	697a      	ldr	r2, [r7, #20]
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	429a      	cmp	r2, r3
 8000cf4:	dbf1      	blt.n	8000cda <_write+0x12>
  }
  return len;
 8000cf6:	687b      	ldr	r3, [r7, #4]
}
 8000cf8:	4618      	mov	r0, r3
 8000cfa:	3718      	adds	r7, #24
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	bd80      	pop	{r7, pc}

08000d00 <_close>:

int _close(int file)
{
 8000d00:	b480      	push	{r7}
 8000d02:	b083      	sub	sp, #12
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000d0c:	4618      	mov	r0, r3
 8000d0e:	370c      	adds	r7, #12
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	6078      	str	r0, [r7, #4]
 8000d20:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d22:	683b      	ldr	r3, [r7, #0]
 8000d24:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d28:	605a      	str	r2, [r3, #4]
  return 0;
 8000d2a:	2300      	movs	r3, #0
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	370c      	adds	r7, #12
 8000d30:	46bd      	mov	sp, r7
 8000d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d36:	4770      	bx	lr

08000d38 <_isatty>:

int _isatty(int file)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d40:	2301      	movs	r3, #1
}
 8000d42:	4618      	mov	r0, r3
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr

08000d4e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d4e:	b480      	push	{r7}
 8000d50:	b085      	sub	sp, #20
 8000d52:	af00      	add	r7, sp, #0
 8000d54:	60f8      	str	r0, [r7, #12]
 8000d56:	60b9      	str	r1, [r7, #8]
 8000d58:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d5a:	2300      	movs	r3, #0
}
 8000d5c:	4618      	mov	r0, r3
 8000d5e:	3714      	adds	r7, #20
 8000d60:	46bd      	mov	sp, r7
 8000d62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d66:	4770      	bx	lr

08000d68 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d70:	4a14      	ldr	r2, [pc, #80]	@ (8000dc4 <_sbrk+0x5c>)
 8000d72:	4b15      	ldr	r3, [pc, #84]	@ (8000dc8 <_sbrk+0x60>)
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d78:	697b      	ldr	r3, [r7, #20]
 8000d7a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d7c:	4b13      	ldr	r3, [pc, #76]	@ (8000dcc <_sbrk+0x64>)
 8000d7e:	681b      	ldr	r3, [r3, #0]
 8000d80:	2b00      	cmp	r3, #0
 8000d82:	d102      	bne.n	8000d8a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d84:	4b11      	ldr	r3, [pc, #68]	@ (8000dcc <_sbrk+0x64>)
 8000d86:	4a12      	ldr	r2, [pc, #72]	@ (8000dd0 <_sbrk+0x68>)
 8000d88:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d8a:	4b10      	ldr	r3, [pc, #64]	@ (8000dcc <_sbrk+0x64>)
 8000d8c:	681a      	ldr	r2, [r3, #0]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	4413      	add	r3, r2
 8000d92:	693a      	ldr	r2, [r7, #16]
 8000d94:	429a      	cmp	r2, r3
 8000d96:	d207      	bcs.n	8000da8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d98:	f003 f850 	bl	8003e3c <__errno>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	220c      	movs	r2, #12
 8000da0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000da2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000da6:	e009      	b.n	8000dbc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da8:	4b08      	ldr	r3, [pc, #32]	@ (8000dcc <_sbrk+0x64>)
 8000daa:	681b      	ldr	r3, [r3, #0]
 8000dac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000dae:	4b07      	ldr	r3, [pc, #28]	@ (8000dcc <_sbrk+0x64>)
 8000db0:	681a      	ldr	r2, [r3, #0]
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4413      	add	r3, r2
 8000db6:	4a05      	ldr	r2, [pc, #20]	@ (8000dcc <_sbrk+0x64>)
 8000db8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dba:	68fb      	ldr	r3, [r7, #12]
}
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	3718      	adds	r7, #24
 8000dc0:	46bd      	mov	sp, r7
 8000dc2:	bd80      	pop	{r7, pc}
 8000dc4:	200a0000 	.word	0x200a0000
 8000dc8:	00000400 	.word	0x00000400
 8000dcc:	20040118 	.word	0x20040118
 8000dd0:	20040270 	.word	0x20040270

08000dd4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dd8:	4b06      	ldr	r3, [pc, #24]	@ (8000df4 <SystemInit+0x20>)
 8000dda:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000dde:	4a05      	ldr	r2, [pc, #20]	@ (8000df4 <SystemInit+0x20>)
 8000de0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000de4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000de8:	bf00      	nop
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	e000ed00 	.word	0xe000ed00

08000df8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000df8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e30 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dfc:	f7ff ffea 	bl	8000dd4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e00:	480c      	ldr	r0, [pc, #48]	@ (8000e34 <LoopForever+0x6>)
  ldr r1, =_edata
 8000e02:	490d      	ldr	r1, [pc, #52]	@ (8000e38 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000e04:	4a0d      	ldr	r2, [pc, #52]	@ (8000e3c <LoopForever+0xe>)
  movs r3, #0
 8000e06:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e08:	e002      	b.n	8000e10 <LoopCopyDataInit>

08000e0a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e0a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e0c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e0e:	3304      	adds	r3, #4

08000e10 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e10:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e12:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e14:	d3f9      	bcc.n	8000e0a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e16:	4a0a      	ldr	r2, [pc, #40]	@ (8000e40 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000e18:	4c0a      	ldr	r4, [pc, #40]	@ (8000e44 <LoopForever+0x16>)
  movs r3, #0
 8000e1a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e1c:	e001      	b.n	8000e22 <LoopFillZerobss>

08000e1e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e1e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e20:	3204      	adds	r2, #4

08000e22 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e22:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e24:	d3fb      	bcc.n	8000e1e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e26:	f003 f80f 	bl	8003e48 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000e2a:	f7ff fb91 	bl	8000550 <main>

08000e2e <LoopForever>:

LoopForever:
    b LoopForever
 8000e2e:	e7fe      	b.n	8000e2e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000e30:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 8000e34:	20040000 	.word	0x20040000
  ldr r1, =_edata
 8000e38:	20040068 	.word	0x20040068
  ldr r2, =_sidata
 8000e3c:	080045ec 	.word	0x080045ec
  ldr r2, =_sbss
 8000e40:	20040068 	.word	0x20040068
  ldr r4, =_ebss
 8000e44:	2004026c 	.word	0x2004026c

08000e48 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000e48:	e7fe      	b.n	8000e48 <ADC1_IRQHandler>

08000e4a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e4a:	b580      	push	{r7, lr}
 8000e4c:	b082      	sub	sp, #8
 8000e4e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000e50:	2300      	movs	r3, #0
 8000e52:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e54:	2003      	movs	r0, #3
 8000e56:	f000 f943 	bl	80010e0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000e5a:	2000      	movs	r0, #0
 8000e5c:	f000 f80e 	bl	8000e7c <HAL_InitTick>
 8000e60:	4603      	mov	r3, r0
 8000e62:	2b00      	cmp	r3, #0
 8000e64:	d002      	beq.n	8000e6c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000e66:	2301      	movs	r3, #1
 8000e68:	71fb      	strb	r3, [r7, #7]
 8000e6a:	e001      	b.n	8000e70 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000e6c:	f7ff fe5c 	bl	8000b28 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000e70:	79fb      	ldrb	r3, [r7, #7]
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000e84:	2300      	movs	r3, #0
 8000e86:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000e88:	4b17      	ldr	r3, [pc, #92]	@ (8000ee8 <HAL_InitTick+0x6c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d023      	beq.n	8000ed8 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000e90:	4b16      	ldr	r3, [pc, #88]	@ (8000eec <HAL_InitTick+0x70>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b14      	ldr	r3, [pc, #80]	@ (8000ee8 <HAL_InitTick+0x6c>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f941 	bl	800112e <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d10f      	bne.n	8000ed2 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	2b0f      	cmp	r3, #15
 8000eb6:	d809      	bhi.n	8000ecc <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000eb8:	2200      	movs	r2, #0
 8000eba:	6879      	ldr	r1, [r7, #4]
 8000ebc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000ec0:	f000 f919 	bl	80010f6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000ec4:	4a0a      	ldr	r2, [pc, #40]	@ (8000ef0 <HAL_InitTick+0x74>)
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	6013      	str	r3, [r2, #0]
 8000eca:	e007      	b.n	8000edc <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	73fb      	strb	r3, [r7, #15]
 8000ed0:	e004      	b.n	8000edc <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
 8000ed4:	73fb      	strb	r3, [r7, #15]
 8000ed6:	e001      	b.n	8000edc <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000ed8:	2301      	movs	r3, #1
 8000eda:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000edc:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3710      	adds	r7, #16
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20040008 	.word	0x20040008
 8000eec:	20040000 	.word	0x20040000
 8000ef0:	20040004 	.word	0x20040004

08000ef4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ef8:	4b06      	ldr	r3, [pc, #24]	@ (8000f14 <HAL_IncTick+0x20>)
 8000efa:	781b      	ldrb	r3, [r3, #0]
 8000efc:	461a      	mov	r2, r3
 8000efe:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_IncTick+0x24>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4413      	add	r3, r2
 8000f04:	4a04      	ldr	r2, [pc, #16]	@ (8000f18 <HAL_IncTick+0x24>)
 8000f06:	6013      	str	r3, [r2, #0]
}
 8000f08:	bf00      	nop
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop
 8000f14:	20040008 	.word	0x20040008
 8000f18:	2004011c 	.word	0x2004011c

08000f1c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	af00      	add	r7, sp, #0
  return uwTick;
 8000f20:	4b03      	ldr	r3, [pc, #12]	@ (8000f30 <HAL_GetTick+0x14>)
 8000f22:	681b      	ldr	r3, [r3, #0]
}
 8000f24:	4618      	mov	r0, r3
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
 8000f2e:	bf00      	nop
 8000f30:	2004011c 	.word	0x2004011c

08000f34 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f3c:	f7ff ffee 	bl	8000f1c <HAL_GetTick>
 8000f40:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8000f4c:	d005      	beq.n	8000f5a <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 8000f4e:	4b0a      	ldr	r3, [pc, #40]	@ (8000f78 <HAL_Delay+0x44>)
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	461a      	mov	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	4413      	add	r3, r2
 8000f58:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000f5a:	bf00      	nop
 8000f5c:	f7ff ffde 	bl	8000f1c <HAL_GetTick>
 8000f60:	4602      	mov	r2, r0
 8000f62:	68bb      	ldr	r3, [r7, #8]
 8000f64:	1ad3      	subs	r3, r2, r3
 8000f66:	68fa      	ldr	r2, [r7, #12]
 8000f68:	429a      	cmp	r2, r3
 8000f6a:	d8f7      	bhi.n	8000f5c <HAL_Delay+0x28>
  {
  }
}
 8000f6c:	bf00      	nop
 8000f6e:	bf00      	nop
 8000f70:	3710      	adds	r7, #16
 8000f72:	46bd      	mov	sp, r7
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	20040008 	.word	0x20040008

08000f7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	b085      	sub	sp, #20
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	f003 0307 	and.w	r3, r3, #7
 8000f8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f8c:	4b0c      	ldr	r3, [pc, #48]	@ (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000f8e:	68db      	ldr	r3, [r3, #12]
 8000f90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f92:	68ba      	ldr	r2, [r7, #8]
 8000f94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f98:	4013      	ands	r3, r2
 8000f9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000fa0:	68bb      	ldr	r3, [r7, #8]
 8000fa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000fa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000fa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000fac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fae:	4a04      	ldr	r2, [pc, #16]	@ (8000fc0 <__NVIC_SetPriorityGrouping+0x44>)
 8000fb0:	68bb      	ldr	r3, [r7, #8]
 8000fb2:	60d3      	str	r3, [r2, #12]
}
 8000fb4:	bf00      	nop
 8000fb6:	3714      	adds	r7, #20
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbe:	4770      	bx	lr
 8000fc0:	e000ed00 	.word	0xe000ed00

08000fc4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fc8:	4b04      	ldr	r3, [pc, #16]	@ (8000fdc <__NVIC_GetPriorityGrouping+0x18>)
 8000fca:	68db      	ldr	r3, [r3, #12]
 8000fcc:	0a1b      	lsrs	r3, r3, #8
 8000fce:	f003 0307 	and.w	r3, r3, #7
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	46bd      	mov	sp, r7
 8000fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fda:	4770      	bx	lr
 8000fdc:	e000ed00 	.word	0xe000ed00

08000fe0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fe0:	b480      	push	{r7}
 8000fe2:	b083      	sub	sp, #12
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	6039      	str	r1, [r7, #0]
 8000fea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	db0a      	blt.n	800100a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ff4:	683b      	ldr	r3, [r7, #0]
 8000ff6:	b2da      	uxtb	r2, r3
 8000ff8:	490c      	ldr	r1, [pc, #48]	@ (800102c <__NVIC_SetPriority+0x4c>)
 8000ffa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ffe:	0112      	lsls	r2, r2, #4
 8001000:	b2d2      	uxtb	r2, r2
 8001002:	440b      	add	r3, r1
 8001004:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001008:	e00a      	b.n	8001020 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800100a:	683b      	ldr	r3, [r7, #0]
 800100c:	b2da      	uxtb	r2, r3
 800100e:	4908      	ldr	r1, [pc, #32]	@ (8001030 <__NVIC_SetPriority+0x50>)
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	f003 030f 	and.w	r3, r3, #15
 8001016:	3b04      	subs	r3, #4
 8001018:	0112      	lsls	r2, r2, #4
 800101a:	b2d2      	uxtb	r2, r2
 800101c:	440b      	add	r3, r1
 800101e:	761a      	strb	r2, [r3, #24]
}
 8001020:	bf00      	nop
 8001022:	370c      	adds	r7, #12
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000e100 	.word	0xe000e100
 8001030:	e000ed00 	.word	0xe000ed00

08001034 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	@ 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001048:	69fb      	ldr	r3, [r7, #28]
 800104a:	f1c3 0307 	rsb	r3, r3, #7
 800104e:	2b04      	cmp	r3, #4
 8001050:	bf28      	it	cs
 8001052:	2304      	movcs	r3, #4
 8001054:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3304      	adds	r3, #4
 800105a:	2b06      	cmp	r3, #6
 800105c:	d902      	bls.n	8001064 <NVIC_EncodePriority+0x30>
 800105e:	69fb      	ldr	r3, [r7, #28]
 8001060:	3b03      	subs	r3, #3
 8001062:	e000      	b.n	8001066 <NVIC_EncodePriority+0x32>
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001068:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800106c:	69bb      	ldr	r3, [r7, #24]
 800106e:	fa02 f303 	lsl.w	r3, r2, r3
 8001072:	43da      	mvns	r2, r3
 8001074:	68bb      	ldr	r3, [r7, #8]
 8001076:	401a      	ands	r2, r3
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800107c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001080:	697b      	ldr	r3, [r7, #20]
 8001082:	fa01 f303 	lsl.w	r3, r1, r3
 8001086:	43d9      	mvns	r1, r3
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800108c:	4313      	orrs	r3, r2
         );
}
 800108e:	4618      	mov	r0, r3
 8001090:	3724      	adds	r7, #36	@ 0x24
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
	...

0800109c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	3b01      	subs	r3, #1
 80010a8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010ac:	d301      	bcc.n	80010b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00f      	b.n	80010d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010b2:	4a0a      	ldr	r2, [pc, #40]	@ (80010dc <SysTick_Config+0x40>)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	3b01      	subs	r3, #1
 80010b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ba:	210f      	movs	r1, #15
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80010c0:	f7ff ff8e 	bl	8000fe0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010c4:	4b05      	ldr	r3, [pc, #20]	@ (80010dc <SysTick_Config+0x40>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010ca:	4b04      	ldr	r3, [pc, #16]	@ (80010dc <SysTick_Config+0x40>)
 80010cc:	2207      	movs	r2, #7
 80010ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010d0:	2300      	movs	r3, #0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	e000e010 	.word	0xe000e010

080010e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e8:	6878      	ldr	r0, [r7, #4]
 80010ea:	f7ff ff47 	bl	8000f7c <__NVIC_SetPriorityGrouping>
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}

080010f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010f6:	b580      	push	{r7, lr}
 80010f8:	b086      	sub	sp, #24
 80010fa:	af00      	add	r7, sp, #0
 80010fc:	4603      	mov	r3, r0
 80010fe:	60b9      	str	r1, [r7, #8]
 8001100:	607a      	str	r2, [r7, #4]
 8001102:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001108:	f7ff ff5c 	bl	8000fc4 <__NVIC_GetPriorityGrouping>
 800110c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800110e:	687a      	ldr	r2, [r7, #4]
 8001110:	68b9      	ldr	r1, [r7, #8]
 8001112:	6978      	ldr	r0, [r7, #20]
 8001114:	f7ff ff8e 	bl	8001034 <NVIC_EncodePriority>
 8001118:	4602      	mov	r2, r0
 800111a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800111e:	4611      	mov	r1, r2
 8001120:	4618      	mov	r0, r3
 8001122:	f7ff ff5d 	bl	8000fe0 <__NVIC_SetPriority>
}
 8001126:	bf00      	nop
 8001128:	3718      	adds	r7, #24
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800112e:	b580      	push	{r7, lr}
 8001130:	b082      	sub	sp, #8
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001136:	6878      	ldr	r0, [r7, #4]
 8001138:	f7ff ffb0 	bl	800109c <SysTick_Config>
 800113c:	4603      	mov	r3, r0
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001148:	b480      	push	{r7}
 800114a:	b087      	sub	sp, #28
 800114c:	af00      	add	r7, sp, #0
 800114e:	6078      	str	r0, [r7, #4]
 8001150:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001152:	2300      	movs	r3, #0
 8001154:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001156:	e166      	b.n	8001426 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001158:	683b      	ldr	r3, [r7, #0]
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	2101      	movs	r1, #1
 800115e:	697b      	ldr	r3, [r7, #20]
 8001160:	fa01 f303 	lsl.w	r3, r1, r3
 8001164:	4013      	ands	r3, r2
 8001166:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	2b00      	cmp	r3, #0
 800116c:	f000 8158 	beq.w	8001420 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001170:	683b      	ldr	r3, [r7, #0]
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	f003 0303 	and.w	r3, r3, #3
 8001178:	2b01      	cmp	r3, #1
 800117a:	d005      	beq.n	8001188 <HAL_GPIO_Init+0x40>
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	685b      	ldr	r3, [r3, #4]
 8001180:	f003 0303 	and.w	r3, r3, #3
 8001184:	2b02      	cmp	r3, #2
 8001186:	d130      	bne.n	80011ea <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	005b      	lsls	r3, r3, #1
 8001192:	2203      	movs	r2, #3
 8001194:	fa02 f303 	lsl.w	r3, r2, r3
 8001198:	43db      	mvns	r3, r3
 800119a:	693a      	ldr	r2, [r7, #16]
 800119c:	4013      	ands	r3, r2
 800119e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80011a0:	683b      	ldr	r3, [r7, #0]
 80011a2:	68da      	ldr	r2, [r3, #12]
 80011a4:	697b      	ldr	r3, [r7, #20]
 80011a6:	005b      	lsls	r3, r3, #1
 80011a8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ac:	693a      	ldr	r2, [r7, #16]
 80011ae:	4313      	orrs	r3, r2
 80011b0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	693a      	ldr	r2, [r7, #16]
 80011b6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	685b      	ldr	r3, [r3, #4]
 80011bc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80011be:	2201      	movs	r2, #1
 80011c0:	697b      	ldr	r3, [r7, #20]
 80011c2:	fa02 f303 	lsl.w	r3, r2, r3
 80011c6:	43db      	mvns	r3, r3
 80011c8:	693a      	ldr	r2, [r7, #16]
 80011ca:	4013      	ands	r3, r2
 80011cc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011ce:	683b      	ldr	r3, [r7, #0]
 80011d0:	685b      	ldr	r3, [r3, #4]
 80011d2:	091b      	lsrs	r3, r3, #4
 80011d4:	f003 0201 	and.w	r2, r3, #1
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	fa02 f303 	lsl.w	r3, r2, r3
 80011de:	693a      	ldr	r2, [r7, #16]
 80011e0:	4313      	orrs	r3, r2
 80011e2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	693a      	ldr	r2, [r7, #16]
 80011e8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011ea:	683b      	ldr	r3, [r7, #0]
 80011ec:	685b      	ldr	r3, [r3, #4]
 80011ee:	f003 0303 	and.w	r3, r3, #3
 80011f2:	2b03      	cmp	r3, #3
 80011f4:	d017      	beq.n	8001226 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68db      	ldr	r3, [r3, #12]
 80011fa:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80011fc:	697b      	ldr	r3, [r7, #20]
 80011fe:	005b      	lsls	r3, r3, #1
 8001200:	2203      	movs	r2, #3
 8001202:	fa02 f303 	lsl.w	r3, r2, r3
 8001206:	43db      	mvns	r3, r3
 8001208:	693a      	ldr	r2, [r7, #16]
 800120a:	4013      	ands	r3, r2
 800120c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	689a      	ldr	r2, [r3, #8]
 8001212:	697b      	ldr	r3, [r7, #20]
 8001214:	005b      	lsls	r3, r3, #1
 8001216:	fa02 f303 	lsl.w	r3, r2, r3
 800121a:	693a      	ldr	r2, [r7, #16]
 800121c:	4313      	orrs	r3, r2
 800121e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	693a      	ldr	r2, [r7, #16]
 8001224:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	f003 0303 	and.w	r3, r3, #3
 800122e:	2b02      	cmp	r3, #2
 8001230:	d123      	bne.n	800127a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001232:	697b      	ldr	r3, [r7, #20]
 8001234:	08da      	lsrs	r2, r3, #3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3208      	adds	r2, #8
 800123a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800123e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001240:	697b      	ldr	r3, [r7, #20]
 8001242:	f003 0307 	and.w	r3, r3, #7
 8001246:	009b      	lsls	r3, r3, #2
 8001248:	220f      	movs	r2, #15
 800124a:	fa02 f303 	lsl.w	r3, r2, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	693a      	ldr	r2, [r7, #16]
 8001252:	4013      	ands	r3, r2
 8001254:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	691a      	ldr	r2, [r3, #16]
 800125a:	697b      	ldr	r3, [r7, #20]
 800125c:	f003 0307 	and.w	r3, r3, #7
 8001260:	009b      	lsls	r3, r3, #2
 8001262:	fa02 f303 	lsl.w	r3, r2, r3
 8001266:	693a      	ldr	r2, [r7, #16]
 8001268:	4313      	orrs	r3, r2
 800126a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	08da      	lsrs	r2, r3, #3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	3208      	adds	r2, #8
 8001274:	6939      	ldr	r1, [r7, #16]
 8001276:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001280:	697b      	ldr	r3, [r7, #20]
 8001282:	005b      	lsls	r3, r3, #1
 8001284:	2203      	movs	r2, #3
 8001286:	fa02 f303 	lsl.w	r3, r2, r3
 800128a:	43db      	mvns	r3, r3
 800128c:	693a      	ldr	r2, [r7, #16]
 800128e:	4013      	ands	r3, r2
 8001290:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001292:	683b      	ldr	r3, [r7, #0]
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	f003 0203 	and.w	r2, r3, #3
 800129a:	697b      	ldr	r3, [r7, #20]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	fa02 f303 	lsl.w	r3, r2, r3
 80012a2:	693a      	ldr	r2, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	693a      	ldr	r2, [r7, #16]
 80012ac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80012ae:	683b      	ldr	r3, [r7, #0]
 80012b0:	685b      	ldr	r3, [r3, #4]
 80012b2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	f000 80b2 	beq.w	8001420 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012bc:	4b61      	ldr	r3, [pc, #388]	@ (8001444 <HAL_GPIO_Init+0x2fc>)
 80012be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012c0:	4a60      	ldr	r2, [pc, #384]	@ (8001444 <HAL_GPIO_Init+0x2fc>)
 80012c2:	f043 0301 	orr.w	r3, r3, #1
 80012c6:	6613      	str	r3, [r2, #96]	@ 0x60
 80012c8:	4b5e      	ldr	r3, [pc, #376]	@ (8001444 <HAL_GPIO_Init+0x2fc>)
 80012ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80012cc:	f003 0301 	and.w	r3, r3, #1
 80012d0:	60bb      	str	r3, [r7, #8]
 80012d2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80012d4:	4a5c      	ldr	r2, [pc, #368]	@ (8001448 <HAL_GPIO_Init+0x300>)
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	089b      	lsrs	r3, r3, #2
 80012da:	3302      	adds	r3, #2
 80012dc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80012e2:	697b      	ldr	r3, [r7, #20]
 80012e4:	f003 0303 	and.w	r3, r3, #3
 80012e8:	009b      	lsls	r3, r3, #2
 80012ea:	220f      	movs	r2, #15
 80012ec:	fa02 f303 	lsl.w	r3, r2, r3
 80012f0:	43db      	mvns	r3, r3
 80012f2:	693a      	ldr	r2, [r7, #16]
 80012f4:	4013      	ands	r3, r2
 80012f6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80012fe:	d02b      	beq.n	8001358 <HAL_GPIO_Init+0x210>
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	4a52      	ldr	r2, [pc, #328]	@ (800144c <HAL_GPIO_Init+0x304>)
 8001304:	4293      	cmp	r3, r2
 8001306:	d025      	beq.n	8001354 <HAL_GPIO_Init+0x20c>
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	4a51      	ldr	r2, [pc, #324]	@ (8001450 <HAL_GPIO_Init+0x308>)
 800130c:	4293      	cmp	r3, r2
 800130e:	d01f      	beq.n	8001350 <HAL_GPIO_Init+0x208>
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	4a50      	ldr	r2, [pc, #320]	@ (8001454 <HAL_GPIO_Init+0x30c>)
 8001314:	4293      	cmp	r3, r2
 8001316:	d019      	beq.n	800134c <HAL_GPIO_Init+0x204>
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	4a4f      	ldr	r2, [pc, #316]	@ (8001458 <HAL_GPIO_Init+0x310>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d013      	beq.n	8001348 <HAL_GPIO_Init+0x200>
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	4a4e      	ldr	r2, [pc, #312]	@ (800145c <HAL_GPIO_Init+0x314>)
 8001324:	4293      	cmp	r3, r2
 8001326:	d00d      	beq.n	8001344 <HAL_GPIO_Init+0x1fc>
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	4a4d      	ldr	r2, [pc, #308]	@ (8001460 <HAL_GPIO_Init+0x318>)
 800132c:	4293      	cmp	r3, r2
 800132e:	d007      	beq.n	8001340 <HAL_GPIO_Init+0x1f8>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	4a4c      	ldr	r2, [pc, #304]	@ (8001464 <HAL_GPIO_Init+0x31c>)
 8001334:	4293      	cmp	r3, r2
 8001336:	d101      	bne.n	800133c <HAL_GPIO_Init+0x1f4>
 8001338:	2307      	movs	r3, #7
 800133a:	e00e      	b.n	800135a <HAL_GPIO_Init+0x212>
 800133c:	2308      	movs	r3, #8
 800133e:	e00c      	b.n	800135a <HAL_GPIO_Init+0x212>
 8001340:	2306      	movs	r3, #6
 8001342:	e00a      	b.n	800135a <HAL_GPIO_Init+0x212>
 8001344:	2305      	movs	r3, #5
 8001346:	e008      	b.n	800135a <HAL_GPIO_Init+0x212>
 8001348:	2304      	movs	r3, #4
 800134a:	e006      	b.n	800135a <HAL_GPIO_Init+0x212>
 800134c:	2303      	movs	r3, #3
 800134e:	e004      	b.n	800135a <HAL_GPIO_Init+0x212>
 8001350:	2302      	movs	r3, #2
 8001352:	e002      	b.n	800135a <HAL_GPIO_Init+0x212>
 8001354:	2301      	movs	r3, #1
 8001356:	e000      	b.n	800135a <HAL_GPIO_Init+0x212>
 8001358:	2300      	movs	r3, #0
 800135a:	697a      	ldr	r2, [r7, #20]
 800135c:	f002 0203 	and.w	r2, r2, #3
 8001360:	0092      	lsls	r2, r2, #2
 8001362:	4093      	lsls	r3, r2
 8001364:	693a      	ldr	r2, [r7, #16]
 8001366:	4313      	orrs	r3, r2
 8001368:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800136a:	4937      	ldr	r1, [pc, #220]	@ (8001448 <HAL_GPIO_Init+0x300>)
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	089b      	lsrs	r3, r3, #2
 8001370:	3302      	adds	r3, #2
 8001372:	693a      	ldr	r2, [r7, #16]
 8001374:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001378:	4b3b      	ldr	r3, [pc, #236]	@ (8001468 <HAL_GPIO_Init+0x320>)
 800137a:	689b      	ldr	r3, [r3, #8]
 800137c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800137e:	68fb      	ldr	r3, [r7, #12]
 8001380:	43db      	mvns	r3, r3
 8001382:	693a      	ldr	r2, [r7, #16]
 8001384:	4013      	ands	r3, r2
 8001386:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001390:	2b00      	cmp	r3, #0
 8001392:	d003      	beq.n	800139c <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001394:	693a      	ldr	r2, [r7, #16]
 8001396:	68fb      	ldr	r3, [r7, #12]
 8001398:	4313      	orrs	r3, r2
 800139a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800139c:	4a32      	ldr	r2, [pc, #200]	@ (8001468 <HAL_GPIO_Init+0x320>)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013a2:	4b31      	ldr	r3, [pc, #196]	@ (8001468 <HAL_GPIO_Init+0x320>)
 80013a4:	68db      	ldr	r3, [r3, #12]
 80013a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a8:	68fb      	ldr	r3, [r7, #12]
 80013aa:	43db      	mvns	r3, r3
 80013ac:	693a      	ldr	r2, [r7, #16]
 80013ae:	4013      	ands	r3, r2
 80013b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d003      	beq.n	80013c6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80013be:	693a      	ldr	r2, [r7, #16]
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	4313      	orrs	r3, r2
 80013c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013c6:	4a28      	ldr	r2, [pc, #160]	@ (8001468 <HAL_GPIO_Init+0x320>)
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013cc:	4b26      	ldr	r3, [pc, #152]	@ (8001468 <HAL_GPIO_Init+0x320>)
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	685b      	ldr	r3, [r3, #4]
 80013e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d003      	beq.n	80013f0 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	68fb      	ldr	r3, [r7, #12]
 80013ec:	4313      	orrs	r3, r2
 80013ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80013f0:	4a1d      	ldr	r2, [pc, #116]	@ (8001468 <HAL_GPIO_Init+0x320>)
 80013f2:	693b      	ldr	r3, [r7, #16]
 80013f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80013f6:	4b1c      	ldr	r3, [pc, #112]	@ (8001468 <HAL_GPIO_Init+0x320>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	43db      	mvns	r3, r3
 8001400:	693a      	ldr	r2, [r7, #16]
 8001402:	4013      	ands	r3, r2
 8001404:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001406:	683b      	ldr	r3, [r7, #0]
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001412:	693a      	ldr	r2, [r7, #16]
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800141a:	4a13      	ldr	r2, [pc, #76]	@ (8001468 <HAL_GPIO_Init+0x320>)
 800141c:	693b      	ldr	r3, [r7, #16]
 800141e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001420:	697b      	ldr	r3, [r7, #20]
 8001422:	3301      	adds	r3, #1
 8001424:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	681a      	ldr	r2, [r3, #0]
 800142a:	697b      	ldr	r3, [r7, #20]
 800142c:	fa22 f303 	lsr.w	r3, r2, r3
 8001430:	2b00      	cmp	r3, #0
 8001432:	f47f ae91 	bne.w	8001158 <HAL_GPIO_Init+0x10>
  }
}
 8001436:	bf00      	nop
 8001438:	bf00      	nop
 800143a:	371c      	adds	r7, #28
 800143c:	46bd      	mov	sp, r7
 800143e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001442:	4770      	bx	lr
 8001444:	40021000 	.word	0x40021000
 8001448:	40010000 	.word	0x40010000
 800144c:	48000400 	.word	0x48000400
 8001450:	48000800 	.word	0x48000800
 8001454:	48000c00 	.word	0x48000c00
 8001458:	48001000 	.word	0x48001000
 800145c:	48001400 	.word	0x48001400
 8001460:	48001800 	.word	0x48001800
 8001464:	48001c00 	.word	0x48001c00
 8001468:	40010400 	.word	0x40010400

0800146c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800146c:	b480      	push	{r7}
 800146e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001470:	4b0d      	ldr	r3, [pc, #52]	@ (80014a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001472:	681b      	ldr	r3, [r3, #0]
 8001474:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800147c:	d102      	bne.n	8001484 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 800147e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001482:	e00b      	b.n	800149c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001484:	4b08      	ldr	r3, [pc, #32]	@ (80014a8 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001486:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800148a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800148e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001492:	d102      	bne.n	800149a <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001494:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001498:	e000      	b.n	800149c <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 800149a:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 800149c:	4618      	mov	r0, r3
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	40007000 	.word	0x40007000

080014ac <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b085      	sub	sp, #20
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d141      	bne.n	800153e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80014ba:	4b4b      	ldr	r3, [pc, #300]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80014c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80014c6:	d131      	bne.n	800152c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80014c8:	4b47      	ldr	r3, [pc, #284]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014ca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80014ce:	4a46      	ldr	r2, [pc, #280]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80014d4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80014d8:	4b43      	ldr	r3, [pc, #268]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80014e0:	4a41      	ldr	r2, [pc, #260]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80014e2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80014e6:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80014e8:	4b40      	ldr	r3, [pc, #256]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	2232      	movs	r2, #50	@ 0x32
 80014ee:	fb02 f303 	mul.w	r3, r2, r3
 80014f2:	4a3f      	ldr	r2, [pc, #252]	@ (80015f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80014f4:	fba2 2303 	umull	r2, r3, r2, r3
 80014f8:	0c9b      	lsrs	r3, r3, #18
 80014fa:	3301      	adds	r3, #1
 80014fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80014fe:	e002      	b.n	8001506 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	3b01      	subs	r3, #1
 8001504:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001506:	4b38      	ldr	r3, [pc, #224]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001508:	695b      	ldr	r3, [r3, #20]
 800150a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800150e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001512:	d102      	bne.n	800151a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001514:	68fb      	ldr	r3, [r7, #12]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d1f2      	bne.n	8001500 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800151a:	4b33      	ldr	r3, [pc, #204]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800151c:	695b      	ldr	r3, [r3, #20]
 800151e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001522:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001526:	d158      	bne.n	80015da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001528:	2303      	movs	r3, #3
 800152a:	e057      	b.n	80015dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800152c:	4b2e      	ldr	r3, [pc, #184]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800152e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001532:	4a2d      	ldr	r2, [pc, #180]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001534:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001538:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 800153c:	e04d      	b.n	80015da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001544:	d141      	bne.n	80015ca <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001546:	4b28      	ldr	r3, [pc, #160]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 800154e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001552:	d131      	bne.n	80015b8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001554:	4b24      	ldr	r3, [pc, #144]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001556:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800155a:	4a23      	ldr	r2, [pc, #140]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800155c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001560:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001564:	4b20      	ldr	r3, [pc, #128]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800156c:	4a1e      	ldr	r2, [pc, #120]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800156e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001572:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001574:	4b1d      	ldr	r3, [pc, #116]	@ (80015ec <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	2232      	movs	r2, #50	@ 0x32
 800157a:	fb02 f303 	mul.w	r3, r2, r3
 800157e:	4a1c      	ldr	r2, [pc, #112]	@ (80015f0 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001580:	fba2 2303 	umull	r2, r3, r2, r3
 8001584:	0c9b      	lsrs	r3, r3, #18
 8001586:	3301      	adds	r3, #1
 8001588:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800158a:	e002      	b.n	8001592 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	3b01      	subs	r3, #1
 8001590:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001592:	4b15      	ldr	r3, [pc, #84]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001594:	695b      	ldr	r3, [r3, #20]
 8001596:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800159a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800159e:	d102      	bne.n	80015a6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80015a0:	68fb      	ldr	r3, [r7, #12]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d1f2      	bne.n	800158c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015a6:	4b10      	ldr	r3, [pc, #64]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015a8:	695b      	ldr	r3, [r3, #20]
 80015aa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80015ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80015b2:	d112      	bne.n	80015da <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80015b4:	2303      	movs	r3, #3
 80015b6:	e011      	b.n	80015dc <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80015b8:	4b0b      	ldr	r3, [pc, #44]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015ba:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80015be:	4a0a      	ldr	r2, [pc, #40]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80015c4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80015c8:	e007      	b.n	80015da <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015ca:	4b07      	ldr	r3, [pc, #28]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015cc:	681b      	ldr	r3, [r3, #0]
 80015ce:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80015d2:	4a05      	ldr	r2, [pc, #20]	@ (80015e8 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80015d4:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80015d8:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	40007000 	.word	0x40007000
 80015ec:	20040000 	.word	0x20040000
 80015f0:	431bde83 	.word	0x431bde83

080015f4 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 80015f8:	4b05      	ldr	r3, [pc, #20]	@ (8001610 <HAL_PWREx_EnableVddIO2+0x1c>)
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	4a04      	ldr	r2, [pc, #16]	@ (8001610 <HAL_PWREx_EnableVddIO2+0x1c>)
 80015fe:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001602:	6053      	str	r3, [r2, #4]
}
 8001604:	bf00      	nop
 8001606:	46bd      	mov	sp, r7
 8001608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800160c:	4770      	bx	lr
 800160e:	bf00      	nop
 8001610:	40007000 	.word	0x40007000

08001614 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b088      	sub	sp, #32
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	2b00      	cmp	r3, #0
 8001620:	d102      	bne.n	8001628 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001622:	2301      	movs	r3, #1
 8001624:	f000 bc08 	b.w	8001e38 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001628:	4b96      	ldr	r3, [pc, #600]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 800162a:	689b      	ldr	r3, [r3, #8]
 800162c:	f003 030c 	and.w	r3, r3, #12
 8001630:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001632:	4b94      	ldr	r3, [pc, #592]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	f003 0303 	and.w	r3, r3, #3
 800163a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	f003 0310 	and.w	r3, r3, #16
 8001644:	2b00      	cmp	r3, #0
 8001646:	f000 80e4 	beq.w	8001812 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	2b00      	cmp	r3, #0
 800164e:	d007      	beq.n	8001660 <HAL_RCC_OscConfig+0x4c>
 8001650:	69bb      	ldr	r3, [r7, #24]
 8001652:	2b0c      	cmp	r3, #12
 8001654:	f040 808b 	bne.w	800176e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	2b01      	cmp	r3, #1
 800165c:	f040 8087 	bne.w	800176e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001660:	4b88      	ldr	r3, [pc, #544]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	f003 0302 	and.w	r3, r3, #2
 8001668:	2b00      	cmp	r3, #0
 800166a:	d005      	beq.n	8001678 <HAL_RCC_OscConfig+0x64>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	699b      	ldr	r3, [r3, #24]
 8001670:	2b00      	cmp	r3, #0
 8001672:	d101      	bne.n	8001678 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001674:	2301      	movs	r3, #1
 8001676:	e3df      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6a1a      	ldr	r2, [r3, #32]
 800167c:	4b81      	ldr	r3, [pc, #516]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f003 0308 	and.w	r3, r3, #8
 8001684:	2b00      	cmp	r3, #0
 8001686:	d004      	beq.n	8001692 <HAL_RCC_OscConfig+0x7e>
 8001688:	4b7e      	ldr	r3, [pc, #504]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001690:	e005      	b.n	800169e <HAL_RCC_OscConfig+0x8a>
 8001692:	4b7c      	ldr	r3, [pc, #496]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 8001694:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001698:	091b      	lsrs	r3, r3, #4
 800169a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800169e:	4293      	cmp	r3, r2
 80016a0:	d223      	bcs.n	80016ea <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	6a1b      	ldr	r3, [r3, #32]
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 fdcc 	bl	8002244 <RCC_SetFlashLatencyFromMSIRange>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e3c0      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016b6:	4b73      	ldr	r3, [pc, #460]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a72      	ldr	r2, [pc, #456]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 80016bc:	f043 0308 	orr.w	r3, r3, #8
 80016c0:	6013      	str	r3, [r2, #0]
 80016c2:	4b70      	ldr	r3, [pc, #448]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6a1b      	ldr	r3, [r3, #32]
 80016ce:	496d      	ldr	r1, [pc, #436]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016d4:	4b6b      	ldr	r3, [pc, #428]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 80016d6:	685b      	ldr	r3, [r3, #4]
 80016d8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80016dc:	687b      	ldr	r3, [r7, #4]
 80016de:	69db      	ldr	r3, [r3, #28]
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	4968      	ldr	r1, [pc, #416]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 80016e4:	4313      	orrs	r3, r2
 80016e6:	604b      	str	r3, [r1, #4]
 80016e8:	e025      	b.n	8001736 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016ea:	4b66      	ldr	r3, [pc, #408]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	4a65      	ldr	r2, [pc, #404]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 80016f0:	f043 0308 	orr.w	r3, r3, #8
 80016f4:	6013      	str	r3, [r2, #0]
 80016f6:	4b63      	ldr	r3, [pc, #396]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6a1b      	ldr	r3, [r3, #32]
 8001702:	4960      	ldr	r1, [pc, #384]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 8001704:	4313      	orrs	r3, r2
 8001706:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001708:	4b5e      	ldr	r3, [pc, #376]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	69db      	ldr	r3, [r3, #28]
 8001714:	021b      	lsls	r3, r3, #8
 8001716:	495b      	ldr	r1, [pc, #364]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 8001718:	4313      	orrs	r3, r2
 800171a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800171c:	69bb      	ldr	r3, [r7, #24]
 800171e:	2b00      	cmp	r3, #0
 8001720:	d109      	bne.n	8001736 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a1b      	ldr	r3, [r3, #32]
 8001726:	4618      	mov	r0, r3
 8001728:	f000 fd8c 	bl	8002244 <RCC_SetFlashLatencyFromMSIRange>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e380      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001736:	f000 fcc1 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 800173a:	4602      	mov	r2, r0
 800173c:	4b51      	ldr	r3, [pc, #324]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	091b      	lsrs	r3, r3, #4
 8001742:	f003 030f 	and.w	r3, r3, #15
 8001746:	4950      	ldr	r1, [pc, #320]	@ (8001888 <HAL_RCC_OscConfig+0x274>)
 8001748:	5ccb      	ldrb	r3, [r1, r3]
 800174a:	f003 031f 	and.w	r3, r3, #31
 800174e:	fa22 f303 	lsr.w	r3, r2, r3
 8001752:	4a4e      	ldr	r2, [pc, #312]	@ (800188c <HAL_RCC_OscConfig+0x278>)
 8001754:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001756:	4b4e      	ldr	r3, [pc, #312]	@ (8001890 <HAL_RCC_OscConfig+0x27c>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4618      	mov	r0, r3
 800175c:	f7ff fb8e 	bl	8000e7c <HAL_InitTick>
 8001760:	4603      	mov	r3, r0
 8001762:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001764:	7bfb      	ldrb	r3, [r7, #15]
 8001766:	2b00      	cmp	r3, #0
 8001768:	d052      	beq.n	8001810 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800176a:	7bfb      	ldrb	r3, [r7, #15]
 800176c:	e364      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	699b      	ldr	r3, [r3, #24]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d032      	beq.n	80017dc <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001776:	4b43      	ldr	r3, [pc, #268]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4a42      	ldr	r2, [pc, #264]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001782:	f7ff fbcb 	bl	8000f1c <HAL_GetTick>
 8001786:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001788:	e008      	b.n	800179c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800178a:	f7ff fbc7 	bl	8000f1c <HAL_GetTick>
 800178e:	4602      	mov	r2, r0
 8001790:	693b      	ldr	r3, [r7, #16]
 8001792:	1ad3      	subs	r3, r2, r3
 8001794:	2b02      	cmp	r3, #2
 8001796:	d901      	bls.n	800179c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001798:	2303      	movs	r3, #3
 800179a:	e34d      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800179c:	4b39      	ldr	r3, [pc, #228]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d0f0      	beq.n	800178a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017a8:	4b36      	ldr	r3, [pc, #216]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4a35      	ldr	r2, [pc, #212]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 80017ae:	f043 0308 	orr.w	r3, r3, #8
 80017b2:	6013      	str	r3, [r2, #0]
 80017b4:	4b33      	ldr	r3, [pc, #204]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	4930      	ldr	r1, [pc, #192]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017c6:	4b2f      	ldr	r3, [pc, #188]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 80017c8:	685b      	ldr	r3, [r3, #4]
 80017ca:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	69db      	ldr	r3, [r3, #28]
 80017d2:	021b      	lsls	r3, r3, #8
 80017d4:	492b      	ldr	r1, [pc, #172]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 80017d6:	4313      	orrs	r3, r2
 80017d8:	604b      	str	r3, [r1, #4]
 80017da:	e01a      	b.n	8001812 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017dc:	4b29      	ldr	r3, [pc, #164]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 80017de:	681b      	ldr	r3, [r3, #0]
 80017e0:	4a28      	ldr	r2, [pc, #160]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 80017e2:	f023 0301 	bic.w	r3, r3, #1
 80017e6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017e8:	f7ff fb98 	bl	8000f1c <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017f0:	f7ff fb94 	bl	8000f1c <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e31a      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001802:	4b20      	ldr	r3, [pc, #128]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d1f0      	bne.n	80017f0 <HAL_RCC_OscConfig+0x1dc>
 800180e:	e000      	b.n	8001812 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001810:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	f003 0301 	and.w	r3, r3, #1
 800181a:	2b00      	cmp	r3, #0
 800181c:	d073      	beq.n	8001906 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800181e:	69bb      	ldr	r3, [r7, #24]
 8001820:	2b08      	cmp	r3, #8
 8001822:	d005      	beq.n	8001830 <HAL_RCC_OscConfig+0x21c>
 8001824:	69bb      	ldr	r3, [r7, #24]
 8001826:	2b0c      	cmp	r3, #12
 8001828:	d10e      	bne.n	8001848 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800182a:	697b      	ldr	r3, [r7, #20]
 800182c:	2b03      	cmp	r3, #3
 800182e:	d10b      	bne.n	8001848 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001830:	4b14      	ldr	r3, [pc, #80]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001838:	2b00      	cmp	r3, #0
 800183a:	d063      	beq.n	8001904 <HAL_RCC_OscConfig+0x2f0>
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d15f      	bne.n	8001904 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001844:	2301      	movs	r3, #1
 8001846:	e2f7      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	685b      	ldr	r3, [r3, #4]
 800184c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001850:	d106      	bne.n	8001860 <HAL_RCC_OscConfig+0x24c>
 8001852:	4b0c      	ldr	r3, [pc, #48]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	4a0b      	ldr	r2, [pc, #44]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 8001858:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800185c:	6013      	str	r3, [r2, #0]
 800185e:	e025      	b.n	80018ac <HAL_RCC_OscConfig+0x298>
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	685b      	ldr	r3, [r3, #4]
 8001864:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001868:	d114      	bne.n	8001894 <HAL_RCC_OscConfig+0x280>
 800186a:	4b06      	ldr	r3, [pc, #24]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	4a05      	ldr	r2, [pc, #20]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 8001870:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001874:	6013      	str	r3, [r2, #0]
 8001876:	4b03      	ldr	r3, [pc, #12]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a02      	ldr	r2, [pc, #8]	@ (8001884 <HAL_RCC_OscConfig+0x270>)
 800187c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001880:	6013      	str	r3, [r2, #0]
 8001882:	e013      	b.n	80018ac <HAL_RCC_OscConfig+0x298>
 8001884:	40021000 	.word	0x40021000
 8001888:	0800456c 	.word	0x0800456c
 800188c:	20040000 	.word	0x20040000
 8001890:	20040004 	.word	0x20040004
 8001894:	4ba0      	ldr	r3, [pc, #640]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a9f      	ldr	r2, [pc, #636]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 800189a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800189e:	6013      	str	r3, [r2, #0]
 80018a0:	4b9d      	ldr	r3, [pc, #628]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a9c      	ldr	r2, [pc, #624]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 80018a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80018aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	685b      	ldr	r3, [r3, #4]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d013      	beq.n	80018dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018b4:	f7ff fb32 	bl	8000f1c <HAL_GetTick>
 80018b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ba:	e008      	b.n	80018ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018bc:	f7ff fb2e 	bl	8000f1c <HAL_GetTick>
 80018c0:	4602      	mov	r2, r0
 80018c2:	693b      	ldr	r3, [r7, #16]
 80018c4:	1ad3      	subs	r3, r2, r3
 80018c6:	2b64      	cmp	r3, #100	@ 0x64
 80018c8:	d901      	bls.n	80018ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018ca:	2303      	movs	r3, #3
 80018cc:	e2b4      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ce:	4b92      	ldr	r3, [pc, #584]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d0f0      	beq.n	80018bc <HAL_RCC_OscConfig+0x2a8>
 80018da:	e014      	b.n	8001906 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018dc:	f7ff fb1e 	bl	8000f1c <HAL_GetTick>
 80018e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018e2:	e008      	b.n	80018f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018e4:	f7ff fb1a 	bl	8000f1c <HAL_GetTick>
 80018e8:	4602      	mov	r2, r0
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	2b64      	cmp	r3, #100	@ 0x64
 80018f0:	d901      	bls.n	80018f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018f2:	2303      	movs	r3, #3
 80018f4:	e2a0      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018f6:	4b88      	ldr	r3, [pc, #544]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d1f0      	bne.n	80018e4 <HAL_RCC_OscConfig+0x2d0>
 8001902:	e000      	b.n	8001906 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001904:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 0302 	and.w	r3, r3, #2
 800190e:	2b00      	cmp	r3, #0
 8001910:	d060      	beq.n	80019d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001912:	69bb      	ldr	r3, [r7, #24]
 8001914:	2b04      	cmp	r3, #4
 8001916:	d005      	beq.n	8001924 <HAL_RCC_OscConfig+0x310>
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	2b0c      	cmp	r3, #12
 800191c:	d119      	bne.n	8001952 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	2b02      	cmp	r3, #2
 8001922:	d116      	bne.n	8001952 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001924:	4b7c      	ldr	r3, [pc, #496]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800192c:	2b00      	cmp	r3, #0
 800192e:	d005      	beq.n	800193c <HAL_RCC_OscConfig+0x328>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	68db      	ldr	r3, [r3, #12]
 8001934:	2b00      	cmp	r3, #0
 8001936:	d101      	bne.n	800193c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001938:	2301      	movs	r3, #1
 800193a:	e27d      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800193c:	4b76      	ldr	r3, [pc, #472]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 800193e:	685b      	ldr	r3, [r3, #4]
 8001940:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	691b      	ldr	r3, [r3, #16]
 8001948:	061b      	lsls	r3, r3, #24
 800194a:	4973      	ldr	r1, [pc, #460]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 800194c:	4313      	orrs	r3, r2
 800194e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001950:	e040      	b.n	80019d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68db      	ldr	r3, [r3, #12]
 8001956:	2b00      	cmp	r3, #0
 8001958:	d023      	beq.n	80019a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800195a:	4b6f      	ldr	r3, [pc, #444]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a6e      	ldr	r2, [pc, #440]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 8001960:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001964:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001966:	f7ff fad9 	bl	8000f1c <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800196e:	f7ff fad5 	bl	8000f1c <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e25b      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001980:	4b65      	ldr	r3, [pc, #404]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0f0      	beq.n	800196e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800198c:	4b62      	ldr	r3, [pc, #392]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 800198e:	685b      	ldr	r3, [r3, #4]
 8001990:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	691b      	ldr	r3, [r3, #16]
 8001998:	061b      	lsls	r3, r3, #24
 800199a:	495f      	ldr	r1, [pc, #380]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 800199c:	4313      	orrs	r3, r2
 800199e:	604b      	str	r3, [r1, #4]
 80019a0:	e018      	b.n	80019d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80019a2:	4b5d      	ldr	r3, [pc, #372]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	4a5c      	ldr	r2, [pc, #368]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 80019a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80019ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ae:	f7ff fab5 	bl	8000f1c <HAL_GetTick>
 80019b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b4:	e008      	b.n	80019c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019b6:	f7ff fab1 	bl	8000f1c <HAL_GetTick>
 80019ba:	4602      	mov	r2, r0
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	1ad3      	subs	r3, r2, r3
 80019c0:	2b02      	cmp	r3, #2
 80019c2:	d901      	bls.n	80019c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019c4:	2303      	movs	r3, #3
 80019c6:	e237      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019c8:	4b53      	ldr	r3, [pc, #332]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d1f0      	bne.n	80019b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f003 0308 	and.w	r3, r3, #8
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d03c      	beq.n	8001a5a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	695b      	ldr	r3, [r3, #20]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d01c      	beq.n	8001a22 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019e8:	4b4b      	ldr	r3, [pc, #300]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 80019ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80019ee:	4a4a      	ldr	r2, [pc, #296]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 80019f0:	f043 0301 	orr.w	r3, r3, #1
 80019f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019f8:	f7ff fa90 	bl	8000f1c <HAL_GetTick>
 80019fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019fe:	e008      	b.n	8001a12 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a00:	f7ff fa8c 	bl	8000f1c <HAL_GetTick>
 8001a04:	4602      	mov	r2, r0
 8001a06:	693b      	ldr	r3, [r7, #16]
 8001a08:	1ad3      	subs	r3, r2, r3
 8001a0a:	2b02      	cmp	r3, #2
 8001a0c:	d901      	bls.n	8001a12 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001a0e:	2303      	movs	r3, #3
 8001a10:	e212      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001a12:	4b41      	ldr	r3, [pc, #260]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 8001a14:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a18:	f003 0302 	and.w	r3, r3, #2
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0ef      	beq.n	8001a00 <HAL_RCC_OscConfig+0x3ec>
 8001a20:	e01b      	b.n	8001a5a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a22:	4b3d      	ldr	r3, [pc, #244]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 8001a24:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a28:	4a3b      	ldr	r2, [pc, #236]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 8001a2a:	f023 0301 	bic.w	r3, r3, #1
 8001a2e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a32:	f7ff fa73 	bl	8000f1c <HAL_GetTick>
 8001a36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a38:	e008      	b.n	8001a4c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a3a:	f7ff fa6f 	bl	8000f1c <HAL_GetTick>
 8001a3e:	4602      	mov	r2, r0
 8001a40:	693b      	ldr	r3, [r7, #16]
 8001a42:	1ad3      	subs	r3, r2, r3
 8001a44:	2b02      	cmp	r3, #2
 8001a46:	d901      	bls.n	8001a4c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a48:	2303      	movs	r3, #3
 8001a4a:	e1f5      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a4c:	4b32      	ldr	r3, [pc, #200]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 8001a4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d1ef      	bne.n	8001a3a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 0304 	and.w	r3, r3, #4
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	f000 80a6 	beq.w	8001bb4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a68:	2300      	movs	r3, #0
 8001a6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a6c:	4b2a      	ldr	r3, [pc, #168]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 8001a6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d10d      	bne.n	8001a94 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a78:	4b27      	ldr	r3, [pc, #156]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 8001a7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a7c:	4a26      	ldr	r2, [pc, #152]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 8001a7e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a82:	6593      	str	r3, [r2, #88]	@ 0x58
 8001a84:	4b24      	ldr	r3, [pc, #144]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 8001a86:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a8c:	60bb      	str	r3, [r7, #8]
 8001a8e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a90:	2301      	movs	r3, #1
 8001a92:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a94:	4b21      	ldr	r3, [pc, #132]	@ (8001b1c <HAL_RCC_OscConfig+0x508>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d118      	bne.n	8001ad2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001aa0:	4b1e      	ldr	r3, [pc, #120]	@ (8001b1c <HAL_RCC_OscConfig+0x508>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a1d      	ldr	r2, [pc, #116]	@ (8001b1c <HAL_RCC_OscConfig+0x508>)
 8001aa6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001aaa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001aac:	f7ff fa36 	bl	8000f1c <HAL_GetTick>
 8001ab0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab2:	e008      	b.n	8001ac6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ab4:	f7ff fa32 	bl	8000f1c <HAL_GetTick>
 8001ab8:	4602      	mov	r2, r0
 8001aba:	693b      	ldr	r3, [r7, #16]
 8001abc:	1ad3      	subs	r3, r2, r3
 8001abe:	2b02      	cmp	r3, #2
 8001ac0:	d901      	bls.n	8001ac6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e1b8      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ac6:	4b15      	ldr	r3, [pc, #84]	@ (8001b1c <HAL_RCC_OscConfig+0x508>)
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d0f0      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	689b      	ldr	r3, [r3, #8]
 8001ad6:	2b01      	cmp	r3, #1
 8001ad8:	d108      	bne.n	8001aec <HAL_RCC_OscConfig+0x4d8>
 8001ada:	4b0f      	ldr	r3, [pc, #60]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 8001adc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001ae0:	4a0d      	ldr	r2, [pc, #52]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 8001ae2:	f043 0301 	orr.w	r3, r3, #1
 8001ae6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001aea:	e029      	b.n	8001b40 <HAL_RCC_OscConfig+0x52c>
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	689b      	ldr	r3, [r3, #8]
 8001af0:	2b05      	cmp	r3, #5
 8001af2:	d115      	bne.n	8001b20 <HAL_RCC_OscConfig+0x50c>
 8001af4:	4b08      	ldr	r3, [pc, #32]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 8001af6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001afa:	4a07      	ldr	r2, [pc, #28]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 8001afc:	f043 0304 	orr.w	r3, r3, #4
 8001b00:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b04:	4b04      	ldr	r3, [pc, #16]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 8001b06:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b0a:	4a03      	ldr	r2, [pc, #12]	@ (8001b18 <HAL_RCC_OscConfig+0x504>)
 8001b0c:	f043 0301 	orr.w	r3, r3, #1
 8001b10:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b14:	e014      	b.n	8001b40 <HAL_RCC_OscConfig+0x52c>
 8001b16:	bf00      	nop
 8001b18:	40021000 	.word	0x40021000
 8001b1c:	40007000 	.word	0x40007000
 8001b20:	4b9d      	ldr	r3, [pc, #628]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001b22:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b26:	4a9c      	ldr	r2, [pc, #624]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001b28:	f023 0301 	bic.w	r3, r3, #1
 8001b2c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8001b30:	4b99      	ldr	r3, [pc, #612]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001b32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b36:	4a98      	ldr	r2, [pc, #608]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001b38:	f023 0304 	bic.w	r3, r3, #4
 8001b3c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d016      	beq.n	8001b76 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b48:	f7ff f9e8 	bl	8000f1c <HAL_GetTick>
 8001b4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b4e:	e00a      	b.n	8001b66 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b50:	f7ff f9e4 	bl	8000f1c <HAL_GetTick>
 8001b54:	4602      	mov	r2, r0
 8001b56:	693b      	ldr	r3, [r7, #16]
 8001b58:	1ad3      	subs	r3, r2, r3
 8001b5a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d901      	bls.n	8001b66 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b62:	2303      	movs	r3, #3
 8001b64:	e168      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b66:	4b8c      	ldr	r3, [pc, #560]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001b68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b6c:	f003 0302 	and.w	r3, r3, #2
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d0ed      	beq.n	8001b50 <HAL_RCC_OscConfig+0x53c>
 8001b74:	e015      	b.n	8001ba2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b76:	f7ff f9d1 	bl	8000f1c <HAL_GetTick>
 8001b7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b7c:	e00a      	b.n	8001b94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b7e:	f7ff f9cd 	bl	8000f1c <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d901      	bls.n	8001b94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b90:	2303      	movs	r3, #3
 8001b92:	e151      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b94:	4b80      	ldr	r3, [pc, #512]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001b96:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8001b9a:	f003 0302 	and.w	r3, r3, #2
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d1ed      	bne.n	8001b7e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ba2:	7ffb      	ldrb	r3, [r7, #31]
 8001ba4:	2b01      	cmp	r3, #1
 8001ba6:	d105      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ba8:	4b7b      	ldr	r3, [pc, #492]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001bac:	4a7a      	ldr	r2, [pc, #488]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001bae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001bb2:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0320 	and.w	r3, r3, #32
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d03c      	beq.n	8001c3a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d01c      	beq.n	8001c02 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bc8:	4b73      	ldr	r3, [pc, #460]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001bca:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bce:	4a72      	ldr	r2, [pc, #456]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001bd0:	f043 0301 	orr.w	r3, r3, #1
 8001bd4:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bd8:	f7ff f9a0 	bl	8000f1c <HAL_GetTick>
 8001bdc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bde:	e008      	b.n	8001bf2 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001be0:	f7ff f99c 	bl	8000f1c <HAL_GetTick>
 8001be4:	4602      	mov	r2, r0
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	1ad3      	subs	r3, r2, r3
 8001bea:	2b02      	cmp	r3, #2
 8001bec:	d901      	bls.n	8001bf2 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001bee:	2303      	movs	r3, #3
 8001bf0:	e122      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bf2:	4b69      	ldr	r3, [pc, #420]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001bf4:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001bf8:	f003 0302 	and.w	r3, r3, #2
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0ef      	beq.n	8001be0 <HAL_RCC_OscConfig+0x5cc>
 8001c00:	e01b      	b.n	8001c3a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001c02:	4b65      	ldr	r3, [pc, #404]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001c04:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c08:	4a63      	ldr	r2, [pc, #396]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001c0a:	f023 0301 	bic.w	r3, r3, #1
 8001c0e:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c12:	f7ff f983 	bl	8000f1c <HAL_GetTick>
 8001c16:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c18:	e008      	b.n	8001c2c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c1a:	f7ff f97f 	bl	8000f1c <HAL_GetTick>
 8001c1e:	4602      	mov	r2, r0
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	1ad3      	subs	r3, r2, r3
 8001c24:	2b02      	cmp	r3, #2
 8001c26:	d901      	bls.n	8001c2c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c28:	2303      	movs	r3, #3
 8001c2a:	e105      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c2c:	4b5a      	ldr	r3, [pc, #360]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001c2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8001c32:	f003 0302 	and.w	r3, r3, #2
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1ef      	bne.n	8001c1a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	f000 80f9 	beq.w	8001e36 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	f040 80cf 	bne.w	8001dec <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c4e:	4b52      	ldr	r3, [pc, #328]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c54:	697b      	ldr	r3, [r7, #20]
 8001c56:	f003 0203 	and.w	r2, r3, #3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001c5e:	429a      	cmp	r2, r3
 8001c60:	d12c      	bne.n	8001cbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c70:	429a      	cmp	r2, r3
 8001c72:	d123      	bne.n	8001cbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c74:	697b      	ldr	r3, [r7, #20]
 8001c76:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c7e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c80:	429a      	cmp	r2, r3
 8001c82:	d11b      	bne.n	8001cbc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c84:	697b      	ldr	r3, [r7, #20]
 8001c86:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001c8e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d113      	bne.n	8001cbc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001c9e:	085b      	lsrs	r3, r3, #1
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d109      	bne.n	8001cbc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cb2:	085b      	lsrs	r3, r3, #1
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001cb8:	429a      	cmp	r2, r3
 8001cba:	d071      	beq.n	8001da0 <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cbc:	69bb      	ldr	r3, [r7, #24]
 8001cbe:	2b0c      	cmp	r3, #12
 8001cc0:	d068      	beq.n	8001d94 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cc2:	4b35      	ldr	r3, [pc, #212]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d105      	bne.n	8001cda <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8001cce:	4b32      	ldr	r3, [pc, #200]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d001      	beq.n	8001cde <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8001cda:	2301      	movs	r3, #1
 8001cdc:	e0ac      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cde:	4b2e      	ldr	r3, [pc, #184]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a2d      	ldr	r2, [pc, #180]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001ce4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001ce8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cea:	f7ff f917 	bl	8000f1c <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf2:	f7ff f913 	bl	8000f1c <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e099      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d04:	4b24      	ldr	r3, [pc, #144]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f0      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d10:	4b21      	ldr	r3, [pc, #132]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	4b21      	ldr	r3, [pc, #132]	@ (8001d9c <HAL_RCC_OscConfig+0x788>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8001d20:	3a01      	subs	r2, #1
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	4311      	orrs	r1, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001d2a:	0212      	lsls	r2, r2, #8
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8001d32:	0852      	lsrs	r2, r2, #1
 8001d34:	3a01      	subs	r2, #1
 8001d36:	0552      	lsls	r2, r2, #21
 8001d38:	4311      	orrs	r1, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8001d3e:	0852      	lsrs	r2, r2, #1
 8001d40:	3a01      	subs	r2, #1
 8001d42:	0652      	lsls	r2, r2, #25
 8001d44:	4311      	orrs	r1, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8001d4a:	06d2      	lsls	r2, r2, #27
 8001d4c:	430a      	orrs	r2, r1
 8001d4e:	4912      	ldr	r1, [pc, #72]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001d50:	4313      	orrs	r3, r2
 8001d52:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d54:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4a0f      	ldr	r2, [pc, #60]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001d5a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d5e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d60:	4b0d      	ldr	r3, [pc, #52]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001d62:	68db      	ldr	r3, [r3, #12]
 8001d64:	4a0c      	ldr	r2, [pc, #48]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001d66:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d6a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d6c:	f7ff f8d6 	bl	8000f1c <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d72:	e008      	b.n	8001d86 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d74:	f7ff f8d2 	bl	8000f1c <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	2b02      	cmp	r3, #2
 8001d80:	d901      	bls.n	8001d86 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 8001d82:	2303      	movs	r3, #3
 8001d84:	e058      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d86:	4b04      	ldr	r3, [pc, #16]	@ (8001d98 <HAL_RCC_OscConfig+0x784>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d0f0      	beq.n	8001d74 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d92:	e050      	b.n	8001e36 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e04f      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
 8001d98:	40021000 	.word	0x40021000
 8001d9c:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001da0:	4b27      	ldr	r3, [pc, #156]	@ (8001e40 <HAL_RCC_OscConfig+0x82c>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d144      	bne.n	8001e36 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001dac:	4b24      	ldr	r3, [pc, #144]	@ (8001e40 <HAL_RCC_OscConfig+0x82c>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a23      	ldr	r2, [pc, #140]	@ (8001e40 <HAL_RCC_OscConfig+0x82c>)
 8001db2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001db6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001db8:	4b21      	ldr	r3, [pc, #132]	@ (8001e40 <HAL_RCC_OscConfig+0x82c>)
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	4a20      	ldr	r2, [pc, #128]	@ (8001e40 <HAL_RCC_OscConfig+0x82c>)
 8001dbe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001dc2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001dc4:	f7ff f8aa 	bl	8000f1c <HAL_GetTick>
 8001dc8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dcc:	f7ff f8a6 	bl	8000f1c <HAL_GetTick>
 8001dd0:	4602      	mov	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b02      	cmp	r3, #2
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e02c      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dde:	4b18      	ldr	r3, [pc, #96]	@ (8001e40 <HAL_RCC_OscConfig+0x82c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d0f0      	beq.n	8001dcc <HAL_RCC_OscConfig+0x7b8>
 8001dea:	e024      	b.n	8001e36 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dec:	69bb      	ldr	r3, [r7, #24]
 8001dee:	2b0c      	cmp	r3, #12
 8001df0:	d01f      	beq.n	8001e32 <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001df2:	4b13      	ldr	r3, [pc, #76]	@ (8001e40 <HAL_RCC_OscConfig+0x82c>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	4a12      	ldr	r2, [pc, #72]	@ (8001e40 <HAL_RCC_OscConfig+0x82c>)
 8001df8:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001dfc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dfe:	f7ff f88d 	bl	8000f1c <HAL_GetTick>
 8001e02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e04:	e008      	b.n	8001e18 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e06:	f7ff f889 	bl	8000f1c <HAL_GetTick>
 8001e0a:	4602      	mov	r2, r0
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	1ad3      	subs	r3, r2, r3
 8001e10:	2b02      	cmp	r3, #2
 8001e12:	d901      	bls.n	8001e18 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 8001e14:	2303      	movs	r3, #3
 8001e16:	e00f      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e18:	4b09      	ldr	r3, [pc, #36]	@ (8001e40 <HAL_RCC_OscConfig+0x82c>)
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d1f0      	bne.n	8001e06 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001e24:	4b06      	ldr	r3, [pc, #24]	@ (8001e40 <HAL_RCC_OscConfig+0x82c>)
 8001e26:	68da      	ldr	r2, [r3, #12]
 8001e28:	4905      	ldr	r1, [pc, #20]	@ (8001e40 <HAL_RCC_OscConfig+0x82c>)
 8001e2a:	4b06      	ldr	r3, [pc, #24]	@ (8001e44 <HAL_RCC_OscConfig+0x830>)
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	60cb      	str	r3, [r1, #12]
 8001e30:	e001      	b.n	8001e36 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e32:	2301      	movs	r3, #1
 8001e34:	e000      	b.n	8001e38 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 8001e36:	2300      	movs	r3, #0
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	3720      	adds	r7, #32
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	40021000 	.word	0x40021000
 8001e44:	feeefffc 	.word	0xfeeefffc

08001e48 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
 8001e50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8001e52:	2300      	movs	r3, #0
 8001e54:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d101      	bne.n	8001e60 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e5c:	2301      	movs	r3, #1
 8001e5e:	e11d      	b.n	800209c <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e60:	4b90      	ldr	r3, [pc, #576]	@ (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f003 030f 	and.w	r3, r3, #15
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d910      	bls.n	8001e90 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e6e:	4b8d      	ldr	r3, [pc, #564]	@ (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f023 020f 	bic.w	r2, r3, #15
 8001e76:	498b      	ldr	r1, [pc, #556]	@ (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	4313      	orrs	r3, r2
 8001e7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e7e:	4b89      	ldr	r3, [pc, #548]	@ (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	f003 030f 	and.w	r3, r3, #15
 8001e86:	683a      	ldr	r2, [r7, #0]
 8001e88:	429a      	cmp	r2, r3
 8001e8a:	d001      	beq.n	8001e90 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e8c:	2301      	movs	r3, #1
 8001e8e:	e105      	b.n	800209c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	f003 0302 	and.w	r3, r3, #2
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d010      	beq.n	8001ebe <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	689a      	ldr	r2, [r3, #8]
 8001ea0:	4b81      	ldr	r3, [pc, #516]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001ea2:	689b      	ldr	r3, [r3, #8]
 8001ea4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ea8:	429a      	cmp	r2, r3
 8001eaa:	d908      	bls.n	8001ebe <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001eac:	4b7e      	ldr	r3, [pc, #504]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	497b      	ldr	r1, [pc, #492]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d079      	beq.n	8001fbe <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	685b      	ldr	r3, [r3, #4]
 8001ece:	2b03      	cmp	r3, #3
 8001ed0:	d11e      	bne.n	8001f10 <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed2:	4b75      	ldr	r3, [pc, #468]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d101      	bne.n	8001ee2 <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	e0dc      	b.n	800209c <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8001ee2:	f000 fa09 	bl	80022f8 <RCC_GetSysClockFreqFromPLLSource>
 8001ee6:	4603      	mov	r3, r0
 8001ee8:	4a70      	ldr	r2, [pc, #448]	@ (80020ac <HAL_RCC_ClockConfig+0x264>)
 8001eea:	4293      	cmp	r3, r2
 8001eec:	d946      	bls.n	8001f7c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001eee:	4b6e      	ldr	r3, [pc, #440]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d140      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001efa:	4b6b      	ldr	r3, [pc, #428]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001efc:	689b      	ldr	r3, [r3, #8]
 8001efe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f02:	4a69      	ldr	r2, [pc, #420]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001f04:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f0a:	2380      	movs	r3, #128	@ 0x80
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	e035      	b.n	8001f7c <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d107      	bne.n	8001f28 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f18:	4b63      	ldr	r3, [pc, #396]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d115      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f24:	2301      	movs	r3, #1
 8001f26:	e0b9      	b.n	800209c <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d107      	bne.n	8001f40 <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f30:	4b5d      	ldr	r3, [pc, #372]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 0302 	and.w	r3, r3, #2
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d109      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f3c:	2301      	movs	r3, #1
 8001f3e:	e0ad      	b.n	800209c <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f40:	4b59      	ldr	r3, [pc, #356]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d101      	bne.n	8001f50 <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8001f4c:	2301      	movs	r3, #1
 8001f4e:	e0a5      	b.n	800209c <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8001f50:	f000 f8b4 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8001f54:	4603      	mov	r3, r0
 8001f56:	4a55      	ldr	r2, [pc, #340]	@ (80020ac <HAL_RCC_ClockConfig+0x264>)
 8001f58:	4293      	cmp	r3, r2
 8001f5a:	d90f      	bls.n	8001f7c <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001f5c:	4b52      	ldr	r3, [pc, #328]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d109      	bne.n	8001f7c <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8001f68:	4b4f      	ldr	r3, [pc, #316]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001f6a:	689b      	ldr	r3, [r3, #8]
 8001f6c:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001f70:	4a4d      	ldr	r2, [pc, #308]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001f76:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8001f78:	2380      	movs	r3, #128	@ 0x80
 8001f7a:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f7c:	4b4a      	ldr	r3, [pc, #296]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	f023 0203 	bic.w	r2, r3, #3
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	4947      	ldr	r1, [pc, #284]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f8e:	f7fe ffc5 	bl	8000f1c <HAL_GetTick>
 8001f92:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f94:	e00a      	b.n	8001fac <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f96:	f7fe ffc1 	bl	8000f1c <HAL_GetTick>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	693b      	ldr	r3, [r7, #16]
 8001f9e:	1ad3      	subs	r3, r2, r3
 8001fa0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001fa4:	4293      	cmp	r3, r2
 8001fa6:	d901      	bls.n	8001fac <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8001fa8:	2303      	movs	r3, #3
 8001faa:	e077      	b.n	800209c <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001fac:	4b3e      	ldr	r3, [pc, #248]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	f003 020c 	and.w	r2, r3, #12
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	685b      	ldr	r3, [r3, #4]
 8001fb8:	009b      	lsls	r3, r3, #2
 8001fba:	429a      	cmp	r2, r3
 8001fbc:	d1eb      	bne.n	8001f96 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 8001fbe:	697b      	ldr	r3, [r7, #20]
 8001fc0:	2b80      	cmp	r3, #128	@ 0x80
 8001fc2:	d105      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8001fc4:	4b38      	ldr	r3, [pc, #224]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	4a37      	ldr	r2, [pc, #220]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001fca:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8001fce:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f003 0302 	and.w	r3, r3, #2
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d010      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	689a      	ldr	r2, [r3, #8]
 8001fe0:	4b31      	ldr	r3, [pc, #196]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001fe8:	429a      	cmp	r2, r3
 8001fea:	d208      	bcs.n	8001ffe <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fec:	4b2e      	ldr	r3, [pc, #184]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001fee:	689b      	ldr	r3, [r3, #8]
 8001ff0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	492b      	ldr	r1, [pc, #172]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ffe:	4b29      	ldr	r3, [pc, #164]	@ (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 030f 	and.w	r3, r3, #15
 8002006:	683a      	ldr	r2, [r7, #0]
 8002008:	429a      	cmp	r2, r3
 800200a:	d210      	bcs.n	800202e <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800200c:	4b25      	ldr	r3, [pc, #148]	@ (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f023 020f 	bic.w	r2, r3, #15
 8002014:	4923      	ldr	r1, [pc, #140]	@ (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 8002016:	683b      	ldr	r3, [r7, #0]
 8002018:	4313      	orrs	r3, r2
 800201a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800201c:	4b21      	ldr	r3, [pc, #132]	@ (80020a4 <HAL_RCC_ClockConfig+0x25c>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	f003 030f 	and.w	r3, r3, #15
 8002024:	683a      	ldr	r2, [r7, #0]
 8002026:	429a      	cmp	r2, r3
 8002028:	d001      	beq.n	800202e <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e036      	b.n	800209c <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0304 	and.w	r3, r3, #4
 8002036:	2b00      	cmp	r3, #0
 8002038:	d008      	beq.n	800204c <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800203a:	4b1b      	ldr	r3, [pc, #108]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 800203c:	689b      	ldr	r3, [r3, #8]
 800203e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	4918      	ldr	r1, [pc, #96]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8002048:	4313      	orrs	r3, r2
 800204a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f003 0308 	and.w	r3, r3, #8
 8002054:	2b00      	cmp	r3, #0
 8002056:	d009      	beq.n	800206c <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002058:	4b13      	ldr	r3, [pc, #76]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	4910      	ldr	r1, [pc, #64]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8002068:	4313      	orrs	r3, r2
 800206a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800206c:	f000 f826 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 8002070:	4602      	mov	r2, r0
 8002072:	4b0d      	ldr	r3, [pc, #52]	@ (80020a8 <HAL_RCC_ClockConfig+0x260>)
 8002074:	689b      	ldr	r3, [r3, #8]
 8002076:	091b      	lsrs	r3, r3, #4
 8002078:	f003 030f 	and.w	r3, r3, #15
 800207c:	490c      	ldr	r1, [pc, #48]	@ (80020b0 <HAL_RCC_ClockConfig+0x268>)
 800207e:	5ccb      	ldrb	r3, [r1, r3]
 8002080:	f003 031f 	and.w	r3, r3, #31
 8002084:	fa22 f303 	lsr.w	r3, r2, r3
 8002088:	4a0a      	ldr	r2, [pc, #40]	@ (80020b4 <HAL_RCC_ClockConfig+0x26c>)
 800208a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800208c:	4b0a      	ldr	r3, [pc, #40]	@ (80020b8 <HAL_RCC_ClockConfig+0x270>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	4618      	mov	r0, r3
 8002092:	f7fe fef3 	bl	8000e7c <HAL_InitTick>
 8002096:	4603      	mov	r3, r0
 8002098:	73fb      	strb	r3, [r7, #15]

  return status;
 800209a:	7bfb      	ldrb	r3, [r7, #15]
}
 800209c:	4618      	mov	r0, r3
 800209e:	3718      	adds	r7, #24
 80020a0:	46bd      	mov	sp, r7
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	40022000 	.word	0x40022000
 80020a8:	40021000 	.word	0x40021000
 80020ac:	04c4b400 	.word	0x04c4b400
 80020b0:	0800456c 	.word	0x0800456c
 80020b4:	20040000 	.word	0x20040000
 80020b8:	20040004 	.word	0x20040004

080020bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80020bc:	b480      	push	{r7}
 80020be:	b089      	sub	sp, #36	@ 0x24
 80020c0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80020c2:	2300      	movs	r3, #0
 80020c4:	61fb      	str	r3, [r7, #28]
 80020c6:	2300      	movs	r3, #0
 80020c8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80020ca:	4b3e      	ldr	r3, [pc, #248]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020cc:	689b      	ldr	r3, [r3, #8]
 80020ce:	f003 030c 	and.w	r3, r3, #12
 80020d2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80020d4:	4b3b      	ldr	r3, [pc, #236]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	f003 0303 	and.w	r3, r3, #3
 80020dc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d005      	beq.n	80020f0 <HAL_RCC_GetSysClockFreq+0x34>
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	2b0c      	cmp	r3, #12
 80020e8:	d121      	bne.n	800212e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	2b01      	cmp	r3, #1
 80020ee:	d11e      	bne.n	800212e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80020f0:	4b34      	ldr	r3, [pc, #208]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0308 	and.w	r3, r3, #8
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d107      	bne.n	800210c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80020fc:	4b31      	ldr	r3, [pc, #196]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 80020fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002102:	0a1b      	lsrs	r3, r3, #8
 8002104:	f003 030f 	and.w	r3, r3, #15
 8002108:	61fb      	str	r3, [r7, #28]
 800210a:	e005      	b.n	8002118 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800210c:	4b2d      	ldr	r3, [pc, #180]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	091b      	lsrs	r3, r3, #4
 8002112:	f003 030f 	and.w	r3, r3, #15
 8002116:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002118:	4a2b      	ldr	r2, [pc, #172]	@ (80021c8 <HAL_RCC_GetSysClockFreq+0x10c>)
 800211a:	69fb      	ldr	r3, [r7, #28]
 800211c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002120:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002122:	693b      	ldr	r3, [r7, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d10d      	bne.n	8002144 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002128:	69fb      	ldr	r3, [r7, #28]
 800212a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800212c:	e00a      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b04      	cmp	r3, #4
 8002132:	d102      	bne.n	800213a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002134:	4b25      	ldr	r3, [pc, #148]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002136:	61bb      	str	r3, [r7, #24]
 8002138:	e004      	b.n	8002144 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800213a:	693b      	ldr	r3, [r7, #16]
 800213c:	2b08      	cmp	r3, #8
 800213e:	d101      	bne.n	8002144 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002140:	4b23      	ldr	r3, [pc, #140]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002142:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002144:	693b      	ldr	r3, [r7, #16]
 8002146:	2b0c      	cmp	r3, #12
 8002148:	d134      	bne.n	80021b4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800214a:	4b1e      	ldr	r3, [pc, #120]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800214c:	68db      	ldr	r3, [r3, #12]
 800214e:	f003 0303 	and.w	r3, r3, #3
 8002152:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	2b02      	cmp	r3, #2
 8002158:	d003      	beq.n	8002162 <HAL_RCC_GetSysClockFreq+0xa6>
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	2b03      	cmp	r3, #3
 800215e:	d003      	beq.n	8002168 <HAL_RCC_GetSysClockFreq+0xac>
 8002160:	e005      	b.n	800216e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002162:	4b1a      	ldr	r3, [pc, #104]	@ (80021cc <HAL_RCC_GetSysClockFreq+0x110>)
 8002164:	617b      	str	r3, [r7, #20]
      break;
 8002166:	e005      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002168:	4b19      	ldr	r3, [pc, #100]	@ (80021d0 <HAL_RCC_GetSysClockFreq+0x114>)
 800216a:	617b      	str	r3, [r7, #20]
      break;
 800216c:	e002      	b.n	8002174 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800216e:	69fb      	ldr	r3, [r7, #28]
 8002170:	617b      	str	r3, [r7, #20]
      break;
 8002172:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002174:	4b13      	ldr	r3, [pc, #76]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	091b      	lsrs	r3, r3, #4
 800217a:	f003 030f 	and.w	r3, r3, #15
 800217e:	3301      	adds	r3, #1
 8002180:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002182:	4b10      	ldr	r3, [pc, #64]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002184:	68db      	ldr	r3, [r3, #12]
 8002186:	0a1b      	lsrs	r3, r3, #8
 8002188:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800218c:	697a      	ldr	r2, [r7, #20]
 800218e:	fb03 f202 	mul.w	r2, r3, r2
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	fbb2 f3f3 	udiv	r3, r2, r3
 8002198:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800219a:	4b0a      	ldr	r3, [pc, #40]	@ (80021c4 <HAL_RCC_GetSysClockFreq+0x108>)
 800219c:	68db      	ldr	r3, [r3, #12]
 800219e:	0e5b      	lsrs	r3, r3, #25
 80021a0:	f003 0303 	and.w	r3, r3, #3
 80021a4:	3301      	adds	r3, #1
 80021a6:	005b      	lsls	r3, r3, #1
 80021a8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80021aa:	697a      	ldr	r2, [r7, #20]
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80021b2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80021b4:	69bb      	ldr	r3, [r7, #24]
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	3724      	adds	r7, #36	@ 0x24
 80021ba:	46bd      	mov	sp, r7
 80021bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c0:	4770      	bx	lr
 80021c2:	bf00      	nop
 80021c4:	40021000 	.word	0x40021000
 80021c8:	08004584 	.word	0x08004584
 80021cc:	00f42400 	.word	0x00f42400
 80021d0:	007a1200 	.word	0x007a1200

080021d4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021d4:	b480      	push	{r7}
 80021d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80021d8:	4b03      	ldr	r3, [pc, #12]	@ (80021e8 <HAL_RCC_GetHCLKFreq+0x14>)
 80021da:	681b      	ldr	r3, [r3, #0]
}
 80021dc:	4618      	mov	r0, r3
 80021de:	46bd      	mov	sp, r7
 80021e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e4:	4770      	bx	lr
 80021e6:	bf00      	nop
 80021e8:	20040000 	.word	0x20040000

080021ec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80021f0:	f7ff fff0 	bl	80021d4 <HAL_RCC_GetHCLKFreq>
 80021f4:	4602      	mov	r2, r0
 80021f6:	4b06      	ldr	r3, [pc, #24]	@ (8002210 <HAL_RCC_GetPCLK1Freq+0x24>)
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	0a1b      	lsrs	r3, r3, #8
 80021fc:	f003 0307 	and.w	r3, r3, #7
 8002200:	4904      	ldr	r1, [pc, #16]	@ (8002214 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002202:	5ccb      	ldrb	r3, [r1, r3]
 8002204:	f003 031f 	and.w	r3, r3, #31
 8002208:	fa22 f303 	lsr.w	r3, r2, r3
}
 800220c:	4618      	mov	r0, r3
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40021000 	.word	0x40021000
 8002214:	0800457c 	.word	0x0800457c

08002218 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800221c:	f7ff ffda 	bl	80021d4 <HAL_RCC_GetHCLKFreq>
 8002220:	4602      	mov	r2, r0
 8002222:	4b06      	ldr	r3, [pc, #24]	@ (800223c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	0adb      	lsrs	r3, r3, #11
 8002228:	f003 0307 	and.w	r3, r3, #7
 800222c:	4904      	ldr	r1, [pc, #16]	@ (8002240 <HAL_RCC_GetPCLK2Freq+0x28>)
 800222e:	5ccb      	ldrb	r3, [r1, r3]
 8002230:	f003 031f 	and.w	r3, r3, #31
 8002234:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002238:	4618      	mov	r0, r3
 800223a:	bd80      	pop	{r7, pc}
 800223c:	40021000 	.word	0x40021000
 8002240:	0800457c 	.word	0x0800457c

08002244 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	b086      	sub	sp, #24
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800224c:	2300      	movs	r3, #0
 800224e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002250:	4b27      	ldr	r3, [pc, #156]	@ (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002252:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002254:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800225c:	f7ff f906 	bl	800146c <HAL_PWREx_GetVoltageRange>
 8002260:	6178      	str	r0, [r7, #20]
 8002262:	e014      	b.n	800228e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002264:	4b22      	ldr	r3, [pc, #136]	@ (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002266:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002268:	4a21      	ldr	r2, [pc, #132]	@ (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800226a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800226e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002270:	4b1f      	ldr	r3, [pc, #124]	@ (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002272:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002274:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002278:	60fb      	str	r3, [r7, #12]
 800227a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800227c:	f7ff f8f6 	bl	800146c <HAL_PWREx_GetVoltageRange>
 8002280:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002282:	4b1b      	ldr	r3, [pc, #108]	@ (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002284:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002286:	4a1a      	ldr	r2, [pc, #104]	@ (80022f0 <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800228c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800228e:	697b      	ldr	r3, [r7, #20]
 8002290:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002294:	d10b      	bne.n	80022ae <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b80      	cmp	r3, #128	@ 0x80
 800229a:	d913      	bls.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	2ba0      	cmp	r3, #160	@ 0xa0
 80022a0:	d902      	bls.n	80022a8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80022a2:	2302      	movs	r3, #2
 80022a4:	613b      	str	r3, [r7, #16]
 80022a6:	e00d      	b.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022a8:	2301      	movs	r3, #1
 80022aa:	613b      	str	r3, [r7, #16]
 80022ac:	e00a      	b.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	2b7f      	cmp	r3, #127	@ 0x7f
 80022b2:	d902      	bls.n	80022ba <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80022b4:	2302      	movs	r3, #2
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	e004      	b.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	2b70      	cmp	r3, #112	@ 0x70
 80022be:	d101      	bne.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80022c0:	2301      	movs	r3, #1
 80022c2:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022c4:	4b0b      	ldr	r3, [pc, #44]	@ (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	f023 020f 	bic.w	r2, r3, #15
 80022cc:	4909      	ldr	r1, [pc, #36]	@ (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80022ce:	693b      	ldr	r3, [r7, #16]
 80022d0:	4313      	orrs	r3, r2
 80022d2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022d4:	4b07      	ldr	r3, [pc, #28]	@ (80022f4 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 030f 	and.w	r3, r3, #15
 80022dc:	693a      	ldr	r2, [r7, #16]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d001      	beq.n	80022e6 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e000      	b.n	80022e8 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80022e6:	2300      	movs	r3, #0
}
 80022e8:	4618      	mov	r0, r3
 80022ea:	3718      	adds	r7, #24
 80022ec:	46bd      	mov	sp, r7
 80022ee:	bd80      	pop	{r7, pc}
 80022f0:	40021000 	.word	0x40021000
 80022f4:	40022000 	.word	0x40022000

080022f8 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80022f8:	b480      	push	{r7}
 80022fa:	b087      	sub	sp, #28
 80022fc:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022fe:	4b2d      	ldr	r3, [pc, #180]	@ (80023b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002300:	68db      	ldr	r3, [r3, #12]
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	2b03      	cmp	r3, #3
 800230c:	d00b      	beq.n	8002326 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	2b03      	cmp	r3, #3
 8002312:	d825      	bhi.n	8002360 <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	2b01      	cmp	r3, #1
 8002318:	d008      	beq.n	800232c <RCC_GetSysClockFreqFromPLLSource+0x34>
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	2b02      	cmp	r3, #2
 800231e:	d11f      	bne.n	8002360 <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002320:	4b25      	ldr	r3, [pc, #148]	@ (80023b8 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002322:	613b      	str	r3, [r7, #16]
    break;
 8002324:	e01f      	b.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002326:	4b25      	ldr	r3, [pc, #148]	@ (80023bc <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002328:	613b      	str	r3, [r7, #16]
    break;
 800232a:	e01c      	b.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800232c:	4b21      	ldr	r3, [pc, #132]	@ (80023b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 0308 	and.w	r3, r3, #8
 8002334:	2b00      	cmp	r3, #0
 8002336:	d107      	bne.n	8002348 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002338:	4b1e      	ldr	r3, [pc, #120]	@ (80023b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800233a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800233e:	0a1b      	lsrs	r3, r3, #8
 8002340:	f003 030f 	and.w	r3, r3, #15
 8002344:	617b      	str	r3, [r7, #20]
 8002346:	e005      	b.n	8002354 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002348:	4b1a      	ldr	r3, [pc, #104]	@ (80023b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 030f 	and.w	r3, r3, #15
 8002352:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002354:	4a1a      	ldr	r2, [pc, #104]	@ (80023c0 <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002356:	697b      	ldr	r3, [r7, #20]
 8002358:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800235c:	613b      	str	r3, [r7, #16]
    break;
 800235e:	e002      	b.n	8002366 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002360:	2300      	movs	r3, #0
 8002362:	613b      	str	r3, [r7, #16]
    break;
 8002364:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002366:	4b13      	ldr	r3, [pc, #76]	@ (80023b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002368:	68db      	ldr	r3, [r3, #12]
 800236a:	091b      	lsrs	r3, r3, #4
 800236c:	f003 030f 	and.w	r3, r3, #15
 8002370:	3301      	adds	r3, #1
 8002372:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002374:	4b0f      	ldr	r3, [pc, #60]	@ (80023b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002376:	68db      	ldr	r3, [r3, #12]
 8002378:	0a1b      	lsrs	r3, r3, #8
 800237a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800237e:	693a      	ldr	r2, [r7, #16]
 8002380:	fb03 f202 	mul.w	r2, r3, r2
 8002384:	68bb      	ldr	r3, [r7, #8]
 8002386:	fbb2 f3f3 	udiv	r3, r2, r3
 800238a:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800238c:	4b09      	ldr	r3, [pc, #36]	@ (80023b4 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 800238e:	68db      	ldr	r3, [r3, #12]
 8002390:	0e5b      	lsrs	r3, r3, #25
 8002392:	f003 0303 	and.w	r3, r3, #3
 8002396:	3301      	adds	r3, #1
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 800239c:	693a      	ldr	r2, [r7, #16]
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80023a4:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80023a6:	683b      	ldr	r3, [r7, #0]
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	371c      	adds	r7, #28
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr
 80023b4:	40021000 	.word	0x40021000
 80023b8:	00f42400 	.word	0x00f42400
 80023bc:	007a1200 	.word	0x007a1200
 80023c0:	08004584 	.word	0x08004584

080023c4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b086      	sub	sp, #24
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80023cc:	2300      	movs	r3, #0
 80023ce:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80023d0:	2300      	movs	r3, #0
 80023d2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d040      	beq.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80023e4:	2b80      	cmp	r3, #128	@ 0x80
 80023e6:	d02a      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80023e8:	2b80      	cmp	r3, #128	@ 0x80
 80023ea:	d825      	bhi.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80023ec:	2b60      	cmp	r3, #96	@ 0x60
 80023ee:	d026      	beq.n	800243e <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80023f0:	2b60      	cmp	r3, #96	@ 0x60
 80023f2:	d821      	bhi.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80023f4:	2b40      	cmp	r3, #64	@ 0x40
 80023f6:	d006      	beq.n	8002406 <HAL_RCCEx_PeriphCLKConfig+0x42>
 80023f8:	2b40      	cmp	r3, #64	@ 0x40
 80023fa:	d81d      	bhi.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x74>
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d009      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x50>
 8002400:	2b20      	cmp	r3, #32
 8002402:	d010      	beq.n	8002426 <HAL_RCCEx_PeriphCLKConfig+0x62>
 8002404:	e018      	b.n	8002438 <HAL_RCCEx_PeriphCLKConfig+0x74>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002406:	4b89      	ldr	r3, [pc, #548]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002408:	68db      	ldr	r3, [r3, #12]
 800240a:	4a88      	ldr	r2, [pc, #544]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800240c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002410:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002412:	e015      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x7c>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	3304      	adds	r3, #4
 8002418:	2100      	movs	r1, #0
 800241a:	4618      	mov	r0, r3
 800241c:	f000 fb02 	bl	8002a24 <RCCEx_PLLSAI1_Config>
 8002420:	4603      	mov	r3, r0
 8002422:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002424:	e00c      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x7c>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	3320      	adds	r3, #32
 800242a:	2100      	movs	r1, #0
 800242c:	4618      	mov	r0, r3
 800242e:	f000 fbed 	bl	8002c0c <RCCEx_PLLSAI2_Config>
 8002432:	4603      	mov	r3, r0
 8002434:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002436:	e003      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x7c>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	74fb      	strb	r3, [r7, #19]
      break;
 800243c:	e000      	b.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x7c>
      break;
 800243e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002440:	7cfb      	ldrb	r3, [r7, #19]
 8002442:	2b00      	cmp	r3, #0
 8002444:	d10b      	bne.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x9a>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002446:	4b79      	ldr	r3, [pc, #484]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002448:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800244c:	f023 02e0 	bic.w	r2, r3, #224	@ 0xe0
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002454:	4975      	ldr	r1, [pc, #468]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002456:	4313      	orrs	r3, r2
 8002458:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 800245c:	e001      	b.n	8002462 <HAL_RCCEx_PeriphCLKConfig+0x9e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800245e:	7cfb      	ldrb	r3, [r7, #19]
 8002460:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d047      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002472:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002476:	d030      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002478:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800247c:	d82a      	bhi.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800247e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002482:	d02a      	beq.n	80024da <HAL_RCCEx_PeriphCLKConfig+0x116>
 8002484:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002488:	d824      	bhi.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 800248a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800248e:	d008      	beq.n	80024a2 <HAL_RCCEx_PeriphCLKConfig+0xde>
 8002490:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002494:	d81e      	bhi.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
 8002496:	2b00      	cmp	r3, #0
 8002498:	d00a      	beq.n	80024b0 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800249a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800249e:	d010      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80024a0:	e018      	b.n	80024d4 <HAL_RCCEx_PeriphCLKConfig+0x110>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80024a2:	4b62      	ldr	r3, [pc, #392]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024a4:	68db      	ldr	r3, [r3, #12]
 80024a6:	4a61      	ldr	r2, [pc, #388]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024a8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024ac:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024ae:	e015      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	3304      	adds	r3, #4
 80024b4:	2100      	movs	r1, #0
 80024b6:	4618      	mov	r0, r3
 80024b8:	f000 fab4 	bl	8002a24 <RCCEx_PLLSAI1_Config>
 80024bc:	4603      	mov	r3, r0
 80024be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024c0:	e00c      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x118>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	3320      	adds	r3, #32
 80024c6:	2100      	movs	r1, #0
 80024c8:	4618      	mov	r0, r3
 80024ca:	f000 fb9f 	bl	8002c0c <RCCEx_PLLSAI2_Config>
 80024ce:	4603      	mov	r3, r0
 80024d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80024d2:	e003      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x118>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80024d4:	2301      	movs	r3, #1
 80024d6:	74fb      	strb	r3, [r7, #19]
      break;
 80024d8:	e000      	b.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0x118>
      break;
 80024da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80024dc:	7cfb      	ldrb	r3, [r7, #19]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10b      	bne.n	80024fa <HAL_RCCEx_PeriphCLKConfig+0x136>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024e2:	4b52      	ldr	r3, [pc, #328]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80024e8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80024f0:	494e      	ldr	r1, [pc, #312]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80024f2:	4313      	orrs	r3, r2
 80024f4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
 80024f8:	e001      	b.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x13a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024fa:	7cfb      	ldrb	r3, [r7, #19]
 80024fc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002506:	2b00      	cmp	r3, #0
 8002508:	f000 809f 	beq.w	800264a <HAL_RCCEx_PeriphCLKConfig+0x286>
  {
    FlagStatus       pwrclkchanged = RESET;
 800250c:	2300      	movs	r3, #0
 800250e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002510:	4b46      	ldr	r3, [pc, #280]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002512:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002514:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002518:	2b00      	cmp	r3, #0
 800251a:	d101      	bne.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x15c>
 800251c:	2301      	movs	r3, #1
 800251e:	e000      	b.n	8002522 <HAL_RCCEx_PeriphCLKConfig+0x15e>
 8002520:	2300      	movs	r3, #0
 8002522:	2b00      	cmp	r3, #0
 8002524:	d00d      	beq.n	8002542 <HAL_RCCEx_PeriphCLKConfig+0x17e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002526:	4b41      	ldr	r3, [pc, #260]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002528:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800252a:	4a40      	ldr	r2, [pc, #256]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800252c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002530:	6593      	str	r3, [r2, #88]	@ 0x58
 8002532:	4b3e      	ldr	r3, [pc, #248]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 8002534:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002536:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800253a:	60bb      	str	r3, [r7, #8]
 800253c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800253e:	2301      	movs	r3, #1
 8002540:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002542:	4b3b      	ldr	r3, [pc, #236]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	4a3a      	ldr	r2, [pc, #232]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 8002548:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800254c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800254e:	f7fe fce5 	bl	8000f1c <HAL_GetTick>
 8002552:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002554:	e009      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002556:	f7fe fce1 	bl	8000f1c <HAL_GetTick>
 800255a:	4602      	mov	r2, r0
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	1ad3      	subs	r3, r2, r3
 8002560:	2b02      	cmp	r3, #2
 8002562:	d902      	bls.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        ret = HAL_TIMEOUT;
 8002564:	2303      	movs	r3, #3
 8002566:	74fb      	strb	r3, [r7, #19]
        break;
 8002568:	e005      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800256a:	4b31      	ldr	r3, [pc, #196]	@ (8002630 <HAL_RCCEx_PeriphCLKConfig+0x26c>)
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0ef      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x192>
      }
    }

    if(ret == HAL_OK)
 8002576:	7cfb      	ldrb	r3, [r7, #19]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d15b      	bne.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x270>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800257c:	4b2b      	ldr	r3, [pc, #172]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800257e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002582:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002586:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002588:	697b      	ldr	r3, [r7, #20]
 800258a:	2b00      	cmp	r3, #0
 800258c:	d01f      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002594:	697a      	ldr	r2, [r7, #20]
 8002596:	429a      	cmp	r2, r3
 8002598:	d019      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x20a>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800259a:	4b24      	ldr	r3, [pc, #144]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800259c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025a0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80025a6:	4b21      	ldr	r3, [pc, #132]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025ac:	4a1f      	ldr	r2, [pc, #124]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80025b2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80025b6:	4b1d      	ldr	r3, [pc, #116]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025bc:	4a1b      	ldr	r2, [pc, #108]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025be:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80025c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80025c6:	4a19      	ldr	r2, [pc, #100]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f003 0301 	and.w	r3, r3, #1
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d016      	beq.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x242>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025d8:	f7fe fca0 	bl	8000f1c <HAL_GetTick>
 80025dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025de:	e00b      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025e0:	f7fe fc9c 	bl	8000f1c <HAL_GetTick>
 80025e4:	4602      	mov	r2, r0
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	1ad3      	subs	r3, r2, r3
 80025ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025ee:	4293      	cmp	r3, r2
 80025f0:	d902      	bls.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x234>
          {
            ret = HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	74fb      	strb	r3, [r7, #19]
            break;
 80025f6:	e006      	b.n	8002606 <HAL_RCCEx_PeriphCLKConfig+0x242>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80025f8:	4b0c      	ldr	r3, [pc, #48]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 80025fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80025fe:	f003 0302 	and.w	r3, r3, #2
 8002602:	2b00      	cmp	r3, #0
 8002604:	d0ec      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x21c>
          }
        }
      }

      if(ret == HAL_OK)
 8002606:	7cfb      	ldrb	r3, [r7, #19]
 8002608:	2b00      	cmp	r3, #0
 800260a:	d10c      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x262>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800260c:	4b07      	ldr	r3, [pc, #28]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800260e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002612:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800261c:	4903      	ldr	r1, [pc, #12]	@ (800262c <HAL_RCCEx_PeriphCLKConfig+0x268>)
 800261e:	4313      	orrs	r3, r2
 8002620:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8002624:	e008      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x274>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002626:	7cfb      	ldrb	r3, [r7, #19]
 8002628:	74bb      	strb	r3, [r7, #18]
 800262a:	e005      	b.n	8002638 <HAL_RCCEx_PeriphCLKConfig+0x274>
 800262c:	40021000 	.word	0x40021000
 8002630:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002634:	7cfb      	ldrb	r3, [r7, #19]
 8002636:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002638:	7c7b      	ldrb	r3, [r7, #17]
 800263a:	2b01      	cmp	r3, #1
 800263c:	d105      	bne.n	800264a <HAL_RCCEx_PeriphCLKConfig+0x286>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800263e:	4ba0      	ldr	r3, [pc, #640]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002640:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002642:	4a9f      	ldr	r2, [pc, #636]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002644:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002648:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	d00a      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x2a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002656:	4b9a      	ldr	r3, [pc, #616]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002658:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800265c:	f023 0203 	bic.w	r2, r3, #3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002664:	4996      	ldr	r1, [pc, #600]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002666:	4313      	orrs	r3, r2
 8002668:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b00      	cmp	r3, #0
 8002676:	d00a      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002678:	4b91      	ldr	r3, [pc, #580]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800267a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800267e:	f023 020c 	bic.w	r2, r3, #12
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002686:	498e      	ldr	r1, [pc, #568]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002688:	4313      	orrs	r3, r2
 800268a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0304 	and.w	r3, r3, #4
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800269a:	4b89      	ldr	r3, [pc, #548]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800269c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026a0:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026a8:	4985      	ldr	r1, [pc, #532]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	f003 0308 	and.w	r3, r3, #8
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d00a      	beq.n	80026d2 <HAL_RCCEx_PeriphCLKConfig+0x30e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80026bc:	4b80      	ldr	r3, [pc, #512]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026c2:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80026ca:	497d      	ldr	r1, [pc, #500]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026cc:	4313      	orrs	r3, r2
 80026ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f003 0310 	and.w	r3, r3, #16
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d00a      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x330>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80026de:	4b78      	ldr	r3, [pc, #480]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80026e4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80026ec:	4974      	ldr	r1, [pc, #464]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80026ee:	4313      	orrs	r3, r2
 80026f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d00a      	beq.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002700:	4b6f      	ldr	r3, [pc, #444]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002702:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002706:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800270e:	496c      	ldr	r1, [pc, #432]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002710:	4313      	orrs	r3, r2
 8002712:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800271e:	2b00      	cmp	r3, #0
 8002720:	d00a      	beq.n	8002738 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002722:	4b67      	ldr	r3, [pc, #412]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002724:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002728:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002730:	4963      	ldr	r1, [pc, #396]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002732:	4313      	orrs	r3, r2
 8002734:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002740:	2b00      	cmp	r3, #0
 8002742:	d00a      	beq.n	800275a <HAL_RCCEx_PeriphCLKConfig+0x396>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002744:	4b5e      	ldr	r3, [pc, #376]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002746:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800274a:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002752:	495b      	ldr	r1, [pc, #364]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002754:	4313      	orrs	r3, r2
 8002756:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d00a      	beq.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002766:	4b56      	ldr	r3, [pc, #344]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002768:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276c:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002774:	4952      	ldr	r1, [pc, #328]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002776:	4313      	orrs	r3, r2
 8002778:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002784:	2b00      	cmp	r3, #0
 8002786:	d00a      	beq.n	800279e <HAL_RCCEx_PeriphCLKConfig+0x3da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002788:	4b4d      	ldr	r3, [pc, #308]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800278a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800278e:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002796:	494a      	ldr	r1, [pc, #296]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002798:	4313      	orrs	r3, r2
 800279a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d00a      	beq.n	80027c0 <HAL_RCCEx_PeriphCLKConfig+0x3fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027aa:	4b45      	ldr	r3, [pc, #276]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027b0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b8:	4941      	ldr	r1, [pc, #260]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ba:	4313      	orrs	r3, r2
 80027bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d00a      	beq.n	80027e2 <HAL_RCCEx_PeriphCLKConfig+0x41e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80027cc:	4b3c      	ldr	r3, [pc, #240]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80027d2:	f023 0203 	bic.w	r2, r3, #3
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027da:	4939      	ldr	r1, [pc, #228]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d028      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x47c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027ee:	4b34      	ldr	r3, [pc, #208]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80027f4:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80027fc:	4930      	ldr	r1, [pc, #192]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80027fe:	4313      	orrs	r3, r2
 8002800:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002808:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800280c:	d106      	bne.n	800281c <HAL_RCCEx_PeriphCLKConfig+0x458>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800280e:	4b2c      	ldr	r3, [pc, #176]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	4a2b      	ldr	r2, [pc, #172]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002814:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002818:	60d3      	str	r3, [r2, #12]
 800281a:	e011      	b.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x47c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002820:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8002824:	d10c      	bne.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x47c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	3304      	adds	r3, #4
 800282a:	2101      	movs	r1, #1
 800282c:	4618      	mov	r0, r3
 800282e:	f000 f8f9 	bl	8002a24 <RCCEx_PLLSAI1_Config>
 8002832:	4603      	mov	r3, r0
 8002834:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002836:	7cfb      	ldrb	r3, [r7, #19]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d001      	beq.n	8002840 <HAL_RCCEx_PeriphCLKConfig+0x47c>
        {
          /* set overall return value */
          status = ret;
 800283c:	7cfb      	ldrb	r3, [r7, #19]
 800283e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002848:	2b00      	cmp	r3, #0
 800284a:	d04d      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002850:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002854:	d108      	bne.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8002856:	4b1a      	ldr	r3, [pc, #104]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002858:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800285c:	4a18      	ldr	r2, [pc, #96]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800285e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002862:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002866:	e012      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x4ca>
 8002868:	4b15      	ldr	r3, [pc, #84]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800286a:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800286e:	4a14      	ldr	r2, [pc, #80]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002870:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002874:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
 8002878:	4b11      	ldr	r3, [pc, #68]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800287a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800287e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002886:	490e      	ldr	r1, [pc, #56]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 8002888:	4313      	orrs	r3, r2
 800288a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8002892:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002896:	d106      	bne.n	80028a6 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002898:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	4a08      	ldr	r2, [pc, #32]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 800289e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80028a2:	60d3      	str	r3, [r2, #12]
 80028a4:	e020      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028aa:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80028ae:	d109      	bne.n	80028c4 <HAL_RCCEx_PeriphCLKConfig+0x500>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80028b0:	4b03      	ldr	r3, [pc, #12]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028b2:	68db      	ldr	r3, [r3, #12]
 80028b4:	4a02      	ldr	r2, [pc, #8]	@ (80028c0 <HAL_RCCEx_PeriphCLKConfig+0x4fc>)
 80028b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028ba:	60d3      	str	r3, [r2, #12]
 80028bc:	e014      	b.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 80028be:	bf00      	nop
 80028c0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80028c8:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028cc:	d10c      	bne.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	3304      	adds	r3, #4
 80028d2:	2101      	movs	r1, #1
 80028d4:	4618      	mov	r0, r3
 80028d6:	f000 f8a5 	bl	8002a24 <RCCEx_PLLSAI1_Config>
 80028da:	4603      	mov	r3, r0
 80028dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028de:	7cfb      	ldrb	r3, [r7, #19]
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d001      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
      {
        /* set overall return value */
        status = ret;
 80028e4:	7cfb      	ldrb	r3, [r7, #19]
 80028e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d028      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x582>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80028f4:	4b4a      	ldr	r3, [pc, #296]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80028f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80028fa:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002902:	4947      	ldr	r1, [pc, #284]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002904:	4313      	orrs	r3, r2
 8002906:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800290e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002912:	d106      	bne.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002914:	4b42      	ldr	r3, [pc, #264]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	4a41      	ldr	r2, [pc, #260]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800291a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800291e:	60d3      	str	r3, [r2, #12]
 8002920:	e011      	b.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x582>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8002926:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800292a:	d10c      	bne.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x582>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	3304      	adds	r3, #4
 8002930:	2101      	movs	r1, #1
 8002932:	4618      	mov	r0, r3
 8002934:	f000 f876 	bl	8002a24 <RCCEx_PLLSAI1_Config>
 8002938:	4603      	mov	r3, r0
 800293a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800293c:	7cfb      	ldrb	r3, [r7, #19]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <HAL_RCCEx_PeriphCLKConfig+0x582>
      {
        /* set overall return value */
        status = ret;
 8002942:	7cfb      	ldrb	r3, [r7, #19]
 8002944:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800294e:	2b00      	cmp	r3, #0
 8002950:	d01e      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002952:	4b33      	ldr	r3, [pc, #204]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002954:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002958:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002962:	492f      	ldr	r1, [pc, #188]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002964:	4313      	orrs	r3, r2
 8002966:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002970:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002974:	d10c      	bne.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	3304      	adds	r3, #4
 800297a:	2102      	movs	r1, #2
 800297c:	4618      	mov	r0, r3
 800297e:	f000 f851 	bl	8002a24 <RCCEx_PLLSAI1_Config>
 8002982:	4603      	mov	r3, r0
 8002984:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002986:	7cfb      	ldrb	r3, [r7, #19]
 8002988:	2b00      	cmp	r3, #0
 800298a:	d001      	beq.n	8002990 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
      {
        /* set overall return value */
        status = ret;
 800298c:	7cfb      	ldrb	r3, [r7, #19]
 800298e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002998:	2b00      	cmp	r3, #0
 800299a:	d00b      	beq.n	80029b4 <HAL_RCCEx_PeriphCLKConfig+0x5f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800299c:	4b20      	ldr	r3, [pc, #128]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800299e:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029a2:	f023 0204 	bic.w	r2, r3, #4
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80029ac:	491c      	ldr	r1, [pc, #112]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029ae:	4313      	orrs	r3, r2
 80029b0:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d00b      	beq.n	80029d8 <HAL_RCCEx_PeriphCLKConfig+0x614>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80029c0:	4b17      	ldr	r3, [pc, #92]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029c6:	f023 0218 	bic.w	r2, r3, #24
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029d0:	4913      	ldr	r1, [pc, #76]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d017      	beq.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x650>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 80029e4:	4b0e      	ldr	r3, [pc, #56]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029e6:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80029ea:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029f4:	490a      	ldr	r1, [pc, #40]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80029f6:	4313      	orrs	r3, r2
 80029f8:	f8c1 309c 	str.w	r3, [r1, #156]	@ 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002a02:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002a06:	d105      	bne.n	8002a14 <HAL_RCCEx_PeriphCLKConfig+0x650>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a08:	4b05      	ldr	r3, [pc, #20]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	4a04      	ldr	r2, [pc, #16]	@ (8002a20 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002a0e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8002a12:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002a14:	7cbb      	ldrb	r3, [r7, #18]
}
 8002a16:	4618      	mov	r0, r3
 8002a18:	3718      	adds	r7, #24
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	bd80      	pop	{r7, pc}
 8002a1e:	bf00      	nop
 8002a20:	40021000 	.word	0x40021000

08002a24 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
 8002a2c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a32:	4b72      	ldr	r3, [pc, #456]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a34:	68db      	ldr	r3, [r3, #12]
 8002a36:	f003 0303 	and.w	r3, r3, #3
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d00e      	beq.n	8002a5c <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002a3e:	4b6f      	ldr	r3, [pc, #444]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	f003 0203 	and.w	r2, r3, #3
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	429a      	cmp	r2, r3
 8002a4c:	d103      	bne.n	8002a56 <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
       ||
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d142      	bne.n	8002adc <RCCEx_PLLSAI1_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	73fb      	strb	r3, [r7, #15]
 8002a5a:	e03f      	b.n	8002adc <RCCEx_PLLSAI1_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	2b03      	cmp	r3, #3
 8002a62:	d018      	beq.n	8002a96 <RCCEx_PLLSAI1_Config+0x72>
 8002a64:	2b03      	cmp	r3, #3
 8002a66:	d825      	bhi.n	8002ab4 <RCCEx_PLLSAI1_Config+0x90>
 8002a68:	2b01      	cmp	r3, #1
 8002a6a:	d002      	beq.n	8002a72 <RCCEx_PLLSAI1_Config+0x4e>
 8002a6c:	2b02      	cmp	r3, #2
 8002a6e:	d009      	beq.n	8002a84 <RCCEx_PLLSAI1_Config+0x60>
 8002a70:	e020      	b.n	8002ab4 <RCCEx_PLLSAI1_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a72:	4b62      	ldr	r3, [pc, #392]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f003 0302 	and.w	r3, r3, #2
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d11d      	bne.n	8002aba <RCCEx_PLLSAI1_Config+0x96>
      {
        status = HAL_ERROR;
 8002a7e:	2301      	movs	r3, #1
 8002a80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a82:	e01a      	b.n	8002aba <RCCEx_PLLSAI1_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002a84:	4b5d      	ldr	r3, [pc, #372]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d116      	bne.n	8002abe <RCCEx_PLLSAI1_Config+0x9a>
      {
        status = HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002a94:	e013      	b.n	8002abe <RCCEx_PLLSAI1_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002a96:	4b59      	ldr	r3, [pc, #356]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d10f      	bne.n	8002ac2 <RCCEx_PLLSAI1_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002aa2:	4b56      	ldr	r3, [pc, #344]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <RCCEx_PLLSAI1_Config+0x9e>
        {
          status = HAL_ERROR;
 8002aae:	2301      	movs	r3, #1
 8002ab0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002ab2:	e006      	b.n	8002ac2 <RCCEx_PLLSAI1_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
      break;
 8002ab8:	e004      	b.n	8002ac4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002aba:	bf00      	nop
 8002abc:	e002      	b.n	8002ac4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002abe:	bf00      	nop
 8002ac0:	e000      	b.n	8002ac4 <RCCEx_PLLSAI1_Config+0xa0>
      break;
 8002ac2:	bf00      	nop
    }

    if(status == HAL_OK)
 8002ac4:	7bfb      	ldrb	r3, [r7, #15]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d108      	bne.n	8002adc <RCCEx_PLLSAI1_Config+0xb8>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8002aca:	4b4c      	ldr	r3, [pc, #304]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002acc:	68db      	ldr	r3, [r3, #12]
 8002ace:	f023 0203 	bic.w	r2, r3, #3
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	4949      	ldr	r1, [pc, #292]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ad8:	4313      	orrs	r3, r2
 8002ada:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002adc:	7bfb      	ldrb	r3, [r7, #15]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	f040 8086 	bne.w	8002bf0 <RCCEx_PLLSAI1_Config+0x1cc>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002ae4:	4b45      	ldr	r3, [pc, #276]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	4a44      	ldr	r2, [pc, #272]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002aea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8002aee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002af0:	f7fe fa14 	bl	8000f1c <HAL_GetTick>
 8002af4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002af6:	e009      	b.n	8002b0c <RCCEx_PLLSAI1_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002af8:	f7fe fa10 	bl	8000f1c <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d902      	bls.n	8002b0c <RCCEx_PLLSAI1_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	73fb      	strb	r3, [r7, #15]
        break;
 8002b0a:	e005      	b.n	8002b18 <RCCEx_PLLSAI1_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002b0c:	4b3b      	ldr	r3, [pc, #236]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d1ef      	bne.n	8002af8 <RCCEx_PLLSAI1_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002b18:	7bfb      	ldrb	r3, [r7, #15]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d168      	bne.n	8002bf0 <RCCEx_PLLSAI1_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d113      	bne.n	8002b4c <RCCEx_PLLSAI1_Config+0x128>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b24:	4b35      	ldr	r3, [pc, #212]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b26:	691a      	ldr	r2, [r3, #16]
 8002b28:	4b35      	ldr	r3, [pc, #212]	@ (8002c00 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002b2a:	4013      	ands	r3, r2
 8002b2c:	687a      	ldr	r2, [r7, #4]
 8002b2e:	6892      	ldr	r2, [r2, #8]
 8002b30:	0211      	lsls	r1, r2, #8
 8002b32:	687a      	ldr	r2, [r7, #4]
 8002b34:	68d2      	ldr	r2, [r2, #12]
 8002b36:	06d2      	lsls	r2, r2, #27
 8002b38:	4311      	orrs	r1, r2
 8002b3a:	687a      	ldr	r2, [r7, #4]
 8002b3c:	6852      	ldr	r2, [r2, #4]
 8002b3e:	3a01      	subs	r2, #1
 8002b40:	0112      	lsls	r2, r2, #4
 8002b42:	430a      	orrs	r2, r1
 8002b44:	492d      	ldr	r1, [pc, #180]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	610b      	str	r3, [r1, #16]
 8002b4a:	e02d      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0x184>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	2b01      	cmp	r3, #1
 8002b50:	d115      	bne.n	8002b7e <RCCEx_PLLSAI1_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b52:	4b2a      	ldr	r3, [pc, #168]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b54:	691a      	ldr	r2, [r3, #16]
 8002b56:	4b2b      	ldr	r3, [pc, #172]	@ (8002c04 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002b58:	4013      	ands	r3, r2
 8002b5a:	687a      	ldr	r2, [r7, #4]
 8002b5c:	6892      	ldr	r2, [r2, #8]
 8002b5e:	0211      	lsls	r1, r2, #8
 8002b60:	687a      	ldr	r2, [r7, #4]
 8002b62:	6912      	ldr	r2, [r2, #16]
 8002b64:	0852      	lsrs	r2, r2, #1
 8002b66:	3a01      	subs	r2, #1
 8002b68:	0552      	lsls	r2, r2, #21
 8002b6a:	4311      	orrs	r1, r2
 8002b6c:	687a      	ldr	r2, [r7, #4]
 8002b6e:	6852      	ldr	r2, [r2, #4]
 8002b70:	3a01      	subs	r2, #1
 8002b72:	0112      	lsls	r2, r2, #4
 8002b74:	430a      	orrs	r2, r1
 8002b76:	4921      	ldr	r1, [pc, #132]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b78:	4313      	orrs	r3, r2
 8002b7a:	610b      	str	r3, [r1, #16]
 8002b7c:	e014      	b.n	8002ba8 <RCCEx_PLLSAI1_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002b7e:	4b1f      	ldr	r3, [pc, #124]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002b80:	691a      	ldr	r2, [r3, #16]
 8002b82:	4b21      	ldr	r3, [pc, #132]	@ (8002c08 <RCCEx_PLLSAI1_Config+0x1e4>)
 8002b84:	4013      	ands	r3, r2
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6892      	ldr	r2, [r2, #8]
 8002b8a:	0211      	lsls	r1, r2, #8
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6952      	ldr	r2, [r2, #20]
 8002b90:	0852      	lsrs	r2, r2, #1
 8002b92:	3a01      	subs	r2, #1
 8002b94:	0652      	lsls	r2, r2, #25
 8002b96:	4311      	orrs	r1, r2
 8002b98:	687a      	ldr	r2, [r7, #4]
 8002b9a:	6852      	ldr	r2, [r2, #4]
 8002b9c:	3a01      	subs	r2, #1
 8002b9e:	0112      	lsls	r2, r2, #4
 8002ba0:	430a      	orrs	r2, r1
 8002ba2:	4916      	ldr	r1, [pc, #88]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002ba8:	4b14      	ldr	r3, [pc, #80]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a13      	ldr	r2, [pc, #76]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bae:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8002bb2:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002bb4:	f7fe f9b2 	bl	8000f1c <HAL_GetTick>
 8002bb8:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bba:	e009      	b.n	8002bd0 <RCCEx_PLLSAI1_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002bbc:	f7fe f9ae 	bl	8000f1c <HAL_GetTick>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	2b02      	cmp	r3, #2
 8002bc8:	d902      	bls.n	8002bd0 <RCCEx_PLLSAI1_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	73fb      	strb	r3, [r7, #15]
          break;
 8002bce:	e005      	b.n	8002bdc <RCCEx_PLLSAI1_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d0ef      	beq.n	8002bbc <RCCEx_PLLSAI1_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002bdc:	7bfb      	ldrb	r3, [r7, #15]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d106      	bne.n	8002bf0 <RCCEx_PLLSAI1_Config+0x1cc>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002be2:	4b06      	ldr	r3, [pc, #24]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002be4:	691a      	ldr	r2, [r3, #16]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	699b      	ldr	r3, [r3, #24]
 8002bea:	4904      	ldr	r1, [pc, #16]	@ (8002bfc <RCCEx_PLLSAI1_Config+0x1d8>)
 8002bec:	4313      	orrs	r3, r2
 8002bee:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002bf0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}
 8002bfa:	bf00      	nop
 8002bfc:	40021000 	.word	0x40021000
 8002c00:	07ff800f 	.word	0x07ff800f
 8002c04:	ff9f800f 	.word	0xff9f800f
 8002c08:	f9ff800f 	.word	0xf9ff800f

08002c0c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b084      	sub	sp, #16
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
 8002c14:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002c1a:	4b72      	ldr	r3, [pc, #456]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c1c:	68db      	ldr	r3, [r3, #12]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00e      	beq.n	8002c44 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002c26:	4b6f      	ldr	r3, [pc, #444]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c28:	68db      	ldr	r3, [r3, #12]
 8002c2a:	f003 0203 	and.w	r2, r3, #3
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d103      	bne.n	8002c3e <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
       ||
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d142      	bne.n	8002cc4 <RCCEx_PLLSAI2_Config+0xb8>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	73fb      	strb	r3, [r7, #15]
 8002c42:	e03f      	b.n	8002cc4 <RCCEx_PLLSAI2_Config+0xb8>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	2b03      	cmp	r3, #3
 8002c4a:	d018      	beq.n	8002c7e <RCCEx_PLLSAI2_Config+0x72>
 8002c4c:	2b03      	cmp	r3, #3
 8002c4e:	d825      	bhi.n	8002c9c <RCCEx_PLLSAI2_Config+0x90>
 8002c50:	2b01      	cmp	r3, #1
 8002c52:	d002      	beq.n	8002c5a <RCCEx_PLLSAI2_Config+0x4e>
 8002c54:	2b02      	cmp	r3, #2
 8002c56:	d009      	beq.n	8002c6c <RCCEx_PLLSAI2_Config+0x60>
 8002c58:	e020      	b.n	8002c9c <RCCEx_PLLSAI2_Config+0x90>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002c5a:	4b62      	ldr	r3, [pc, #392]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f003 0302 	and.w	r3, r3, #2
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d11d      	bne.n	8002ca2 <RCCEx_PLLSAI2_Config+0x96>
      {
        status = HAL_ERROR;
 8002c66:	2301      	movs	r3, #1
 8002c68:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c6a:	e01a      	b.n	8002ca2 <RCCEx_PLLSAI2_Config+0x96>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c6c:	4b5d      	ldr	r3, [pc, #372]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d116      	bne.n	8002ca6 <RCCEx_PLLSAI2_Config+0x9a>
      {
        status = HAL_ERROR;
 8002c78:	2301      	movs	r3, #1
 8002c7a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c7c:	e013      	b.n	8002ca6 <RCCEx_PLLSAI2_Config+0x9a>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c7e:	4b59      	ldr	r3, [pc, #356]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d10f      	bne.n	8002caa <RCCEx_PLLSAI2_Config+0x9e>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c8a:	4b56      	ldr	r3, [pc, #344]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d109      	bne.n	8002caa <RCCEx_PLLSAI2_Config+0x9e>
        {
          status = HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c9a:	e006      	b.n	8002caa <RCCEx_PLLSAI2_Config+0x9e>
    default:
      status = HAL_ERROR;
 8002c9c:	2301      	movs	r3, #1
 8002c9e:	73fb      	strb	r3, [r7, #15]
      break;
 8002ca0:	e004      	b.n	8002cac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002ca2:	bf00      	nop
 8002ca4:	e002      	b.n	8002cac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002ca6:	bf00      	nop
 8002ca8:	e000      	b.n	8002cac <RCCEx_PLLSAI2_Config+0xa0>
      break;
 8002caa:	bf00      	nop
    }

    if(status == HAL_OK)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d108      	bne.n	8002cc4 <RCCEx_PLLSAI2_Config+0xb8>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8002cb2:	4b4c      	ldr	r3, [pc, #304]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	f023 0203 	bic.w	r2, r3, #3
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4949      	ldr	r1, [pc, #292]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cc0:	4313      	orrs	r3, r2
 8002cc2:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8002cc4:	7bfb      	ldrb	r3, [r7, #15]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	f040 8086 	bne.w	8002dd8 <RCCEx_PLLSAI2_Config+0x1cc>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002ccc:	4b45      	ldr	r3, [pc, #276]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	4a44      	ldr	r2, [pc, #272]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cd2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002cd6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cd8:	f7fe f920 	bl	8000f1c <HAL_GetTick>
 8002cdc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cde:	e009      	b.n	8002cf4 <RCCEx_PLLSAI2_Config+0xe8>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002ce0:	f7fe f91c 	bl	8000f1c <HAL_GetTick>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	68bb      	ldr	r3, [r7, #8]
 8002ce8:	1ad3      	subs	r3, r2, r3
 8002cea:	2b02      	cmp	r3, #2
 8002cec:	d902      	bls.n	8002cf4 <RCCEx_PLLSAI2_Config+0xe8>
      {
        status = HAL_TIMEOUT;
 8002cee:	2303      	movs	r3, #3
 8002cf0:	73fb      	strb	r3, [r7, #15]
        break;
 8002cf2:	e005      	b.n	8002d00 <RCCEx_PLLSAI2_Config+0xf4>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002cf4:	4b3b      	ldr	r3, [pc, #236]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d1ef      	bne.n	8002ce0 <RCCEx_PLLSAI2_Config+0xd4>
      }
    }

    if(status == HAL_OK)
 8002d00:	7bfb      	ldrb	r3, [r7, #15]
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d168      	bne.n	8002dd8 <RCCEx_PLLSAI2_Config+0x1cc>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d113      	bne.n	8002d34 <RCCEx_PLLSAI2_Config+0x128>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d0c:	4b35      	ldr	r3, [pc, #212]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d0e:	695a      	ldr	r2, [r3, #20]
 8002d10:	4b35      	ldr	r3, [pc, #212]	@ (8002de8 <RCCEx_PLLSAI2_Config+0x1dc>)
 8002d12:	4013      	ands	r3, r2
 8002d14:	687a      	ldr	r2, [r7, #4]
 8002d16:	6892      	ldr	r2, [r2, #8]
 8002d18:	0211      	lsls	r1, r2, #8
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	68d2      	ldr	r2, [r2, #12]
 8002d1e:	06d2      	lsls	r2, r2, #27
 8002d20:	4311      	orrs	r1, r2
 8002d22:	687a      	ldr	r2, [r7, #4]
 8002d24:	6852      	ldr	r2, [r2, #4]
 8002d26:	3a01      	subs	r2, #1
 8002d28:	0112      	lsls	r2, r2, #4
 8002d2a:	430a      	orrs	r2, r1
 8002d2c:	492d      	ldr	r1, [pc, #180]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d2e:	4313      	orrs	r3, r2
 8002d30:	614b      	str	r3, [r1, #20]
 8002d32:	e02d      	b.n	8002d90 <RCCEx_PLLSAI2_Config+0x184>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8002d34:	683b      	ldr	r3, [r7, #0]
 8002d36:	2b01      	cmp	r3, #1
 8002d38:	d115      	bne.n	8002d66 <RCCEx_PLLSAI2_Config+0x15a>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d3a:	4b2a      	ldr	r3, [pc, #168]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d3c:	695a      	ldr	r2, [r3, #20]
 8002d3e:	4b2b      	ldr	r3, [pc, #172]	@ (8002dec <RCCEx_PLLSAI2_Config+0x1e0>)
 8002d40:	4013      	ands	r3, r2
 8002d42:	687a      	ldr	r2, [r7, #4]
 8002d44:	6892      	ldr	r2, [r2, #8]
 8002d46:	0211      	lsls	r1, r2, #8
 8002d48:	687a      	ldr	r2, [r7, #4]
 8002d4a:	6912      	ldr	r2, [r2, #16]
 8002d4c:	0852      	lsrs	r2, r2, #1
 8002d4e:	3a01      	subs	r2, #1
 8002d50:	0552      	lsls	r2, r2, #21
 8002d52:	4311      	orrs	r1, r2
 8002d54:	687a      	ldr	r2, [r7, #4]
 8002d56:	6852      	ldr	r2, [r2, #4]
 8002d58:	3a01      	subs	r2, #1
 8002d5a:	0112      	lsls	r2, r2, #4
 8002d5c:	430a      	orrs	r2, r1
 8002d5e:	4921      	ldr	r1, [pc, #132]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d60:	4313      	orrs	r3, r2
 8002d62:	614b      	str	r3, [r1, #20]
 8002d64:	e014      	b.n	8002d90 <RCCEx_PLLSAI2_Config+0x184>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002d66:	4b1f      	ldr	r3, [pc, #124]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d68:	695a      	ldr	r2, [r3, #20]
 8002d6a:	4b21      	ldr	r3, [pc, #132]	@ (8002df0 <RCCEx_PLLSAI2_Config+0x1e4>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	687a      	ldr	r2, [r7, #4]
 8002d70:	6892      	ldr	r2, [r2, #8]
 8002d72:	0211      	lsls	r1, r2, #8
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6952      	ldr	r2, [r2, #20]
 8002d78:	0852      	lsrs	r2, r2, #1
 8002d7a:	3a01      	subs	r2, #1
 8002d7c:	0652      	lsls	r2, r2, #25
 8002d7e:	4311      	orrs	r1, r2
 8002d80:	687a      	ldr	r2, [r7, #4]
 8002d82:	6852      	ldr	r2, [r2, #4]
 8002d84:	3a01      	subs	r2, #1
 8002d86:	0112      	lsls	r2, r2, #4
 8002d88:	430a      	orrs	r2, r1
 8002d8a:	4916      	ldr	r1, [pc, #88]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d8c:	4313      	orrs	r3, r2
 8002d8e:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002d90:	4b14      	ldr	r3, [pc, #80]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	4a13      	ldr	r2, [pc, #76]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002d96:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d9a:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d9c:	f7fe f8be 	bl	8000f1c <HAL_GetTick>
 8002da0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002da2:	e009      	b.n	8002db8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002da4:	f7fe f8ba 	bl	8000f1c <HAL_GetTick>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68bb      	ldr	r3, [r7, #8]
 8002dac:	1ad3      	subs	r3, r2, r3
 8002dae:	2b02      	cmp	r3, #2
 8002db0:	d902      	bls.n	8002db8 <RCCEx_PLLSAI2_Config+0x1ac>
        {
          status = HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	73fb      	strb	r3, [r7, #15]
          break;
 8002db6:	e005      	b.n	8002dc4 <RCCEx_PLLSAI2_Config+0x1b8>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002db8:	4b0a      	ldr	r3, [pc, #40]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d0ef      	beq.n	8002da4 <RCCEx_PLLSAI2_Config+0x198>
        }
      }

      if(status == HAL_OK)
 8002dc4:	7bfb      	ldrb	r3, [r7, #15]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d106      	bne.n	8002dd8 <RCCEx_PLLSAI2_Config+0x1cc>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002dca:	4b06      	ldr	r3, [pc, #24]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dcc:	695a      	ldr	r2, [r3, #20]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	699b      	ldr	r3, [r3, #24]
 8002dd2:	4904      	ldr	r1, [pc, #16]	@ (8002de4 <RCCEx_PLLSAI2_Config+0x1d8>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002dd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	3710      	adds	r7, #16
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bd80      	pop	{r7, pc}
 8002de2:	bf00      	nop
 8002de4:	40021000 	.word	0x40021000
 8002de8:	07ff800f 	.word	0x07ff800f
 8002dec:	ff9f800f 	.word	0xff9f800f
 8002df0:	f9ff800f 	.word	0xf9ff800f

08002df4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b082      	sub	sp, #8
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002e02:	2301      	movs	r3, #1
 8002e04:	e042      	b.n	8002e8c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d106      	bne.n	8002e1e <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2200      	movs	r2, #0
 8002e14:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002e18:	6878      	ldr	r0, [r7, #4]
 8002e1a:	f7fd fea9 	bl	8000b70 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	2224      	movs	r2, #36	@ 0x24
 8002e22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	681a      	ldr	r2, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f022 0201 	bic.w	r2, r2, #1
 8002e34:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	f000 fbb2 	bl	80035a8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f000 f8b3 	bl	8002fb0 <UART_SetConfig>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8002e50:	2301      	movs	r3, #1
 8002e52:	e01b      	b.n	8002e8c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	685a      	ldr	r2, [r3, #4]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002e62:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	689a      	ldr	r2, [r3, #8]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002e72:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f042 0201 	orr.w	r2, r2, #1
 8002e82:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e84:	6878      	ldr	r0, [r7, #4]
 8002e86:	f000 fc31 	bl	80036ec <UART_CheckIdleState>
 8002e8a:	4603      	mov	r3, r0
}
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	3708      	adds	r7, #8
 8002e90:	46bd      	mov	sp, r7
 8002e92:	bd80      	pop	{r7, pc}

08002e94 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e94:	b580      	push	{r7, lr}
 8002e96:	b08a      	sub	sp, #40	@ 0x28
 8002e98:	af02      	add	r7, sp, #8
 8002e9a:	60f8      	str	r0, [r7, #12]
 8002e9c:	60b9      	str	r1, [r7, #8]
 8002e9e:	603b      	str	r3, [r7, #0]
 8002ea0:	4613      	mov	r3, r2
 8002ea2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eaa:	2b20      	cmp	r3, #32
 8002eac:	d17b      	bne.n	8002fa6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8002eae:	68bb      	ldr	r3, [r7, #8]
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d002      	beq.n	8002eba <HAL_UART_Transmit+0x26>
 8002eb4:	88fb      	ldrh	r3, [r7, #6]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d101      	bne.n	8002ebe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e074      	b.n	8002fa8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	2200      	movs	r2, #0
 8002ec2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2221      	movs	r2, #33	@ 0x21
 8002eca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ece:	f7fe f825 	bl	8000f1c <HAL_GetTick>
 8002ed2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	88fa      	ldrh	r2, [r7, #6]
 8002ed8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	88fa      	ldrh	r2, [r7, #6]
 8002ee0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eec:	d108      	bne.n	8002f00 <HAL_UART_Transmit+0x6c>
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	691b      	ldr	r3, [r3, #16]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d104      	bne.n	8002f00 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002efa:	68bb      	ldr	r3, [r7, #8]
 8002efc:	61bb      	str	r3, [r7, #24]
 8002efe:	e003      	b.n	8002f08 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002f04:	2300      	movs	r3, #0
 8002f06:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002f08:	e030      	b.n	8002f6c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002f0a:	683b      	ldr	r3, [r7, #0]
 8002f0c:	9300      	str	r3, [sp, #0]
 8002f0e:	697b      	ldr	r3, [r7, #20]
 8002f10:	2200      	movs	r2, #0
 8002f12:	2180      	movs	r1, #128	@ 0x80
 8002f14:	68f8      	ldr	r0, [r7, #12]
 8002f16:	f000 fc93 	bl	8003840 <UART_WaitOnFlagUntilTimeout>
 8002f1a:	4603      	mov	r3, r0
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d005      	beq.n	8002f2c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	2220      	movs	r2, #32
 8002f24:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8002f28:	2303      	movs	r3, #3
 8002f2a:	e03d      	b.n	8002fa8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8002f2c:	69fb      	ldr	r3, [r7, #28]
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d10b      	bne.n	8002f4a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002f32:	69bb      	ldr	r3, [r7, #24]
 8002f34:	881a      	ldrh	r2, [r3, #0]
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f3e:	b292      	uxth	r2, r2
 8002f40:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8002f42:	69bb      	ldr	r3, [r7, #24]
 8002f44:	3302      	adds	r3, #2
 8002f46:	61bb      	str	r3, [r7, #24]
 8002f48:	e007      	b.n	8002f5a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f4a:	69fb      	ldr	r3, [r7, #28]
 8002f4c:	781a      	ldrb	r2, [r3, #0]
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8002f54:	69fb      	ldr	r3, [r7, #28]
 8002f56:	3301      	adds	r3, #1
 8002f58:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002f60:	b29b      	uxth	r3, r3
 8002f62:	3b01      	subs	r3, #1
 8002f64:	b29a      	uxth	r2, r3
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8002f72:	b29b      	uxth	r3, r3
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1c8      	bne.n	8002f0a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	9300      	str	r3, [sp, #0]
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	2200      	movs	r2, #0
 8002f80:	2140      	movs	r1, #64	@ 0x40
 8002f82:	68f8      	ldr	r0, [r7, #12]
 8002f84:	f000 fc5c 	bl	8003840 <UART_WaitOnFlagUntilTimeout>
 8002f88:	4603      	mov	r3, r0
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d005      	beq.n	8002f9a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2220      	movs	r2, #32
 8002f92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e006      	b.n	8002fa8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2220      	movs	r2, #32
 8002f9e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8002fa2:	2300      	movs	r3, #0
 8002fa4:	e000      	b.n	8002fa8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8002fa6:	2302      	movs	r3, #2
  }
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	3720      	adds	r7, #32
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd80      	pop	{r7, pc}

08002fb0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb4:	b08c      	sub	sp, #48	@ 0x30
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	689a      	ldr	r2, [r3, #8]
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	431a      	orrs	r2, r3
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	695b      	ldr	r3, [r3, #20]
 8002fce:	431a      	orrs	r2, r3
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	69db      	ldr	r3, [r3, #28]
 8002fd4:	4313      	orrs	r3, r2
 8002fd6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fd8:	697b      	ldr	r3, [r7, #20]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	4baa      	ldr	r3, [pc, #680]	@ (8003288 <UART_SetConfig+0x2d8>)
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	697a      	ldr	r2, [r7, #20]
 8002fe4:	6812      	ldr	r2, [r2, #0]
 8002fe6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002fe8:	430b      	orrs	r3, r1
 8002fea:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002fec:	697b      	ldr	r3, [r7, #20]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8002ff6:	697b      	ldr	r3, [r7, #20]
 8002ff8:	68da      	ldr	r2, [r3, #12]
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	430a      	orrs	r2, r1
 8003000:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003002:	697b      	ldr	r3, [r7, #20]
 8003004:	699b      	ldr	r3, [r3, #24]
 8003006:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a9f      	ldr	r2, [pc, #636]	@ (800328c <UART_SetConfig+0x2dc>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d004      	beq.n	800301c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	6a1b      	ldr	r3, [r3, #32]
 8003016:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003018:	4313      	orrs	r3, r2
 800301a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8003026:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	6812      	ldr	r2, [r2, #0]
 800302e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003030:	430b      	orrs	r3, r1
 8003032:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800303a:	f023 010f 	bic.w	r1, r3, #15
 800303e:	697b      	ldr	r3, [r7, #20]
 8003040:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8003042:	697b      	ldr	r3, [r7, #20]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	430a      	orrs	r2, r1
 8003048:	62da      	str	r2, [r3, #44]	@ 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800304a:	697b      	ldr	r3, [r7, #20]
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a90      	ldr	r2, [pc, #576]	@ (8003290 <UART_SetConfig+0x2e0>)
 8003050:	4293      	cmp	r3, r2
 8003052:	d125      	bne.n	80030a0 <UART_SetConfig+0xf0>
 8003054:	4b8f      	ldr	r3, [pc, #572]	@ (8003294 <UART_SetConfig+0x2e4>)
 8003056:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800305a:	f003 0303 	and.w	r3, r3, #3
 800305e:	2b03      	cmp	r3, #3
 8003060:	d81a      	bhi.n	8003098 <UART_SetConfig+0xe8>
 8003062:	a201      	add	r2, pc, #4	@ (adr r2, 8003068 <UART_SetConfig+0xb8>)
 8003064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003068:	08003079 	.word	0x08003079
 800306c:	08003089 	.word	0x08003089
 8003070:	08003081 	.word	0x08003081
 8003074:	08003091 	.word	0x08003091
 8003078:	2301      	movs	r3, #1
 800307a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800307e:	e116      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003080:	2302      	movs	r3, #2
 8003082:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003086:	e112      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003088:	2304      	movs	r3, #4
 800308a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800308e:	e10e      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003090:	2308      	movs	r3, #8
 8003092:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003096:	e10a      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003098:	2310      	movs	r3, #16
 800309a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800309e:	e106      	b.n	80032ae <UART_SetConfig+0x2fe>
 80030a0:	697b      	ldr	r3, [r7, #20]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4a7c      	ldr	r2, [pc, #496]	@ (8003298 <UART_SetConfig+0x2e8>)
 80030a6:	4293      	cmp	r3, r2
 80030a8:	d138      	bne.n	800311c <UART_SetConfig+0x16c>
 80030aa:	4b7a      	ldr	r3, [pc, #488]	@ (8003294 <UART_SetConfig+0x2e4>)
 80030ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80030b0:	f003 030c 	and.w	r3, r3, #12
 80030b4:	2b0c      	cmp	r3, #12
 80030b6:	d82d      	bhi.n	8003114 <UART_SetConfig+0x164>
 80030b8:	a201      	add	r2, pc, #4	@ (adr r2, 80030c0 <UART_SetConfig+0x110>)
 80030ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030be:	bf00      	nop
 80030c0:	080030f5 	.word	0x080030f5
 80030c4:	08003115 	.word	0x08003115
 80030c8:	08003115 	.word	0x08003115
 80030cc:	08003115 	.word	0x08003115
 80030d0:	08003105 	.word	0x08003105
 80030d4:	08003115 	.word	0x08003115
 80030d8:	08003115 	.word	0x08003115
 80030dc:	08003115 	.word	0x08003115
 80030e0:	080030fd 	.word	0x080030fd
 80030e4:	08003115 	.word	0x08003115
 80030e8:	08003115 	.word	0x08003115
 80030ec:	08003115 	.word	0x08003115
 80030f0:	0800310d 	.word	0x0800310d
 80030f4:	2300      	movs	r3, #0
 80030f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80030fa:	e0d8      	b.n	80032ae <UART_SetConfig+0x2fe>
 80030fc:	2302      	movs	r3, #2
 80030fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003102:	e0d4      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003104:	2304      	movs	r3, #4
 8003106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800310a:	e0d0      	b.n	80032ae <UART_SetConfig+0x2fe>
 800310c:	2308      	movs	r3, #8
 800310e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003112:	e0cc      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003114:	2310      	movs	r3, #16
 8003116:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800311a:	e0c8      	b.n	80032ae <UART_SetConfig+0x2fe>
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a5e      	ldr	r2, [pc, #376]	@ (800329c <UART_SetConfig+0x2ec>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d125      	bne.n	8003172 <UART_SetConfig+0x1c2>
 8003126:	4b5b      	ldr	r3, [pc, #364]	@ (8003294 <UART_SetConfig+0x2e4>)
 8003128:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8003130:	2b30      	cmp	r3, #48	@ 0x30
 8003132:	d016      	beq.n	8003162 <UART_SetConfig+0x1b2>
 8003134:	2b30      	cmp	r3, #48	@ 0x30
 8003136:	d818      	bhi.n	800316a <UART_SetConfig+0x1ba>
 8003138:	2b20      	cmp	r3, #32
 800313a:	d00a      	beq.n	8003152 <UART_SetConfig+0x1a2>
 800313c:	2b20      	cmp	r3, #32
 800313e:	d814      	bhi.n	800316a <UART_SetConfig+0x1ba>
 8003140:	2b00      	cmp	r3, #0
 8003142:	d002      	beq.n	800314a <UART_SetConfig+0x19a>
 8003144:	2b10      	cmp	r3, #16
 8003146:	d008      	beq.n	800315a <UART_SetConfig+0x1aa>
 8003148:	e00f      	b.n	800316a <UART_SetConfig+0x1ba>
 800314a:	2300      	movs	r3, #0
 800314c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003150:	e0ad      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003152:	2302      	movs	r3, #2
 8003154:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003158:	e0a9      	b.n	80032ae <UART_SetConfig+0x2fe>
 800315a:	2304      	movs	r3, #4
 800315c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003160:	e0a5      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003162:	2308      	movs	r3, #8
 8003164:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003168:	e0a1      	b.n	80032ae <UART_SetConfig+0x2fe>
 800316a:	2310      	movs	r3, #16
 800316c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003170:	e09d      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	4a4a      	ldr	r2, [pc, #296]	@ (80032a0 <UART_SetConfig+0x2f0>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d125      	bne.n	80031c8 <UART_SetConfig+0x218>
 800317c:	4b45      	ldr	r3, [pc, #276]	@ (8003294 <UART_SetConfig+0x2e4>)
 800317e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003182:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8003186:	2bc0      	cmp	r3, #192	@ 0xc0
 8003188:	d016      	beq.n	80031b8 <UART_SetConfig+0x208>
 800318a:	2bc0      	cmp	r3, #192	@ 0xc0
 800318c:	d818      	bhi.n	80031c0 <UART_SetConfig+0x210>
 800318e:	2b80      	cmp	r3, #128	@ 0x80
 8003190:	d00a      	beq.n	80031a8 <UART_SetConfig+0x1f8>
 8003192:	2b80      	cmp	r3, #128	@ 0x80
 8003194:	d814      	bhi.n	80031c0 <UART_SetConfig+0x210>
 8003196:	2b00      	cmp	r3, #0
 8003198:	d002      	beq.n	80031a0 <UART_SetConfig+0x1f0>
 800319a:	2b40      	cmp	r3, #64	@ 0x40
 800319c:	d008      	beq.n	80031b0 <UART_SetConfig+0x200>
 800319e:	e00f      	b.n	80031c0 <UART_SetConfig+0x210>
 80031a0:	2300      	movs	r3, #0
 80031a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031a6:	e082      	b.n	80032ae <UART_SetConfig+0x2fe>
 80031a8:	2302      	movs	r3, #2
 80031aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031ae:	e07e      	b.n	80032ae <UART_SetConfig+0x2fe>
 80031b0:	2304      	movs	r3, #4
 80031b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031b6:	e07a      	b.n	80032ae <UART_SetConfig+0x2fe>
 80031b8:	2308      	movs	r3, #8
 80031ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031be:	e076      	b.n	80032ae <UART_SetConfig+0x2fe>
 80031c0:	2310      	movs	r3, #16
 80031c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031c6:	e072      	b.n	80032ae <UART_SetConfig+0x2fe>
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a35      	ldr	r2, [pc, #212]	@ (80032a4 <UART_SetConfig+0x2f4>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d12a      	bne.n	8003228 <UART_SetConfig+0x278>
 80031d2:	4b30      	ldr	r3, [pc, #192]	@ (8003294 <UART_SetConfig+0x2e4>)
 80031d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80031d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031dc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031e0:	d01a      	beq.n	8003218 <UART_SetConfig+0x268>
 80031e2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80031e6:	d81b      	bhi.n	8003220 <UART_SetConfig+0x270>
 80031e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031ec:	d00c      	beq.n	8003208 <UART_SetConfig+0x258>
 80031ee:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80031f2:	d815      	bhi.n	8003220 <UART_SetConfig+0x270>
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d003      	beq.n	8003200 <UART_SetConfig+0x250>
 80031f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80031fc:	d008      	beq.n	8003210 <UART_SetConfig+0x260>
 80031fe:	e00f      	b.n	8003220 <UART_SetConfig+0x270>
 8003200:	2300      	movs	r3, #0
 8003202:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003206:	e052      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003208:	2302      	movs	r3, #2
 800320a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800320e:	e04e      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003210:	2304      	movs	r3, #4
 8003212:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003216:	e04a      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003218:	2308      	movs	r3, #8
 800321a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800321e:	e046      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003220:	2310      	movs	r3, #16
 8003222:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003226:	e042      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	4a17      	ldr	r2, [pc, #92]	@ (800328c <UART_SetConfig+0x2dc>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d13a      	bne.n	80032a8 <UART_SetConfig+0x2f8>
 8003232:	4b18      	ldr	r3, [pc, #96]	@ (8003294 <UART_SetConfig+0x2e4>)
 8003234:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003238:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800323c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003240:	d01a      	beq.n	8003278 <UART_SetConfig+0x2c8>
 8003242:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003246:	d81b      	bhi.n	8003280 <UART_SetConfig+0x2d0>
 8003248:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800324c:	d00c      	beq.n	8003268 <UART_SetConfig+0x2b8>
 800324e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003252:	d815      	bhi.n	8003280 <UART_SetConfig+0x2d0>
 8003254:	2b00      	cmp	r3, #0
 8003256:	d003      	beq.n	8003260 <UART_SetConfig+0x2b0>
 8003258:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325c:	d008      	beq.n	8003270 <UART_SetConfig+0x2c0>
 800325e:	e00f      	b.n	8003280 <UART_SetConfig+0x2d0>
 8003260:	2300      	movs	r3, #0
 8003262:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003266:	e022      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003268:	2302      	movs	r3, #2
 800326a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800326e:	e01e      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003270:	2304      	movs	r3, #4
 8003272:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003276:	e01a      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003278:	2308      	movs	r3, #8
 800327a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800327e:	e016      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003280:	2310      	movs	r3, #16
 8003282:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8003286:	e012      	b.n	80032ae <UART_SetConfig+0x2fe>
 8003288:	cfff69f3 	.word	0xcfff69f3
 800328c:	40008000 	.word	0x40008000
 8003290:	40013800 	.word	0x40013800
 8003294:	40021000 	.word	0x40021000
 8003298:	40004400 	.word	0x40004400
 800329c:	40004800 	.word	0x40004800
 80032a0:	40004c00 	.word	0x40004c00
 80032a4:	40005000 	.word	0x40005000
 80032a8:	2310      	movs	r3, #16
 80032aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80032ae:	697b      	ldr	r3, [r7, #20]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	4aae      	ldr	r2, [pc, #696]	@ (800356c <UART_SetConfig+0x5bc>)
 80032b4:	4293      	cmp	r3, r2
 80032b6:	f040 8097 	bne.w	80033e8 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80032ba:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d823      	bhi.n	800330a <UART_SetConfig+0x35a>
 80032c2:	a201      	add	r2, pc, #4	@ (adr r2, 80032c8 <UART_SetConfig+0x318>)
 80032c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c8:	080032ed 	.word	0x080032ed
 80032cc:	0800330b 	.word	0x0800330b
 80032d0:	080032f5 	.word	0x080032f5
 80032d4:	0800330b 	.word	0x0800330b
 80032d8:	080032fb 	.word	0x080032fb
 80032dc:	0800330b 	.word	0x0800330b
 80032e0:	0800330b 	.word	0x0800330b
 80032e4:	0800330b 	.word	0x0800330b
 80032e8:	08003303 	.word	0x08003303
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ec:	f7fe ff7e 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 80032f0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80032f2:	e010      	b.n	8003316 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032f4:	4b9e      	ldr	r3, [pc, #632]	@ (8003570 <UART_SetConfig+0x5c0>)
 80032f6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80032f8:	e00d      	b.n	8003316 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032fa:	f7fe fedf 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 80032fe:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003300:	e009      	b.n	8003316 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003302:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003306:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003308:	e005      	b.n	8003316 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800330a:	2300      	movs	r3, #0
 800330c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003314:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003318:	2b00      	cmp	r3, #0
 800331a:	f000 8130 	beq.w	800357e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	4a94      	ldr	r2, [pc, #592]	@ (8003574 <UART_SetConfig+0x5c4>)
 8003324:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003328:	461a      	mov	r2, r3
 800332a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800332c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003330:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003332:	697b      	ldr	r3, [r7, #20]
 8003334:	685a      	ldr	r2, [r3, #4]
 8003336:	4613      	mov	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	69ba      	ldr	r2, [r7, #24]
 800333e:	429a      	cmp	r2, r3
 8003340:	d305      	bcc.n	800334e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8003342:	697b      	ldr	r3, [r7, #20]
 8003344:	685b      	ldr	r3, [r3, #4]
 8003346:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	429a      	cmp	r2, r3
 800334c:	d903      	bls.n	8003356 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8003354:	e113      	b.n	800357e <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8003356:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003358:	2200      	movs	r2, #0
 800335a:	60bb      	str	r3, [r7, #8]
 800335c:	60fa      	str	r2, [r7, #12]
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003362:	4a84      	ldr	r2, [pc, #528]	@ (8003574 <UART_SetConfig+0x5c4>)
 8003364:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003368:	b29b      	uxth	r3, r3
 800336a:	2200      	movs	r2, #0
 800336c:	603b      	str	r3, [r7, #0]
 800336e:	607a      	str	r2, [r7, #4]
 8003370:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003374:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003378:	f7fc ff40 	bl	80001fc <__aeabi_uldivmod>
 800337c:	4602      	mov	r2, r0
 800337e:	460b      	mov	r3, r1
 8003380:	4610      	mov	r0, r2
 8003382:	4619      	mov	r1, r3
 8003384:	f04f 0200 	mov.w	r2, #0
 8003388:	f04f 0300 	mov.w	r3, #0
 800338c:	020b      	lsls	r3, r1, #8
 800338e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8003392:	0202      	lsls	r2, r0, #8
 8003394:	6979      	ldr	r1, [r7, #20]
 8003396:	6849      	ldr	r1, [r1, #4]
 8003398:	0849      	lsrs	r1, r1, #1
 800339a:	2000      	movs	r0, #0
 800339c:	460c      	mov	r4, r1
 800339e:	4605      	mov	r5, r0
 80033a0:	eb12 0804 	adds.w	r8, r2, r4
 80033a4:	eb43 0905 	adc.w	r9, r3, r5
 80033a8:	697b      	ldr	r3, [r7, #20]
 80033aa:	685b      	ldr	r3, [r3, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	469a      	mov	sl, r3
 80033b0:	4693      	mov	fp, r2
 80033b2:	4652      	mov	r2, sl
 80033b4:	465b      	mov	r3, fp
 80033b6:	4640      	mov	r0, r8
 80033b8:	4649      	mov	r1, r9
 80033ba:	f7fc ff1f 	bl	80001fc <__aeabi_uldivmod>
 80033be:	4602      	mov	r2, r0
 80033c0:	460b      	mov	r3, r1
 80033c2:	4613      	mov	r3, r2
 80033c4:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80033c6:	6a3b      	ldr	r3, [r7, #32]
 80033c8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80033cc:	d308      	bcc.n	80033e0 <UART_SetConfig+0x430>
 80033ce:	6a3b      	ldr	r3, [r7, #32]
 80033d0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80033d4:	d204      	bcs.n	80033e0 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80033d6:	697b      	ldr	r3, [r7, #20]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	6a3a      	ldr	r2, [r7, #32]
 80033dc:	60da      	str	r2, [r3, #12]
 80033de:	e0ce      	b.n	800357e <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80033e6:	e0ca      	b.n	800357e <UART_SetConfig+0x5ce>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80033e8:	697b      	ldr	r3, [r7, #20]
 80033ea:	69db      	ldr	r3, [r3, #28]
 80033ec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033f0:	d166      	bne.n	80034c0 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80033f2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80033f6:	2b08      	cmp	r3, #8
 80033f8:	d827      	bhi.n	800344a <UART_SetConfig+0x49a>
 80033fa:	a201      	add	r2, pc, #4	@ (adr r2, 8003400 <UART_SetConfig+0x450>)
 80033fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003400:	08003425 	.word	0x08003425
 8003404:	0800342d 	.word	0x0800342d
 8003408:	08003435 	.word	0x08003435
 800340c:	0800344b 	.word	0x0800344b
 8003410:	0800343b 	.word	0x0800343b
 8003414:	0800344b 	.word	0x0800344b
 8003418:	0800344b 	.word	0x0800344b
 800341c:	0800344b 	.word	0x0800344b
 8003420:	08003443 	.word	0x08003443
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003424:	f7fe fee2 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 8003428:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800342a:	e014      	b.n	8003456 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800342c:	f7fe fef4 	bl	8002218 <HAL_RCC_GetPCLK2Freq>
 8003430:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003432:	e010      	b.n	8003456 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003434:	4b4e      	ldr	r3, [pc, #312]	@ (8003570 <UART_SetConfig+0x5c0>)
 8003436:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003438:	e00d      	b.n	8003456 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800343a:	f7fe fe3f 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 800343e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003440:	e009      	b.n	8003456 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003442:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003446:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003448:	e005      	b.n	8003456 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800344a:	2300      	movs	r3, #0
 800344c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800344e:	2301      	movs	r3, #1
 8003450:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003454:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003456:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003458:	2b00      	cmp	r3, #0
 800345a:	f000 8090 	beq.w	800357e <UART_SetConfig+0x5ce>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800345e:	697b      	ldr	r3, [r7, #20]
 8003460:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003462:	4a44      	ldr	r2, [pc, #272]	@ (8003574 <UART_SetConfig+0x5c4>)
 8003464:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003468:	461a      	mov	r2, r3
 800346a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800346c:	fbb3 f3f2 	udiv	r3, r3, r2
 8003470:	005a      	lsls	r2, r3, #1
 8003472:	697b      	ldr	r3, [r7, #20]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	085b      	lsrs	r3, r3, #1
 8003478:	441a      	add	r2, r3
 800347a:	697b      	ldr	r3, [r7, #20]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003482:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003484:	6a3b      	ldr	r3, [r7, #32]
 8003486:	2b0f      	cmp	r3, #15
 8003488:	d916      	bls.n	80034b8 <UART_SetConfig+0x508>
 800348a:	6a3b      	ldr	r3, [r7, #32]
 800348c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003490:	d212      	bcs.n	80034b8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003492:	6a3b      	ldr	r3, [r7, #32]
 8003494:	b29b      	uxth	r3, r3
 8003496:	f023 030f 	bic.w	r3, r3, #15
 800349a:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800349c:	6a3b      	ldr	r3, [r7, #32]
 800349e:	085b      	lsrs	r3, r3, #1
 80034a0:	b29b      	uxth	r3, r3
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	b29a      	uxth	r2, r3
 80034a8:	8bfb      	ldrh	r3, [r7, #30]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80034ae:	697b      	ldr	r3, [r7, #20]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	8bfa      	ldrh	r2, [r7, #30]
 80034b4:	60da      	str	r2, [r3, #12]
 80034b6:	e062      	b.n	800357e <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80034b8:	2301      	movs	r3, #1
 80034ba:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80034be:	e05e      	b.n	800357e <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 80034c0:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80034c4:	2b08      	cmp	r3, #8
 80034c6:	d828      	bhi.n	800351a <UART_SetConfig+0x56a>
 80034c8:	a201      	add	r2, pc, #4	@ (adr r2, 80034d0 <UART_SetConfig+0x520>)
 80034ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80034ce:	bf00      	nop
 80034d0:	080034f5 	.word	0x080034f5
 80034d4:	080034fd 	.word	0x080034fd
 80034d8:	08003505 	.word	0x08003505
 80034dc:	0800351b 	.word	0x0800351b
 80034e0:	0800350b 	.word	0x0800350b
 80034e4:	0800351b 	.word	0x0800351b
 80034e8:	0800351b 	.word	0x0800351b
 80034ec:	0800351b 	.word	0x0800351b
 80034f0:	08003513 	.word	0x08003513
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80034f4:	f7fe fe7a 	bl	80021ec <HAL_RCC_GetPCLK1Freq>
 80034f8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80034fa:	e014      	b.n	8003526 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80034fc:	f7fe fe8c 	bl	8002218 <HAL_RCC_GetPCLK2Freq>
 8003500:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003502:	e010      	b.n	8003526 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003504:	4b1a      	ldr	r3, [pc, #104]	@ (8003570 <UART_SetConfig+0x5c0>)
 8003506:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003508:	e00d      	b.n	8003526 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800350a:	f7fe fdd7 	bl	80020bc <HAL_RCC_GetSysClockFreq>
 800350e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8003510:	e009      	b.n	8003526 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003512:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003516:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8003518:	e005      	b.n	8003526 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 800351a:	2300      	movs	r3, #0
 800351c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800351e:	2301      	movs	r3, #1
 8003520:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8003524:	bf00      	nop
    }

    if (pclk != 0U)
 8003526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003528:	2b00      	cmp	r3, #0
 800352a:	d028      	beq.n	800357e <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003530:	4a10      	ldr	r2, [pc, #64]	@ (8003574 <UART_SetConfig+0x5c4>)
 8003532:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8003536:	461a      	mov	r2, r3
 8003538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800353a:	fbb3 f2f2 	udiv	r2, r3, r2
 800353e:	697b      	ldr	r3, [r7, #20]
 8003540:	685b      	ldr	r3, [r3, #4]
 8003542:	085b      	lsrs	r3, r3, #1
 8003544:	441a      	add	r2, r3
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	685b      	ldr	r3, [r3, #4]
 800354a:	fbb2 f3f3 	udiv	r3, r2, r3
 800354e:	623b      	str	r3, [r7, #32]
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003550:	6a3b      	ldr	r3, [r7, #32]
 8003552:	2b0f      	cmp	r3, #15
 8003554:	d910      	bls.n	8003578 <UART_SetConfig+0x5c8>
 8003556:	6a3b      	ldr	r3, [r7, #32]
 8003558:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800355c:	d20c      	bcs.n	8003578 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800355e:	6a3b      	ldr	r3, [r7, #32]
 8003560:	b29a      	uxth	r2, r3
 8003562:	697b      	ldr	r3, [r7, #20]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	60da      	str	r2, [r3, #12]
 8003568:	e009      	b.n	800357e <UART_SetConfig+0x5ce>
 800356a:	bf00      	nop
 800356c:	40008000 	.word	0x40008000
 8003570:	00f42400 	.word	0x00f42400
 8003574:	080045b4 	.word	0x080045b4
      }
      else
      {
        ret = HAL_ERROR;
 8003578:	2301      	movs	r3, #1
 800357a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800357e:	697b      	ldr	r3, [r7, #20]
 8003580:	2201      	movs	r2, #1
 8003582:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2201      	movs	r2, #1
 800358a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800358e:	697b      	ldr	r3, [r7, #20]
 8003590:	2200      	movs	r2, #0
 8003592:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8003594:	697b      	ldr	r3, [r7, #20]
 8003596:	2200      	movs	r2, #0
 8003598:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 800359a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800359e:	4618      	mov	r0, r3
 80035a0:	3730      	adds	r7, #48	@ 0x30
 80035a2:	46bd      	mov	sp, r7
 80035a4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080035a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80035a8:	b480      	push	{r7}
 80035aa:	b083      	sub	sp, #12
 80035ac:	af00      	add	r7, sp, #0
 80035ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	430a      	orrs	r2, r1
 80035d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035d6:	f003 0301 	and.w	r3, r3, #1
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	685b      	ldr	r3, [r3, #4]
 80035e4:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	430a      	orrs	r2, r1
 80035f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80035f8:	f003 0302 	and.w	r3, r3, #2
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	430a      	orrs	r2, r1
 8003614:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800361a:	f003 0304 	and.w	r3, r3, #4
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	430a      	orrs	r2, r1
 8003636:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800363c:	f003 0310 	and.w	r3, r3, #16
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	430a      	orrs	r2, r1
 8003658:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800365e:	f003 0320 	and.w	r3, r3, #32
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689b      	ldr	r3, [r3, #8]
 800366c:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	430a      	orrs	r2, r1
 800367a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003680:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003684:	2b00      	cmp	r3, #0
 8003686:	d01a      	beq.n	80036be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	430a      	orrs	r2, r1
 800369c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80036a6:	d10a      	bne.n	80036be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	430a      	orrs	r2, r1
 80036bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80036c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d00a      	beq.n	80036e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	685b      	ldr	r3, [r3, #4]
 80036d0:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	430a      	orrs	r2, r1
 80036de:	605a      	str	r2, [r3, #4]
  }
}
 80036e0:	bf00      	nop
 80036e2:	370c      	adds	r7, #12
 80036e4:	46bd      	mov	sp, r7
 80036e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ea:	4770      	bx	lr

080036ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80036ec:	b580      	push	{r7, lr}
 80036ee:	b098      	sub	sp, #96	@ 0x60
 80036f0:	af02      	add	r7, sp, #8
 80036f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2200      	movs	r2, #0
 80036f8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80036fc:	f7fd fc0e 	bl	8000f1c <HAL_GetTick>
 8003700:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	f003 0308 	and.w	r3, r3, #8
 800370c:	2b08      	cmp	r3, #8
 800370e:	d12f      	bne.n	8003770 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003710:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003714:	9300      	str	r3, [sp, #0]
 8003716:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003718:	2200      	movs	r2, #0
 800371a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800371e:	6878      	ldr	r0, [r7, #4]
 8003720:	f000 f88e 	bl	8003840 <UART_WaitOnFlagUntilTimeout>
 8003724:	4603      	mov	r3, r0
 8003726:	2b00      	cmp	r3, #0
 8003728:	d022      	beq.n	8003770 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003732:	e853 3f00 	ldrex	r3, [r3]
 8003736:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003738:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800373a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800373e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	461a      	mov	r2, r3
 8003746:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003748:	647b      	str	r3, [r7, #68]	@ 0x44
 800374a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800374c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800374e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003750:	e841 2300 	strex	r3, r2, [r1]
 8003754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003756:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003758:	2b00      	cmp	r3, #0
 800375a:	d1e6      	bne.n	800372a <UART_CheckIdleState+0x3e>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2220      	movs	r2, #32
 8003760:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800376c:	2303      	movs	r3, #3
 800376e:	e063      	b.n	8003838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	2b04      	cmp	r3, #4
 800377c:	d149      	bne.n	8003812 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800377e:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8003782:	9300      	str	r3, [sp, #0]
 8003784:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8003786:	2200      	movs	r2, #0
 8003788:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f000 f857 	bl	8003840 <UART_WaitOnFlagUntilTimeout>
 8003792:	4603      	mov	r3, r0
 8003794:	2b00      	cmp	r3, #0
 8003796:	d03c      	beq.n	8003812 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800379e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037a0:	e853 3f00 	ldrex	r3, [r3]
 80037a4:	623b      	str	r3, [r7, #32]
   return(result);
 80037a6:	6a3b      	ldr	r3, [r7, #32]
 80037a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80037ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	461a      	mov	r2, r3
 80037b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037b6:	633b      	str	r3, [r7, #48]	@ 0x30
 80037b8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80037bc:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037be:	e841 2300 	strex	r3, r2, [r1]
 80037c2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80037c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1e6      	bne.n	8003798 <UART_CheckIdleState+0xac>
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	3308      	adds	r3, #8
 80037d0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037d2:	693b      	ldr	r3, [r7, #16]
 80037d4:	e853 3f00 	ldrex	r3, [r3]
 80037d8:	60fb      	str	r3, [r7, #12]
   return(result);
 80037da:	68fb      	ldr	r3, [r7, #12]
 80037dc:	f023 0301 	bic.w	r3, r3, #1
 80037e0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	3308      	adds	r3, #8
 80037e8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80037ea:	61fa      	str	r2, [r7, #28]
 80037ec:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037ee:	69b9      	ldr	r1, [r7, #24]
 80037f0:	69fa      	ldr	r2, [r7, #28]
 80037f2:	e841 2300 	strex	r3, r2, [r1]
 80037f6:	617b      	str	r3, [r7, #20]
   return(result);
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d1e5      	bne.n	80037ca <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2220      	movs	r2, #32
 8003802:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800380e:	2303      	movs	r3, #3
 8003810:	e012      	b.n	8003838 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	2220      	movs	r2, #32
 800381e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	2200      	movs	r2, #0
 8003826:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2200      	movs	r2, #0
 800382c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	2200      	movs	r2, #0
 8003832:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3758      	adds	r7, #88	@ 0x58
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}

08003840 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	60f8      	str	r0, [r7, #12]
 8003848:	60b9      	str	r1, [r7, #8]
 800384a:	603b      	str	r3, [r7, #0]
 800384c:	4613      	mov	r3, r2
 800384e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003850:	e04f      	b.n	80038f2 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003852:	69bb      	ldr	r3, [r7, #24]
 8003854:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003858:	d04b      	beq.n	80038f2 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800385a:	f7fd fb5f 	bl	8000f1c <HAL_GetTick>
 800385e:	4602      	mov	r2, r0
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	1ad3      	subs	r3, r2, r3
 8003864:	69ba      	ldr	r2, [r7, #24]
 8003866:	429a      	cmp	r2, r3
 8003868:	d302      	bcc.n	8003870 <UART_WaitOnFlagUntilTimeout+0x30>
 800386a:	69bb      	ldr	r3, [r7, #24]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d101      	bne.n	8003874 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003870:	2303      	movs	r3, #3
 8003872:	e04e      	b.n	8003912 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0304 	and.w	r3, r3, #4
 800387e:	2b00      	cmp	r3, #0
 8003880:	d037      	beq.n	80038f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	2b80      	cmp	r3, #128	@ 0x80
 8003886:	d034      	beq.n	80038f2 <UART_WaitOnFlagUntilTimeout+0xb2>
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	2b40      	cmp	r3, #64	@ 0x40
 800388c:	d031      	beq.n	80038f2 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	f003 0308 	and.w	r3, r3, #8
 8003898:	2b08      	cmp	r3, #8
 800389a:	d110      	bne.n	80038be <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	2208      	movs	r2, #8
 80038a2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 f838 	bl	800391a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	2208      	movs	r2, #8
 80038ae:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	2200      	movs	r2, #0
 80038b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e029      	b.n	8003912 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	69db      	ldr	r3, [r3, #28]
 80038c4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80038c8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80038cc:	d111      	bne.n	80038f2 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80038d6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80038d8:	68f8      	ldr	r0, [r7, #12]
 80038da:	f000 f81e 	bl	800391a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	2220      	movs	r2, #32
 80038e2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	2200      	movs	r2, #0
 80038ea:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80038ee:	2303      	movs	r3, #3
 80038f0:	e00f      	b.n	8003912 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	69da      	ldr	r2, [r3, #28]
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	4013      	ands	r3, r2
 80038fc:	68ba      	ldr	r2, [r7, #8]
 80038fe:	429a      	cmp	r2, r3
 8003900:	bf0c      	ite	eq
 8003902:	2301      	moveq	r3, #1
 8003904:	2300      	movne	r3, #0
 8003906:	b2db      	uxtb	r3, r3
 8003908:	461a      	mov	r2, r3
 800390a:	79fb      	ldrb	r3, [r7, #7]
 800390c:	429a      	cmp	r2, r3
 800390e:	d0a0      	beq.n	8003852 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3710      	adds	r7, #16
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}

0800391a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800391a:	b480      	push	{r7}
 800391c:	b095      	sub	sp, #84	@ 0x54
 800391e:	af00      	add	r7, sp, #0
 8003920:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003928:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800392a:	e853 3f00 	ldrex	r3, [r3]
 800392e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003930:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003932:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003936:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	461a      	mov	r2, r3
 800393e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003940:	643b      	str	r3, [r7, #64]	@ 0x40
 8003942:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003944:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003946:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003948:	e841 2300 	strex	r3, r2, [r1]
 800394c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800394e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003950:	2b00      	cmp	r3, #0
 8003952:	d1e6      	bne.n	8003922 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	3308      	adds	r3, #8
 800395a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800395c:	6a3b      	ldr	r3, [r7, #32]
 800395e:	e853 3f00 	ldrex	r3, [r3]
 8003962:	61fb      	str	r3, [r7, #28]
   return(result);
 8003964:	69fb      	ldr	r3, [r7, #28]
 8003966:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800396a:	f023 0301 	bic.w	r3, r3, #1
 800396e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	3308      	adds	r3, #8
 8003976:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003978:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800397a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800397c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800397e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003980:	e841 2300 	strex	r3, r2, [r1]
 8003984:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003986:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003988:	2b00      	cmp	r3, #0
 800398a:	d1e3      	bne.n	8003954 <UART_EndRxTransfer+0x3a>
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003990:	2b01      	cmp	r3, #1
 8003992:	d118      	bne.n	80039c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	e853 3f00 	ldrex	r3, [r3]
 80039a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80039a2:	68bb      	ldr	r3, [r7, #8]
 80039a4:	f023 0310 	bic.w	r3, r3, #16
 80039a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	461a      	mov	r2, r3
 80039b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80039b2:	61bb      	str	r3, [r7, #24]
 80039b4:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039b6:	6979      	ldr	r1, [r7, #20]
 80039b8:	69ba      	ldr	r2, [r7, #24]
 80039ba:	e841 2300 	strex	r3, r2, [r1]
 80039be:	613b      	str	r3, [r7, #16]
   return(result);
 80039c0:	693b      	ldr	r3, [r7, #16]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d1e6      	bne.n	8003994 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2220      	movs	r2, #32
 80039ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2200      	movs	r2, #0
 80039d2:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2200      	movs	r2, #0
 80039d8:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80039da:	bf00      	nop
 80039dc:	3754      	adds	r7, #84	@ 0x54
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b085      	sub	sp, #20
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80039f4:	2b01      	cmp	r3, #1
 80039f6:	d101      	bne.n	80039fc <HAL_UARTEx_DisableFifoMode+0x16>
 80039f8:	2302      	movs	r3, #2
 80039fa:	e027      	b.n	8003a4c <HAL_UARTEx_DisableFifoMode+0x66>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2201      	movs	r2, #1
 8003a00:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2224      	movs	r2, #36	@ 0x24
 8003a08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f022 0201 	bic.w	r2, r2, #1
 8003a22:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8003a2a:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	681b      	ldr	r3, [r3, #0]
 8003a36:	68fa      	ldr	r2, [r7, #12]
 8003a38:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2220      	movs	r2, #32
 8003a3e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2200      	movs	r2, #0
 8003a46:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003a4a:	2300      	movs	r3, #0
}
 8003a4c:	4618      	mov	r0, r3
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a56:	4770      	bx	lr

08003a58 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003a58:	b580      	push	{r7, lr}
 8003a5a:	b084      	sub	sp, #16
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e02d      	b.n	8003acc <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2224      	movs	r2, #36	@ 0x24
 8003a7c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	681a      	ldr	r2, [r3, #0]
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	f022 0201 	bic.w	r2, r2, #1
 8003a96:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	689b      	ldr	r3, [r3, #8]
 8003a9e:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	683a      	ldr	r2, [r7, #0]
 8003aa8:	430a      	orrs	r2, r1
 8003aaa:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003aac:	6878      	ldr	r0, [r7, #4]
 8003aae:	f000 f84f 	bl	8003b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68fa      	ldr	r2, [r7, #12]
 8003ab8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	2220      	movs	r2, #32
 8003abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	2200      	movs	r2, #0
 8003ac6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003aca:	2300      	movs	r3, #0
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	3710      	adds	r7, #16
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	bd80      	pop	{r7, pc}

08003ad4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b084      	sub	sp, #16
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
 8003adc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8003ae4:	2b01      	cmp	r3, #1
 8003ae6:	d101      	bne.n	8003aec <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8003ae8:	2302      	movs	r3, #2
 8003aea:	e02d      	b.n	8003b48 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2224      	movs	r2, #36	@ 0x24
 8003af8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	681a      	ldr	r2, [r3, #0]
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	f022 0201 	bic.w	r2, r2, #1
 8003b12:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	689b      	ldr	r3, [r3, #8]
 8003b1a:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	683a      	ldr	r2, [r7, #0]
 8003b24:	430a      	orrs	r2, r1
 8003b26:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8003b28:	6878      	ldr	r0, [r7, #4]
 8003b2a:	f000 f811 	bl	8003b50 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2220      	movs	r2, #32
 8003b3a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	2200      	movs	r2, #0
 8003b42:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8003b46:	2300      	movs	r3, #0
}
 8003b48:	4618      	mov	r0, r3
 8003b4a:	3710      	adds	r7, #16
 8003b4c:	46bd      	mov	sp, r7
 8003b4e:	bd80      	pop	{r7, pc}

08003b50 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8003b50:	b480      	push	{r7}
 8003b52:	b085      	sub	sp, #20
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d108      	bne.n	8003b72 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2201      	movs	r2, #1
 8003b64:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2201      	movs	r2, #1
 8003b6c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8003b70:	e031      	b.n	8003bd6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8003b72:	2308      	movs	r3, #8
 8003b74:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8003b76:	2308      	movs	r3, #8
 8003b78:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	689b      	ldr	r3, [r3, #8]
 8003b80:	0e5b      	lsrs	r3, r3, #25
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	f003 0307 	and.w	r3, r3, #7
 8003b88:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	689b      	ldr	r3, [r3, #8]
 8003b90:	0f5b      	lsrs	r3, r3, #29
 8003b92:	b2db      	uxtb	r3, r3
 8003b94:	f003 0307 	and.w	r3, r3, #7
 8003b98:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003b9a:	7bbb      	ldrb	r3, [r7, #14]
 8003b9c:	7b3a      	ldrb	r2, [r7, #12]
 8003b9e:	4911      	ldr	r1, [pc, #68]	@ (8003be4 <UARTEx_SetNbDataToProcess+0x94>)
 8003ba0:	5c8a      	ldrb	r2, [r1, r2]
 8003ba2:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8003ba6:	7b3a      	ldrb	r2, [r7, #12]
 8003ba8:	490f      	ldr	r1, [pc, #60]	@ (8003be8 <UARTEx_SetNbDataToProcess+0x98>)
 8003baa:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8003bac:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bb8:	7bfb      	ldrb	r3, [r7, #15]
 8003bba:	7b7a      	ldrb	r2, [r7, #13]
 8003bbc:	4909      	ldr	r1, [pc, #36]	@ (8003be4 <UARTEx_SetNbDataToProcess+0x94>)
 8003bbe:	5c8a      	ldrb	r2, [r1, r2]
 8003bc0:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8003bc4:	7b7a      	ldrb	r2, [r7, #13]
 8003bc6:	4908      	ldr	r1, [pc, #32]	@ (8003be8 <UARTEx_SetNbDataToProcess+0x98>)
 8003bc8:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8003bca:	fb93 f3f2 	sdiv	r3, r3, r2
 8003bce:	b29a      	uxth	r2, r3
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8003bd6:	bf00      	nop
 8003bd8:	3714      	adds	r7, #20
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	080045cc 	.word	0x080045cc
 8003be8:	080045d4 	.word	0x080045d4

08003bec <std>:
 8003bec:	2300      	movs	r3, #0
 8003bee:	b510      	push	{r4, lr}
 8003bf0:	4604      	mov	r4, r0
 8003bf2:	e9c0 3300 	strd	r3, r3, [r0]
 8003bf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003bfa:	6083      	str	r3, [r0, #8]
 8003bfc:	8181      	strh	r1, [r0, #12]
 8003bfe:	6643      	str	r3, [r0, #100]	@ 0x64
 8003c00:	81c2      	strh	r2, [r0, #14]
 8003c02:	6183      	str	r3, [r0, #24]
 8003c04:	4619      	mov	r1, r3
 8003c06:	2208      	movs	r2, #8
 8003c08:	305c      	adds	r0, #92	@ 0x5c
 8003c0a:	f000 f90f 	bl	8003e2c <memset>
 8003c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c44 <std+0x58>)
 8003c10:	6263      	str	r3, [r4, #36]	@ 0x24
 8003c12:	4b0d      	ldr	r3, [pc, #52]	@ (8003c48 <std+0x5c>)
 8003c14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003c16:	4b0d      	ldr	r3, [pc, #52]	@ (8003c4c <std+0x60>)
 8003c18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8003c50 <std+0x64>)
 8003c1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8003c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8003c54 <std+0x68>)
 8003c20:	6224      	str	r4, [r4, #32]
 8003c22:	429c      	cmp	r4, r3
 8003c24:	d006      	beq.n	8003c34 <std+0x48>
 8003c26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003c2a:	4294      	cmp	r4, r2
 8003c2c:	d002      	beq.n	8003c34 <std+0x48>
 8003c2e:	33d0      	adds	r3, #208	@ 0xd0
 8003c30:	429c      	cmp	r4, r3
 8003c32:	d105      	bne.n	8003c40 <std+0x54>
 8003c34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c3c:	f000 b928 	b.w	8003e90 <__retarget_lock_init_recursive>
 8003c40:	bd10      	pop	{r4, pc}
 8003c42:	bf00      	nop
 8003c44:	0800414d 	.word	0x0800414d
 8003c48:	0800416f 	.word	0x0800416f
 8003c4c:	080041a7 	.word	0x080041a7
 8003c50:	080041cb 	.word	0x080041cb
 8003c54:	20040120 	.word	0x20040120

08003c58 <stdio_exit_handler>:
 8003c58:	4a02      	ldr	r2, [pc, #8]	@ (8003c64 <stdio_exit_handler+0xc>)
 8003c5a:	4903      	ldr	r1, [pc, #12]	@ (8003c68 <stdio_exit_handler+0x10>)
 8003c5c:	4803      	ldr	r0, [pc, #12]	@ (8003c6c <stdio_exit_handler+0x14>)
 8003c5e:	f000 b869 	b.w	8003d34 <_fwalk_sglue>
 8003c62:	bf00      	nop
 8003c64:	2004000c 	.word	0x2004000c
 8003c68:	080040e5 	.word	0x080040e5
 8003c6c:	2004001c 	.word	0x2004001c

08003c70 <cleanup_stdio>:
 8003c70:	6841      	ldr	r1, [r0, #4]
 8003c72:	4b0c      	ldr	r3, [pc, #48]	@ (8003ca4 <cleanup_stdio+0x34>)
 8003c74:	4299      	cmp	r1, r3
 8003c76:	b510      	push	{r4, lr}
 8003c78:	4604      	mov	r4, r0
 8003c7a:	d001      	beq.n	8003c80 <cleanup_stdio+0x10>
 8003c7c:	f000 fa32 	bl	80040e4 <_fflush_r>
 8003c80:	68a1      	ldr	r1, [r4, #8]
 8003c82:	4b09      	ldr	r3, [pc, #36]	@ (8003ca8 <cleanup_stdio+0x38>)
 8003c84:	4299      	cmp	r1, r3
 8003c86:	d002      	beq.n	8003c8e <cleanup_stdio+0x1e>
 8003c88:	4620      	mov	r0, r4
 8003c8a:	f000 fa2b 	bl	80040e4 <_fflush_r>
 8003c8e:	68e1      	ldr	r1, [r4, #12]
 8003c90:	4b06      	ldr	r3, [pc, #24]	@ (8003cac <cleanup_stdio+0x3c>)
 8003c92:	4299      	cmp	r1, r3
 8003c94:	d004      	beq.n	8003ca0 <cleanup_stdio+0x30>
 8003c96:	4620      	mov	r0, r4
 8003c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003c9c:	f000 ba22 	b.w	80040e4 <_fflush_r>
 8003ca0:	bd10      	pop	{r4, pc}
 8003ca2:	bf00      	nop
 8003ca4:	20040120 	.word	0x20040120
 8003ca8:	20040188 	.word	0x20040188
 8003cac:	200401f0 	.word	0x200401f0

08003cb0 <global_stdio_init.part.0>:
 8003cb0:	b510      	push	{r4, lr}
 8003cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce0 <global_stdio_init.part.0+0x30>)
 8003cb4:	4c0b      	ldr	r4, [pc, #44]	@ (8003ce4 <global_stdio_init.part.0+0x34>)
 8003cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8003ce8 <global_stdio_init.part.0+0x38>)
 8003cb8:	601a      	str	r2, [r3, #0]
 8003cba:	4620      	mov	r0, r4
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	2104      	movs	r1, #4
 8003cc0:	f7ff ff94 	bl	8003bec <std>
 8003cc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003cc8:	2201      	movs	r2, #1
 8003cca:	2109      	movs	r1, #9
 8003ccc:	f7ff ff8e 	bl	8003bec <std>
 8003cd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003cd4:	2202      	movs	r2, #2
 8003cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003cda:	2112      	movs	r1, #18
 8003cdc:	f7ff bf86 	b.w	8003bec <std>
 8003ce0:	20040258 	.word	0x20040258
 8003ce4:	20040120 	.word	0x20040120
 8003ce8:	08003c59 	.word	0x08003c59

08003cec <__sfp_lock_acquire>:
 8003cec:	4801      	ldr	r0, [pc, #4]	@ (8003cf4 <__sfp_lock_acquire+0x8>)
 8003cee:	f000 b8d0 	b.w	8003e92 <__retarget_lock_acquire_recursive>
 8003cf2:	bf00      	nop
 8003cf4:	2004025d 	.word	0x2004025d

08003cf8 <__sfp_lock_release>:
 8003cf8:	4801      	ldr	r0, [pc, #4]	@ (8003d00 <__sfp_lock_release+0x8>)
 8003cfa:	f000 b8cb 	b.w	8003e94 <__retarget_lock_release_recursive>
 8003cfe:	bf00      	nop
 8003d00:	2004025d 	.word	0x2004025d

08003d04 <__sinit>:
 8003d04:	b510      	push	{r4, lr}
 8003d06:	4604      	mov	r4, r0
 8003d08:	f7ff fff0 	bl	8003cec <__sfp_lock_acquire>
 8003d0c:	6a23      	ldr	r3, [r4, #32]
 8003d0e:	b11b      	cbz	r3, 8003d18 <__sinit+0x14>
 8003d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003d14:	f7ff bff0 	b.w	8003cf8 <__sfp_lock_release>
 8003d18:	4b04      	ldr	r3, [pc, #16]	@ (8003d2c <__sinit+0x28>)
 8003d1a:	6223      	str	r3, [r4, #32]
 8003d1c:	4b04      	ldr	r3, [pc, #16]	@ (8003d30 <__sinit+0x2c>)
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1f5      	bne.n	8003d10 <__sinit+0xc>
 8003d24:	f7ff ffc4 	bl	8003cb0 <global_stdio_init.part.0>
 8003d28:	e7f2      	b.n	8003d10 <__sinit+0xc>
 8003d2a:	bf00      	nop
 8003d2c:	08003c71 	.word	0x08003c71
 8003d30:	20040258 	.word	0x20040258

08003d34 <_fwalk_sglue>:
 8003d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003d38:	4607      	mov	r7, r0
 8003d3a:	4688      	mov	r8, r1
 8003d3c:	4614      	mov	r4, r2
 8003d3e:	2600      	movs	r6, #0
 8003d40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003d44:	f1b9 0901 	subs.w	r9, r9, #1
 8003d48:	d505      	bpl.n	8003d56 <_fwalk_sglue+0x22>
 8003d4a:	6824      	ldr	r4, [r4, #0]
 8003d4c:	2c00      	cmp	r4, #0
 8003d4e:	d1f7      	bne.n	8003d40 <_fwalk_sglue+0xc>
 8003d50:	4630      	mov	r0, r6
 8003d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003d56:	89ab      	ldrh	r3, [r5, #12]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d907      	bls.n	8003d6c <_fwalk_sglue+0x38>
 8003d5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003d60:	3301      	adds	r3, #1
 8003d62:	d003      	beq.n	8003d6c <_fwalk_sglue+0x38>
 8003d64:	4629      	mov	r1, r5
 8003d66:	4638      	mov	r0, r7
 8003d68:	47c0      	blx	r8
 8003d6a:	4306      	orrs	r6, r0
 8003d6c:	3568      	adds	r5, #104	@ 0x68
 8003d6e:	e7e9      	b.n	8003d44 <_fwalk_sglue+0x10>

08003d70 <_puts_r>:
 8003d70:	6a03      	ldr	r3, [r0, #32]
 8003d72:	b570      	push	{r4, r5, r6, lr}
 8003d74:	6884      	ldr	r4, [r0, #8]
 8003d76:	4605      	mov	r5, r0
 8003d78:	460e      	mov	r6, r1
 8003d7a:	b90b      	cbnz	r3, 8003d80 <_puts_r+0x10>
 8003d7c:	f7ff ffc2 	bl	8003d04 <__sinit>
 8003d80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003d82:	07db      	lsls	r3, r3, #31
 8003d84:	d405      	bmi.n	8003d92 <_puts_r+0x22>
 8003d86:	89a3      	ldrh	r3, [r4, #12]
 8003d88:	0598      	lsls	r0, r3, #22
 8003d8a:	d402      	bmi.n	8003d92 <_puts_r+0x22>
 8003d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003d8e:	f000 f880 	bl	8003e92 <__retarget_lock_acquire_recursive>
 8003d92:	89a3      	ldrh	r3, [r4, #12]
 8003d94:	0719      	lsls	r1, r3, #28
 8003d96:	d502      	bpl.n	8003d9e <_puts_r+0x2e>
 8003d98:	6923      	ldr	r3, [r4, #16]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d135      	bne.n	8003e0a <_puts_r+0x9a>
 8003d9e:	4621      	mov	r1, r4
 8003da0:	4628      	mov	r0, r5
 8003da2:	f000 fa55 	bl	8004250 <__swsetup_r>
 8003da6:	b380      	cbz	r0, 8003e0a <_puts_r+0x9a>
 8003da8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003dac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003dae:	07da      	lsls	r2, r3, #31
 8003db0:	d405      	bmi.n	8003dbe <_puts_r+0x4e>
 8003db2:	89a3      	ldrh	r3, [r4, #12]
 8003db4:	059b      	lsls	r3, r3, #22
 8003db6:	d402      	bmi.n	8003dbe <_puts_r+0x4e>
 8003db8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003dba:	f000 f86b 	bl	8003e94 <__retarget_lock_release_recursive>
 8003dbe:	4628      	mov	r0, r5
 8003dc0:	bd70      	pop	{r4, r5, r6, pc}
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	da04      	bge.n	8003dd0 <_puts_r+0x60>
 8003dc6:	69a2      	ldr	r2, [r4, #24]
 8003dc8:	429a      	cmp	r2, r3
 8003dca:	dc17      	bgt.n	8003dfc <_puts_r+0x8c>
 8003dcc:	290a      	cmp	r1, #10
 8003dce:	d015      	beq.n	8003dfc <_puts_r+0x8c>
 8003dd0:	6823      	ldr	r3, [r4, #0]
 8003dd2:	1c5a      	adds	r2, r3, #1
 8003dd4:	6022      	str	r2, [r4, #0]
 8003dd6:	7019      	strb	r1, [r3, #0]
 8003dd8:	68a3      	ldr	r3, [r4, #8]
 8003dda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8003dde:	3b01      	subs	r3, #1
 8003de0:	60a3      	str	r3, [r4, #8]
 8003de2:	2900      	cmp	r1, #0
 8003de4:	d1ed      	bne.n	8003dc2 <_puts_r+0x52>
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	da11      	bge.n	8003e0e <_puts_r+0x9e>
 8003dea:	4622      	mov	r2, r4
 8003dec:	210a      	movs	r1, #10
 8003dee:	4628      	mov	r0, r5
 8003df0:	f000 f9ef 	bl	80041d2 <__swbuf_r>
 8003df4:	3001      	adds	r0, #1
 8003df6:	d0d7      	beq.n	8003da8 <_puts_r+0x38>
 8003df8:	250a      	movs	r5, #10
 8003dfa:	e7d7      	b.n	8003dac <_puts_r+0x3c>
 8003dfc:	4622      	mov	r2, r4
 8003dfe:	4628      	mov	r0, r5
 8003e00:	f000 f9e7 	bl	80041d2 <__swbuf_r>
 8003e04:	3001      	adds	r0, #1
 8003e06:	d1e7      	bne.n	8003dd8 <_puts_r+0x68>
 8003e08:	e7ce      	b.n	8003da8 <_puts_r+0x38>
 8003e0a:	3e01      	subs	r6, #1
 8003e0c:	e7e4      	b.n	8003dd8 <_puts_r+0x68>
 8003e0e:	6823      	ldr	r3, [r4, #0]
 8003e10:	1c5a      	adds	r2, r3, #1
 8003e12:	6022      	str	r2, [r4, #0]
 8003e14:	220a      	movs	r2, #10
 8003e16:	701a      	strb	r2, [r3, #0]
 8003e18:	e7ee      	b.n	8003df8 <_puts_r+0x88>
	...

08003e1c <puts>:
 8003e1c:	4b02      	ldr	r3, [pc, #8]	@ (8003e28 <puts+0xc>)
 8003e1e:	4601      	mov	r1, r0
 8003e20:	6818      	ldr	r0, [r3, #0]
 8003e22:	f7ff bfa5 	b.w	8003d70 <_puts_r>
 8003e26:	bf00      	nop
 8003e28:	20040018 	.word	0x20040018

08003e2c <memset>:
 8003e2c:	4402      	add	r2, r0
 8003e2e:	4603      	mov	r3, r0
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d100      	bne.n	8003e36 <memset+0xa>
 8003e34:	4770      	bx	lr
 8003e36:	f803 1b01 	strb.w	r1, [r3], #1
 8003e3a:	e7f9      	b.n	8003e30 <memset+0x4>

08003e3c <__errno>:
 8003e3c:	4b01      	ldr	r3, [pc, #4]	@ (8003e44 <__errno+0x8>)
 8003e3e:	6818      	ldr	r0, [r3, #0]
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	20040018 	.word	0x20040018

08003e48 <__libc_init_array>:
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	4d0d      	ldr	r5, [pc, #52]	@ (8003e80 <__libc_init_array+0x38>)
 8003e4c:	4c0d      	ldr	r4, [pc, #52]	@ (8003e84 <__libc_init_array+0x3c>)
 8003e4e:	1b64      	subs	r4, r4, r5
 8003e50:	10a4      	asrs	r4, r4, #2
 8003e52:	2600      	movs	r6, #0
 8003e54:	42a6      	cmp	r6, r4
 8003e56:	d109      	bne.n	8003e6c <__libc_init_array+0x24>
 8003e58:	4d0b      	ldr	r5, [pc, #44]	@ (8003e88 <__libc_init_array+0x40>)
 8003e5a:	4c0c      	ldr	r4, [pc, #48]	@ (8003e8c <__libc_init_array+0x44>)
 8003e5c:	f000 fb72 	bl	8004544 <_init>
 8003e60:	1b64      	subs	r4, r4, r5
 8003e62:	10a4      	asrs	r4, r4, #2
 8003e64:	2600      	movs	r6, #0
 8003e66:	42a6      	cmp	r6, r4
 8003e68:	d105      	bne.n	8003e76 <__libc_init_array+0x2e>
 8003e6a:	bd70      	pop	{r4, r5, r6, pc}
 8003e6c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e70:	4798      	blx	r3
 8003e72:	3601      	adds	r6, #1
 8003e74:	e7ee      	b.n	8003e54 <__libc_init_array+0xc>
 8003e76:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e7a:	4798      	blx	r3
 8003e7c:	3601      	adds	r6, #1
 8003e7e:	e7f2      	b.n	8003e66 <__libc_init_array+0x1e>
 8003e80:	080045e4 	.word	0x080045e4
 8003e84:	080045e4 	.word	0x080045e4
 8003e88:	080045e4 	.word	0x080045e4
 8003e8c:	080045e8 	.word	0x080045e8

08003e90 <__retarget_lock_init_recursive>:
 8003e90:	4770      	bx	lr

08003e92 <__retarget_lock_acquire_recursive>:
 8003e92:	4770      	bx	lr

08003e94 <__retarget_lock_release_recursive>:
 8003e94:	4770      	bx	lr
	...

08003e98 <sbrk_aligned>:
 8003e98:	b570      	push	{r4, r5, r6, lr}
 8003e9a:	4e0f      	ldr	r6, [pc, #60]	@ (8003ed8 <sbrk_aligned+0x40>)
 8003e9c:	460c      	mov	r4, r1
 8003e9e:	6831      	ldr	r1, [r6, #0]
 8003ea0:	4605      	mov	r5, r0
 8003ea2:	b911      	cbnz	r1, 8003eaa <sbrk_aligned+0x12>
 8003ea4:	f000 fac0 	bl	8004428 <_sbrk_r>
 8003ea8:	6030      	str	r0, [r6, #0]
 8003eaa:	4621      	mov	r1, r4
 8003eac:	4628      	mov	r0, r5
 8003eae:	f000 fabb 	bl	8004428 <_sbrk_r>
 8003eb2:	1c43      	adds	r3, r0, #1
 8003eb4:	d103      	bne.n	8003ebe <sbrk_aligned+0x26>
 8003eb6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003eba:	4620      	mov	r0, r4
 8003ebc:	bd70      	pop	{r4, r5, r6, pc}
 8003ebe:	1cc4      	adds	r4, r0, #3
 8003ec0:	f024 0403 	bic.w	r4, r4, #3
 8003ec4:	42a0      	cmp	r0, r4
 8003ec6:	d0f8      	beq.n	8003eba <sbrk_aligned+0x22>
 8003ec8:	1a21      	subs	r1, r4, r0
 8003eca:	4628      	mov	r0, r5
 8003ecc:	f000 faac 	bl	8004428 <_sbrk_r>
 8003ed0:	3001      	adds	r0, #1
 8003ed2:	d1f2      	bne.n	8003eba <sbrk_aligned+0x22>
 8003ed4:	e7ef      	b.n	8003eb6 <sbrk_aligned+0x1e>
 8003ed6:	bf00      	nop
 8003ed8:	20040260 	.word	0x20040260

08003edc <_malloc_r>:
 8003edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003ee0:	1ccd      	adds	r5, r1, #3
 8003ee2:	f025 0503 	bic.w	r5, r5, #3
 8003ee6:	3508      	adds	r5, #8
 8003ee8:	2d0c      	cmp	r5, #12
 8003eea:	bf38      	it	cc
 8003eec:	250c      	movcc	r5, #12
 8003eee:	2d00      	cmp	r5, #0
 8003ef0:	4606      	mov	r6, r0
 8003ef2:	db01      	blt.n	8003ef8 <_malloc_r+0x1c>
 8003ef4:	42a9      	cmp	r1, r5
 8003ef6:	d904      	bls.n	8003f02 <_malloc_r+0x26>
 8003ef8:	230c      	movs	r3, #12
 8003efa:	6033      	str	r3, [r6, #0]
 8003efc:	2000      	movs	r0, #0
 8003efe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f02:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003fd8 <_malloc_r+0xfc>
 8003f06:	f000 f915 	bl	8004134 <__malloc_lock>
 8003f0a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f0e:	461c      	mov	r4, r3
 8003f10:	bb44      	cbnz	r4, 8003f64 <_malloc_r+0x88>
 8003f12:	4629      	mov	r1, r5
 8003f14:	4630      	mov	r0, r6
 8003f16:	f7ff ffbf 	bl	8003e98 <sbrk_aligned>
 8003f1a:	1c43      	adds	r3, r0, #1
 8003f1c:	4604      	mov	r4, r0
 8003f1e:	d158      	bne.n	8003fd2 <_malloc_r+0xf6>
 8003f20:	f8d8 4000 	ldr.w	r4, [r8]
 8003f24:	4627      	mov	r7, r4
 8003f26:	2f00      	cmp	r7, #0
 8003f28:	d143      	bne.n	8003fb2 <_malloc_r+0xd6>
 8003f2a:	2c00      	cmp	r4, #0
 8003f2c:	d04b      	beq.n	8003fc6 <_malloc_r+0xea>
 8003f2e:	6823      	ldr	r3, [r4, #0]
 8003f30:	4639      	mov	r1, r7
 8003f32:	4630      	mov	r0, r6
 8003f34:	eb04 0903 	add.w	r9, r4, r3
 8003f38:	f000 fa76 	bl	8004428 <_sbrk_r>
 8003f3c:	4581      	cmp	r9, r0
 8003f3e:	d142      	bne.n	8003fc6 <_malloc_r+0xea>
 8003f40:	6821      	ldr	r1, [r4, #0]
 8003f42:	1a6d      	subs	r5, r5, r1
 8003f44:	4629      	mov	r1, r5
 8003f46:	4630      	mov	r0, r6
 8003f48:	f7ff ffa6 	bl	8003e98 <sbrk_aligned>
 8003f4c:	3001      	adds	r0, #1
 8003f4e:	d03a      	beq.n	8003fc6 <_malloc_r+0xea>
 8003f50:	6823      	ldr	r3, [r4, #0]
 8003f52:	442b      	add	r3, r5
 8003f54:	6023      	str	r3, [r4, #0]
 8003f56:	f8d8 3000 	ldr.w	r3, [r8]
 8003f5a:	685a      	ldr	r2, [r3, #4]
 8003f5c:	bb62      	cbnz	r2, 8003fb8 <_malloc_r+0xdc>
 8003f5e:	f8c8 7000 	str.w	r7, [r8]
 8003f62:	e00f      	b.n	8003f84 <_malloc_r+0xa8>
 8003f64:	6822      	ldr	r2, [r4, #0]
 8003f66:	1b52      	subs	r2, r2, r5
 8003f68:	d420      	bmi.n	8003fac <_malloc_r+0xd0>
 8003f6a:	2a0b      	cmp	r2, #11
 8003f6c:	d917      	bls.n	8003f9e <_malloc_r+0xc2>
 8003f6e:	1961      	adds	r1, r4, r5
 8003f70:	42a3      	cmp	r3, r4
 8003f72:	6025      	str	r5, [r4, #0]
 8003f74:	bf18      	it	ne
 8003f76:	6059      	strne	r1, [r3, #4]
 8003f78:	6863      	ldr	r3, [r4, #4]
 8003f7a:	bf08      	it	eq
 8003f7c:	f8c8 1000 	streq.w	r1, [r8]
 8003f80:	5162      	str	r2, [r4, r5]
 8003f82:	604b      	str	r3, [r1, #4]
 8003f84:	4630      	mov	r0, r6
 8003f86:	f000 f8db 	bl	8004140 <__malloc_unlock>
 8003f8a:	f104 000b 	add.w	r0, r4, #11
 8003f8e:	1d23      	adds	r3, r4, #4
 8003f90:	f020 0007 	bic.w	r0, r0, #7
 8003f94:	1ac2      	subs	r2, r0, r3
 8003f96:	bf1c      	itt	ne
 8003f98:	1a1b      	subne	r3, r3, r0
 8003f9a:	50a3      	strne	r3, [r4, r2]
 8003f9c:	e7af      	b.n	8003efe <_malloc_r+0x22>
 8003f9e:	6862      	ldr	r2, [r4, #4]
 8003fa0:	42a3      	cmp	r3, r4
 8003fa2:	bf0c      	ite	eq
 8003fa4:	f8c8 2000 	streq.w	r2, [r8]
 8003fa8:	605a      	strne	r2, [r3, #4]
 8003faa:	e7eb      	b.n	8003f84 <_malloc_r+0xa8>
 8003fac:	4623      	mov	r3, r4
 8003fae:	6864      	ldr	r4, [r4, #4]
 8003fb0:	e7ae      	b.n	8003f10 <_malloc_r+0x34>
 8003fb2:	463c      	mov	r4, r7
 8003fb4:	687f      	ldr	r7, [r7, #4]
 8003fb6:	e7b6      	b.n	8003f26 <_malloc_r+0x4a>
 8003fb8:	461a      	mov	r2, r3
 8003fba:	685b      	ldr	r3, [r3, #4]
 8003fbc:	42a3      	cmp	r3, r4
 8003fbe:	d1fb      	bne.n	8003fb8 <_malloc_r+0xdc>
 8003fc0:	2300      	movs	r3, #0
 8003fc2:	6053      	str	r3, [r2, #4]
 8003fc4:	e7de      	b.n	8003f84 <_malloc_r+0xa8>
 8003fc6:	230c      	movs	r3, #12
 8003fc8:	6033      	str	r3, [r6, #0]
 8003fca:	4630      	mov	r0, r6
 8003fcc:	f000 f8b8 	bl	8004140 <__malloc_unlock>
 8003fd0:	e794      	b.n	8003efc <_malloc_r+0x20>
 8003fd2:	6005      	str	r5, [r0, #0]
 8003fd4:	e7d6      	b.n	8003f84 <_malloc_r+0xa8>
 8003fd6:	bf00      	nop
 8003fd8:	20040264 	.word	0x20040264

08003fdc <__sflush_r>:
 8003fdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8003fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003fe4:	0716      	lsls	r6, r2, #28
 8003fe6:	4605      	mov	r5, r0
 8003fe8:	460c      	mov	r4, r1
 8003fea:	d454      	bmi.n	8004096 <__sflush_r+0xba>
 8003fec:	684b      	ldr	r3, [r1, #4]
 8003fee:	2b00      	cmp	r3, #0
 8003ff0:	dc02      	bgt.n	8003ff8 <__sflush_r+0x1c>
 8003ff2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	dd48      	ble.n	800408a <__sflush_r+0xae>
 8003ff8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003ffa:	2e00      	cmp	r6, #0
 8003ffc:	d045      	beq.n	800408a <__sflush_r+0xae>
 8003ffe:	2300      	movs	r3, #0
 8004000:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004004:	682f      	ldr	r7, [r5, #0]
 8004006:	6a21      	ldr	r1, [r4, #32]
 8004008:	602b      	str	r3, [r5, #0]
 800400a:	d030      	beq.n	800406e <__sflush_r+0x92>
 800400c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800400e:	89a3      	ldrh	r3, [r4, #12]
 8004010:	0759      	lsls	r1, r3, #29
 8004012:	d505      	bpl.n	8004020 <__sflush_r+0x44>
 8004014:	6863      	ldr	r3, [r4, #4]
 8004016:	1ad2      	subs	r2, r2, r3
 8004018:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800401a:	b10b      	cbz	r3, 8004020 <__sflush_r+0x44>
 800401c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800401e:	1ad2      	subs	r2, r2, r3
 8004020:	2300      	movs	r3, #0
 8004022:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004024:	6a21      	ldr	r1, [r4, #32]
 8004026:	4628      	mov	r0, r5
 8004028:	47b0      	blx	r6
 800402a:	1c43      	adds	r3, r0, #1
 800402c:	89a3      	ldrh	r3, [r4, #12]
 800402e:	d106      	bne.n	800403e <__sflush_r+0x62>
 8004030:	6829      	ldr	r1, [r5, #0]
 8004032:	291d      	cmp	r1, #29
 8004034:	d82b      	bhi.n	800408e <__sflush_r+0xb2>
 8004036:	4a2a      	ldr	r2, [pc, #168]	@ (80040e0 <__sflush_r+0x104>)
 8004038:	40ca      	lsrs	r2, r1
 800403a:	07d6      	lsls	r6, r2, #31
 800403c:	d527      	bpl.n	800408e <__sflush_r+0xb2>
 800403e:	2200      	movs	r2, #0
 8004040:	6062      	str	r2, [r4, #4]
 8004042:	04d9      	lsls	r1, r3, #19
 8004044:	6922      	ldr	r2, [r4, #16]
 8004046:	6022      	str	r2, [r4, #0]
 8004048:	d504      	bpl.n	8004054 <__sflush_r+0x78>
 800404a:	1c42      	adds	r2, r0, #1
 800404c:	d101      	bne.n	8004052 <__sflush_r+0x76>
 800404e:	682b      	ldr	r3, [r5, #0]
 8004050:	b903      	cbnz	r3, 8004054 <__sflush_r+0x78>
 8004052:	6560      	str	r0, [r4, #84]	@ 0x54
 8004054:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004056:	602f      	str	r7, [r5, #0]
 8004058:	b1b9      	cbz	r1, 800408a <__sflush_r+0xae>
 800405a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800405e:	4299      	cmp	r1, r3
 8004060:	d002      	beq.n	8004068 <__sflush_r+0x8c>
 8004062:	4628      	mov	r0, r5
 8004064:	f000 fa24 	bl	80044b0 <_free_r>
 8004068:	2300      	movs	r3, #0
 800406a:	6363      	str	r3, [r4, #52]	@ 0x34
 800406c:	e00d      	b.n	800408a <__sflush_r+0xae>
 800406e:	2301      	movs	r3, #1
 8004070:	4628      	mov	r0, r5
 8004072:	47b0      	blx	r6
 8004074:	4602      	mov	r2, r0
 8004076:	1c50      	adds	r0, r2, #1
 8004078:	d1c9      	bne.n	800400e <__sflush_r+0x32>
 800407a:	682b      	ldr	r3, [r5, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d0c6      	beq.n	800400e <__sflush_r+0x32>
 8004080:	2b1d      	cmp	r3, #29
 8004082:	d001      	beq.n	8004088 <__sflush_r+0xac>
 8004084:	2b16      	cmp	r3, #22
 8004086:	d11e      	bne.n	80040c6 <__sflush_r+0xea>
 8004088:	602f      	str	r7, [r5, #0]
 800408a:	2000      	movs	r0, #0
 800408c:	e022      	b.n	80040d4 <__sflush_r+0xf8>
 800408e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004092:	b21b      	sxth	r3, r3
 8004094:	e01b      	b.n	80040ce <__sflush_r+0xf2>
 8004096:	690f      	ldr	r7, [r1, #16]
 8004098:	2f00      	cmp	r7, #0
 800409a:	d0f6      	beq.n	800408a <__sflush_r+0xae>
 800409c:	0793      	lsls	r3, r2, #30
 800409e:	680e      	ldr	r6, [r1, #0]
 80040a0:	bf08      	it	eq
 80040a2:	694b      	ldreq	r3, [r1, #20]
 80040a4:	600f      	str	r7, [r1, #0]
 80040a6:	bf18      	it	ne
 80040a8:	2300      	movne	r3, #0
 80040aa:	eba6 0807 	sub.w	r8, r6, r7
 80040ae:	608b      	str	r3, [r1, #8]
 80040b0:	f1b8 0f00 	cmp.w	r8, #0
 80040b4:	dde9      	ble.n	800408a <__sflush_r+0xae>
 80040b6:	6a21      	ldr	r1, [r4, #32]
 80040b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80040ba:	4643      	mov	r3, r8
 80040bc:	463a      	mov	r2, r7
 80040be:	4628      	mov	r0, r5
 80040c0:	47b0      	blx	r6
 80040c2:	2800      	cmp	r0, #0
 80040c4:	dc08      	bgt.n	80040d8 <__sflush_r+0xfc>
 80040c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80040ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80040ce:	81a3      	strh	r3, [r4, #12]
 80040d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80040d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80040d8:	4407      	add	r7, r0
 80040da:	eba8 0800 	sub.w	r8, r8, r0
 80040de:	e7e7      	b.n	80040b0 <__sflush_r+0xd4>
 80040e0:	20400001 	.word	0x20400001

080040e4 <_fflush_r>:
 80040e4:	b538      	push	{r3, r4, r5, lr}
 80040e6:	690b      	ldr	r3, [r1, #16]
 80040e8:	4605      	mov	r5, r0
 80040ea:	460c      	mov	r4, r1
 80040ec:	b913      	cbnz	r3, 80040f4 <_fflush_r+0x10>
 80040ee:	2500      	movs	r5, #0
 80040f0:	4628      	mov	r0, r5
 80040f2:	bd38      	pop	{r3, r4, r5, pc}
 80040f4:	b118      	cbz	r0, 80040fe <_fflush_r+0x1a>
 80040f6:	6a03      	ldr	r3, [r0, #32]
 80040f8:	b90b      	cbnz	r3, 80040fe <_fflush_r+0x1a>
 80040fa:	f7ff fe03 	bl	8003d04 <__sinit>
 80040fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004102:	2b00      	cmp	r3, #0
 8004104:	d0f3      	beq.n	80040ee <_fflush_r+0xa>
 8004106:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004108:	07d0      	lsls	r0, r2, #31
 800410a:	d404      	bmi.n	8004116 <_fflush_r+0x32>
 800410c:	0599      	lsls	r1, r3, #22
 800410e:	d402      	bmi.n	8004116 <_fflush_r+0x32>
 8004110:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004112:	f7ff febe 	bl	8003e92 <__retarget_lock_acquire_recursive>
 8004116:	4628      	mov	r0, r5
 8004118:	4621      	mov	r1, r4
 800411a:	f7ff ff5f 	bl	8003fdc <__sflush_r>
 800411e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004120:	07da      	lsls	r2, r3, #31
 8004122:	4605      	mov	r5, r0
 8004124:	d4e4      	bmi.n	80040f0 <_fflush_r+0xc>
 8004126:	89a3      	ldrh	r3, [r4, #12]
 8004128:	059b      	lsls	r3, r3, #22
 800412a:	d4e1      	bmi.n	80040f0 <_fflush_r+0xc>
 800412c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800412e:	f7ff feb1 	bl	8003e94 <__retarget_lock_release_recursive>
 8004132:	e7dd      	b.n	80040f0 <_fflush_r+0xc>

08004134 <__malloc_lock>:
 8004134:	4801      	ldr	r0, [pc, #4]	@ (800413c <__malloc_lock+0x8>)
 8004136:	f7ff beac 	b.w	8003e92 <__retarget_lock_acquire_recursive>
 800413a:	bf00      	nop
 800413c:	2004025c 	.word	0x2004025c

08004140 <__malloc_unlock>:
 8004140:	4801      	ldr	r0, [pc, #4]	@ (8004148 <__malloc_unlock+0x8>)
 8004142:	f7ff bea7 	b.w	8003e94 <__retarget_lock_release_recursive>
 8004146:	bf00      	nop
 8004148:	2004025c 	.word	0x2004025c

0800414c <__sread>:
 800414c:	b510      	push	{r4, lr}
 800414e:	460c      	mov	r4, r1
 8004150:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004154:	f000 f956 	bl	8004404 <_read_r>
 8004158:	2800      	cmp	r0, #0
 800415a:	bfab      	itete	ge
 800415c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800415e:	89a3      	ldrhlt	r3, [r4, #12]
 8004160:	181b      	addge	r3, r3, r0
 8004162:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004166:	bfac      	ite	ge
 8004168:	6563      	strge	r3, [r4, #84]	@ 0x54
 800416a:	81a3      	strhlt	r3, [r4, #12]
 800416c:	bd10      	pop	{r4, pc}

0800416e <__swrite>:
 800416e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004172:	461f      	mov	r7, r3
 8004174:	898b      	ldrh	r3, [r1, #12]
 8004176:	05db      	lsls	r3, r3, #23
 8004178:	4605      	mov	r5, r0
 800417a:	460c      	mov	r4, r1
 800417c:	4616      	mov	r6, r2
 800417e:	d505      	bpl.n	800418c <__swrite+0x1e>
 8004180:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004184:	2302      	movs	r3, #2
 8004186:	2200      	movs	r2, #0
 8004188:	f000 f92a 	bl	80043e0 <_lseek_r>
 800418c:	89a3      	ldrh	r3, [r4, #12]
 800418e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004192:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004196:	81a3      	strh	r3, [r4, #12]
 8004198:	4632      	mov	r2, r6
 800419a:	463b      	mov	r3, r7
 800419c:	4628      	mov	r0, r5
 800419e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80041a2:	f000 b951 	b.w	8004448 <_write_r>

080041a6 <__sseek>:
 80041a6:	b510      	push	{r4, lr}
 80041a8:	460c      	mov	r4, r1
 80041aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ae:	f000 f917 	bl	80043e0 <_lseek_r>
 80041b2:	1c43      	adds	r3, r0, #1
 80041b4:	89a3      	ldrh	r3, [r4, #12]
 80041b6:	bf15      	itete	ne
 80041b8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80041ba:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80041be:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80041c2:	81a3      	strheq	r3, [r4, #12]
 80041c4:	bf18      	it	ne
 80041c6:	81a3      	strhne	r3, [r4, #12]
 80041c8:	bd10      	pop	{r4, pc}

080041ca <__sclose>:
 80041ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80041ce:	f000 b94d 	b.w	800446c <_close_r>

080041d2 <__swbuf_r>:
 80041d2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80041d4:	460e      	mov	r6, r1
 80041d6:	4614      	mov	r4, r2
 80041d8:	4605      	mov	r5, r0
 80041da:	b118      	cbz	r0, 80041e4 <__swbuf_r+0x12>
 80041dc:	6a03      	ldr	r3, [r0, #32]
 80041de:	b90b      	cbnz	r3, 80041e4 <__swbuf_r+0x12>
 80041e0:	f7ff fd90 	bl	8003d04 <__sinit>
 80041e4:	69a3      	ldr	r3, [r4, #24]
 80041e6:	60a3      	str	r3, [r4, #8]
 80041e8:	89a3      	ldrh	r3, [r4, #12]
 80041ea:	071a      	lsls	r2, r3, #28
 80041ec:	d501      	bpl.n	80041f2 <__swbuf_r+0x20>
 80041ee:	6923      	ldr	r3, [r4, #16]
 80041f0:	b943      	cbnz	r3, 8004204 <__swbuf_r+0x32>
 80041f2:	4621      	mov	r1, r4
 80041f4:	4628      	mov	r0, r5
 80041f6:	f000 f82b 	bl	8004250 <__swsetup_r>
 80041fa:	b118      	cbz	r0, 8004204 <__swbuf_r+0x32>
 80041fc:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8004200:	4638      	mov	r0, r7
 8004202:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004204:	6823      	ldr	r3, [r4, #0]
 8004206:	6922      	ldr	r2, [r4, #16]
 8004208:	1a98      	subs	r0, r3, r2
 800420a:	6963      	ldr	r3, [r4, #20]
 800420c:	b2f6      	uxtb	r6, r6
 800420e:	4283      	cmp	r3, r0
 8004210:	4637      	mov	r7, r6
 8004212:	dc05      	bgt.n	8004220 <__swbuf_r+0x4e>
 8004214:	4621      	mov	r1, r4
 8004216:	4628      	mov	r0, r5
 8004218:	f7ff ff64 	bl	80040e4 <_fflush_r>
 800421c:	2800      	cmp	r0, #0
 800421e:	d1ed      	bne.n	80041fc <__swbuf_r+0x2a>
 8004220:	68a3      	ldr	r3, [r4, #8]
 8004222:	3b01      	subs	r3, #1
 8004224:	60a3      	str	r3, [r4, #8]
 8004226:	6823      	ldr	r3, [r4, #0]
 8004228:	1c5a      	adds	r2, r3, #1
 800422a:	6022      	str	r2, [r4, #0]
 800422c:	701e      	strb	r6, [r3, #0]
 800422e:	6962      	ldr	r2, [r4, #20]
 8004230:	1c43      	adds	r3, r0, #1
 8004232:	429a      	cmp	r2, r3
 8004234:	d004      	beq.n	8004240 <__swbuf_r+0x6e>
 8004236:	89a3      	ldrh	r3, [r4, #12]
 8004238:	07db      	lsls	r3, r3, #31
 800423a:	d5e1      	bpl.n	8004200 <__swbuf_r+0x2e>
 800423c:	2e0a      	cmp	r6, #10
 800423e:	d1df      	bne.n	8004200 <__swbuf_r+0x2e>
 8004240:	4621      	mov	r1, r4
 8004242:	4628      	mov	r0, r5
 8004244:	f7ff ff4e 	bl	80040e4 <_fflush_r>
 8004248:	2800      	cmp	r0, #0
 800424a:	d0d9      	beq.n	8004200 <__swbuf_r+0x2e>
 800424c:	e7d6      	b.n	80041fc <__swbuf_r+0x2a>
	...

08004250 <__swsetup_r>:
 8004250:	b538      	push	{r3, r4, r5, lr}
 8004252:	4b29      	ldr	r3, [pc, #164]	@ (80042f8 <__swsetup_r+0xa8>)
 8004254:	4605      	mov	r5, r0
 8004256:	6818      	ldr	r0, [r3, #0]
 8004258:	460c      	mov	r4, r1
 800425a:	b118      	cbz	r0, 8004264 <__swsetup_r+0x14>
 800425c:	6a03      	ldr	r3, [r0, #32]
 800425e:	b90b      	cbnz	r3, 8004264 <__swsetup_r+0x14>
 8004260:	f7ff fd50 	bl	8003d04 <__sinit>
 8004264:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004268:	0719      	lsls	r1, r3, #28
 800426a:	d422      	bmi.n	80042b2 <__swsetup_r+0x62>
 800426c:	06da      	lsls	r2, r3, #27
 800426e:	d407      	bmi.n	8004280 <__swsetup_r+0x30>
 8004270:	2209      	movs	r2, #9
 8004272:	602a      	str	r2, [r5, #0]
 8004274:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004278:	81a3      	strh	r3, [r4, #12]
 800427a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800427e:	e033      	b.n	80042e8 <__swsetup_r+0x98>
 8004280:	0758      	lsls	r0, r3, #29
 8004282:	d512      	bpl.n	80042aa <__swsetup_r+0x5a>
 8004284:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004286:	b141      	cbz	r1, 800429a <__swsetup_r+0x4a>
 8004288:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800428c:	4299      	cmp	r1, r3
 800428e:	d002      	beq.n	8004296 <__swsetup_r+0x46>
 8004290:	4628      	mov	r0, r5
 8004292:	f000 f90d 	bl	80044b0 <_free_r>
 8004296:	2300      	movs	r3, #0
 8004298:	6363      	str	r3, [r4, #52]	@ 0x34
 800429a:	89a3      	ldrh	r3, [r4, #12]
 800429c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80042a0:	81a3      	strh	r3, [r4, #12]
 80042a2:	2300      	movs	r3, #0
 80042a4:	6063      	str	r3, [r4, #4]
 80042a6:	6923      	ldr	r3, [r4, #16]
 80042a8:	6023      	str	r3, [r4, #0]
 80042aa:	89a3      	ldrh	r3, [r4, #12]
 80042ac:	f043 0308 	orr.w	r3, r3, #8
 80042b0:	81a3      	strh	r3, [r4, #12]
 80042b2:	6923      	ldr	r3, [r4, #16]
 80042b4:	b94b      	cbnz	r3, 80042ca <__swsetup_r+0x7a>
 80042b6:	89a3      	ldrh	r3, [r4, #12]
 80042b8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80042bc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80042c0:	d003      	beq.n	80042ca <__swsetup_r+0x7a>
 80042c2:	4621      	mov	r1, r4
 80042c4:	4628      	mov	r0, r5
 80042c6:	f000 f83f 	bl	8004348 <__smakebuf_r>
 80042ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80042ce:	f013 0201 	ands.w	r2, r3, #1
 80042d2:	d00a      	beq.n	80042ea <__swsetup_r+0x9a>
 80042d4:	2200      	movs	r2, #0
 80042d6:	60a2      	str	r2, [r4, #8]
 80042d8:	6962      	ldr	r2, [r4, #20]
 80042da:	4252      	negs	r2, r2
 80042dc:	61a2      	str	r2, [r4, #24]
 80042de:	6922      	ldr	r2, [r4, #16]
 80042e0:	b942      	cbnz	r2, 80042f4 <__swsetup_r+0xa4>
 80042e2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80042e6:	d1c5      	bne.n	8004274 <__swsetup_r+0x24>
 80042e8:	bd38      	pop	{r3, r4, r5, pc}
 80042ea:	0799      	lsls	r1, r3, #30
 80042ec:	bf58      	it	pl
 80042ee:	6962      	ldrpl	r2, [r4, #20]
 80042f0:	60a2      	str	r2, [r4, #8]
 80042f2:	e7f4      	b.n	80042de <__swsetup_r+0x8e>
 80042f4:	2000      	movs	r0, #0
 80042f6:	e7f7      	b.n	80042e8 <__swsetup_r+0x98>
 80042f8:	20040018 	.word	0x20040018

080042fc <__swhatbuf_r>:
 80042fc:	b570      	push	{r4, r5, r6, lr}
 80042fe:	460c      	mov	r4, r1
 8004300:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004304:	2900      	cmp	r1, #0
 8004306:	b096      	sub	sp, #88	@ 0x58
 8004308:	4615      	mov	r5, r2
 800430a:	461e      	mov	r6, r3
 800430c:	da0d      	bge.n	800432a <__swhatbuf_r+0x2e>
 800430e:	89a3      	ldrh	r3, [r4, #12]
 8004310:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004314:	f04f 0100 	mov.w	r1, #0
 8004318:	bf14      	ite	ne
 800431a:	2340      	movne	r3, #64	@ 0x40
 800431c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004320:	2000      	movs	r0, #0
 8004322:	6031      	str	r1, [r6, #0]
 8004324:	602b      	str	r3, [r5, #0]
 8004326:	b016      	add	sp, #88	@ 0x58
 8004328:	bd70      	pop	{r4, r5, r6, pc}
 800432a:	466a      	mov	r2, sp
 800432c:	f000 f8ae 	bl	800448c <_fstat_r>
 8004330:	2800      	cmp	r0, #0
 8004332:	dbec      	blt.n	800430e <__swhatbuf_r+0x12>
 8004334:	9901      	ldr	r1, [sp, #4]
 8004336:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800433a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800433e:	4259      	negs	r1, r3
 8004340:	4159      	adcs	r1, r3
 8004342:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004346:	e7eb      	b.n	8004320 <__swhatbuf_r+0x24>

08004348 <__smakebuf_r>:
 8004348:	898b      	ldrh	r3, [r1, #12]
 800434a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800434c:	079d      	lsls	r5, r3, #30
 800434e:	4606      	mov	r6, r0
 8004350:	460c      	mov	r4, r1
 8004352:	d507      	bpl.n	8004364 <__smakebuf_r+0x1c>
 8004354:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004358:	6023      	str	r3, [r4, #0]
 800435a:	6123      	str	r3, [r4, #16]
 800435c:	2301      	movs	r3, #1
 800435e:	6163      	str	r3, [r4, #20]
 8004360:	b003      	add	sp, #12
 8004362:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004364:	ab01      	add	r3, sp, #4
 8004366:	466a      	mov	r2, sp
 8004368:	f7ff ffc8 	bl	80042fc <__swhatbuf_r>
 800436c:	9f00      	ldr	r7, [sp, #0]
 800436e:	4605      	mov	r5, r0
 8004370:	4639      	mov	r1, r7
 8004372:	4630      	mov	r0, r6
 8004374:	f7ff fdb2 	bl	8003edc <_malloc_r>
 8004378:	b948      	cbnz	r0, 800438e <__smakebuf_r+0x46>
 800437a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800437e:	059a      	lsls	r2, r3, #22
 8004380:	d4ee      	bmi.n	8004360 <__smakebuf_r+0x18>
 8004382:	f023 0303 	bic.w	r3, r3, #3
 8004386:	f043 0302 	orr.w	r3, r3, #2
 800438a:	81a3      	strh	r3, [r4, #12]
 800438c:	e7e2      	b.n	8004354 <__smakebuf_r+0xc>
 800438e:	89a3      	ldrh	r3, [r4, #12]
 8004390:	6020      	str	r0, [r4, #0]
 8004392:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004396:	81a3      	strh	r3, [r4, #12]
 8004398:	9b01      	ldr	r3, [sp, #4]
 800439a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800439e:	b15b      	cbz	r3, 80043b8 <__smakebuf_r+0x70>
 80043a0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043a4:	4630      	mov	r0, r6
 80043a6:	f000 f80b 	bl	80043c0 <_isatty_r>
 80043aa:	b128      	cbz	r0, 80043b8 <__smakebuf_r+0x70>
 80043ac:	89a3      	ldrh	r3, [r4, #12]
 80043ae:	f023 0303 	bic.w	r3, r3, #3
 80043b2:	f043 0301 	orr.w	r3, r3, #1
 80043b6:	81a3      	strh	r3, [r4, #12]
 80043b8:	89a3      	ldrh	r3, [r4, #12]
 80043ba:	431d      	orrs	r5, r3
 80043bc:	81a5      	strh	r5, [r4, #12]
 80043be:	e7cf      	b.n	8004360 <__smakebuf_r+0x18>

080043c0 <_isatty_r>:
 80043c0:	b538      	push	{r3, r4, r5, lr}
 80043c2:	4d06      	ldr	r5, [pc, #24]	@ (80043dc <_isatty_r+0x1c>)
 80043c4:	2300      	movs	r3, #0
 80043c6:	4604      	mov	r4, r0
 80043c8:	4608      	mov	r0, r1
 80043ca:	602b      	str	r3, [r5, #0]
 80043cc:	f7fc fcb4 	bl	8000d38 <_isatty>
 80043d0:	1c43      	adds	r3, r0, #1
 80043d2:	d102      	bne.n	80043da <_isatty_r+0x1a>
 80043d4:	682b      	ldr	r3, [r5, #0]
 80043d6:	b103      	cbz	r3, 80043da <_isatty_r+0x1a>
 80043d8:	6023      	str	r3, [r4, #0]
 80043da:	bd38      	pop	{r3, r4, r5, pc}
 80043dc:	20040268 	.word	0x20040268

080043e0 <_lseek_r>:
 80043e0:	b538      	push	{r3, r4, r5, lr}
 80043e2:	4d07      	ldr	r5, [pc, #28]	@ (8004400 <_lseek_r+0x20>)
 80043e4:	4604      	mov	r4, r0
 80043e6:	4608      	mov	r0, r1
 80043e8:	4611      	mov	r1, r2
 80043ea:	2200      	movs	r2, #0
 80043ec:	602a      	str	r2, [r5, #0]
 80043ee:	461a      	mov	r2, r3
 80043f0:	f7fc fcad 	bl	8000d4e <_lseek>
 80043f4:	1c43      	adds	r3, r0, #1
 80043f6:	d102      	bne.n	80043fe <_lseek_r+0x1e>
 80043f8:	682b      	ldr	r3, [r5, #0]
 80043fa:	b103      	cbz	r3, 80043fe <_lseek_r+0x1e>
 80043fc:	6023      	str	r3, [r4, #0]
 80043fe:	bd38      	pop	{r3, r4, r5, pc}
 8004400:	20040268 	.word	0x20040268

08004404 <_read_r>:
 8004404:	b538      	push	{r3, r4, r5, lr}
 8004406:	4d07      	ldr	r5, [pc, #28]	@ (8004424 <_read_r+0x20>)
 8004408:	4604      	mov	r4, r0
 800440a:	4608      	mov	r0, r1
 800440c:	4611      	mov	r1, r2
 800440e:	2200      	movs	r2, #0
 8004410:	602a      	str	r2, [r5, #0]
 8004412:	461a      	mov	r2, r3
 8004414:	f7fc fc3b 	bl	8000c8e <_read>
 8004418:	1c43      	adds	r3, r0, #1
 800441a:	d102      	bne.n	8004422 <_read_r+0x1e>
 800441c:	682b      	ldr	r3, [r5, #0]
 800441e:	b103      	cbz	r3, 8004422 <_read_r+0x1e>
 8004420:	6023      	str	r3, [r4, #0]
 8004422:	bd38      	pop	{r3, r4, r5, pc}
 8004424:	20040268 	.word	0x20040268

08004428 <_sbrk_r>:
 8004428:	b538      	push	{r3, r4, r5, lr}
 800442a:	4d06      	ldr	r5, [pc, #24]	@ (8004444 <_sbrk_r+0x1c>)
 800442c:	2300      	movs	r3, #0
 800442e:	4604      	mov	r4, r0
 8004430:	4608      	mov	r0, r1
 8004432:	602b      	str	r3, [r5, #0]
 8004434:	f7fc fc98 	bl	8000d68 <_sbrk>
 8004438:	1c43      	adds	r3, r0, #1
 800443a:	d102      	bne.n	8004442 <_sbrk_r+0x1a>
 800443c:	682b      	ldr	r3, [r5, #0]
 800443e:	b103      	cbz	r3, 8004442 <_sbrk_r+0x1a>
 8004440:	6023      	str	r3, [r4, #0]
 8004442:	bd38      	pop	{r3, r4, r5, pc}
 8004444:	20040268 	.word	0x20040268

08004448 <_write_r>:
 8004448:	b538      	push	{r3, r4, r5, lr}
 800444a:	4d07      	ldr	r5, [pc, #28]	@ (8004468 <_write_r+0x20>)
 800444c:	4604      	mov	r4, r0
 800444e:	4608      	mov	r0, r1
 8004450:	4611      	mov	r1, r2
 8004452:	2200      	movs	r2, #0
 8004454:	602a      	str	r2, [r5, #0]
 8004456:	461a      	mov	r2, r3
 8004458:	f7fc fc36 	bl	8000cc8 <_write>
 800445c:	1c43      	adds	r3, r0, #1
 800445e:	d102      	bne.n	8004466 <_write_r+0x1e>
 8004460:	682b      	ldr	r3, [r5, #0]
 8004462:	b103      	cbz	r3, 8004466 <_write_r+0x1e>
 8004464:	6023      	str	r3, [r4, #0]
 8004466:	bd38      	pop	{r3, r4, r5, pc}
 8004468:	20040268 	.word	0x20040268

0800446c <_close_r>:
 800446c:	b538      	push	{r3, r4, r5, lr}
 800446e:	4d06      	ldr	r5, [pc, #24]	@ (8004488 <_close_r+0x1c>)
 8004470:	2300      	movs	r3, #0
 8004472:	4604      	mov	r4, r0
 8004474:	4608      	mov	r0, r1
 8004476:	602b      	str	r3, [r5, #0]
 8004478:	f7fc fc42 	bl	8000d00 <_close>
 800447c:	1c43      	adds	r3, r0, #1
 800447e:	d102      	bne.n	8004486 <_close_r+0x1a>
 8004480:	682b      	ldr	r3, [r5, #0]
 8004482:	b103      	cbz	r3, 8004486 <_close_r+0x1a>
 8004484:	6023      	str	r3, [r4, #0]
 8004486:	bd38      	pop	{r3, r4, r5, pc}
 8004488:	20040268 	.word	0x20040268

0800448c <_fstat_r>:
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	4d07      	ldr	r5, [pc, #28]	@ (80044ac <_fstat_r+0x20>)
 8004490:	2300      	movs	r3, #0
 8004492:	4604      	mov	r4, r0
 8004494:	4608      	mov	r0, r1
 8004496:	4611      	mov	r1, r2
 8004498:	602b      	str	r3, [r5, #0]
 800449a:	f7fc fc3d 	bl	8000d18 <_fstat>
 800449e:	1c43      	adds	r3, r0, #1
 80044a0:	d102      	bne.n	80044a8 <_fstat_r+0x1c>
 80044a2:	682b      	ldr	r3, [r5, #0]
 80044a4:	b103      	cbz	r3, 80044a8 <_fstat_r+0x1c>
 80044a6:	6023      	str	r3, [r4, #0]
 80044a8:	bd38      	pop	{r3, r4, r5, pc}
 80044aa:	bf00      	nop
 80044ac:	20040268 	.word	0x20040268

080044b0 <_free_r>:
 80044b0:	b538      	push	{r3, r4, r5, lr}
 80044b2:	4605      	mov	r5, r0
 80044b4:	2900      	cmp	r1, #0
 80044b6:	d041      	beq.n	800453c <_free_r+0x8c>
 80044b8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80044bc:	1f0c      	subs	r4, r1, #4
 80044be:	2b00      	cmp	r3, #0
 80044c0:	bfb8      	it	lt
 80044c2:	18e4      	addlt	r4, r4, r3
 80044c4:	f7ff fe36 	bl	8004134 <__malloc_lock>
 80044c8:	4a1d      	ldr	r2, [pc, #116]	@ (8004540 <_free_r+0x90>)
 80044ca:	6813      	ldr	r3, [r2, #0]
 80044cc:	b933      	cbnz	r3, 80044dc <_free_r+0x2c>
 80044ce:	6063      	str	r3, [r4, #4]
 80044d0:	6014      	str	r4, [r2, #0]
 80044d2:	4628      	mov	r0, r5
 80044d4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80044d8:	f7ff be32 	b.w	8004140 <__malloc_unlock>
 80044dc:	42a3      	cmp	r3, r4
 80044de:	d908      	bls.n	80044f2 <_free_r+0x42>
 80044e0:	6820      	ldr	r0, [r4, #0]
 80044e2:	1821      	adds	r1, r4, r0
 80044e4:	428b      	cmp	r3, r1
 80044e6:	bf01      	itttt	eq
 80044e8:	6819      	ldreq	r1, [r3, #0]
 80044ea:	685b      	ldreq	r3, [r3, #4]
 80044ec:	1809      	addeq	r1, r1, r0
 80044ee:	6021      	streq	r1, [r4, #0]
 80044f0:	e7ed      	b.n	80044ce <_free_r+0x1e>
 80044f2:	461a      	mov	r2, r3
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	b10b      	cbz	r3, 80044fc <_free_r+0x4c>
 80044f8:	42a3      	cmp	r3, r4
 80044fa:	d9fa      	bls.n	80044f2 <_free_r+0x42>
 80044fc:	6811      	ldr	r1, [r2, #0]
 80044fe:	1850      	adds	r0, r2, r1
 8004500:	42a0      	cmp	r0, r4
 8004502:	d10b      	bne.n	800451c <_free_r+0x6c>
 8004504:	6820      	ldr	r0, [r4, #0]
 8004506:	4401      	add	r1, r0
 8004508:	1850      	adds	r0, r2, r1
 800450a:	4283      	cmp	r3, r0
 800450c:	6011      	str	r1, [r2, #0]
 800450e:	d1e0      	bne.n	80044d2 <_free_r+0x22>
 8004510:	6818      	ldr	r0, [r3, #0]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	6053      	str	r3, [r2, #4]
 8004516:	4408      	add	r0, r1
 8004518:	6010      	str	r0, [r2, #0]
 800451a:	e7da      	b.n	80044d2 <_free_r+0x22>
 800451c:	d902      	bls.n	8004524 <_free_r+0x74>
 800451e:	230c      	movs	r3, #12
 8004520:	602b      	str	r3, [r5, #0]
 8004522:	e7d6      	b.n	80044d2 <_free_r+0x22>
 8004524:	6820      	ldr	r0, [r4, #0]
 8004526:	1821      	adds	r1, r4, r0
 8004528:	428b      	cmp	r3, r1
 800452a:	bf04      	itt	eq
 800452c:	6819      	ldreq	r1, [r3, #0]
 800452e:	685b      	ldreq	r3, [r3, #4]
 8004530:	6063      	str	r3, [r4, #4]
 8004532:	bf04      	itt	eq
 8004534:	1809      	addeq	r1, r1, r0
 8004536:	6021      	streq	r1, [r4, #0]
 8004538:	6054      	str	r4, [r2, #4]
 800453a:	e7ca      	b.n	80044d2 <_free_r+0x22>
 800453c:	bd38      	pop	{r3, r4, r5, pc}
 800453e:	bf00      	nop
 8004540:	20040264 	.word	0x20040264

08004544 <_init>:
 8004544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004546:	bf00      	nop
 8004548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800454a:	bc08      	pop	{r3}
 800454c:	469e      	mov	lr, r3
 800454e:	4770      	bx	lr

08004550 <_fini>:
 8004550:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004552:	bf00      	nop
 8004554:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004556:	bc08      	pop	{r3}
 8004558:	469e      	mov	lr, r3
 800455a:	4770      	bx	lr
